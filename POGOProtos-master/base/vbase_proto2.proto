/*
* Copyright 2016-2022 --=FurtiF=--.
*
* Licensed under the
*	Educational Community License, Version 2.0 (the "License"); you may
*	not use this file except in compliance with the License. You may
*	obtain a copy of the License at
*
*	http://www.osedu.org/licenses/ECL-2.0
*
*	Unless required by applicable law or agreed to in writing,
*	software distributed under the License is distributed on an "AS IS"
*	BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
*	or implied. See the License for the specific language governing
*	permissions and limitations under the License.
*
* Version: Base compatible 0.241.x.
*
*/

syntax = "proto2";
package POGOProtos.Rpc;

enum ASPermissionStatusTelemetryIds {
	AS_PERMISSION_STATUS_TELEMETRY_IDS_UNKNOWN = 0;
	AS_PERMISSION_STATUS_TELEMETRY_IDS_REQUESTED = 1;
	AS_PERMISSION_STATUS_TELEMETRY_IDS_GRANTED_IN_USE = 2;
	AS_PERMISSION_STATUS_TELEMETRY_IDS_GRANTED_ALWAYS = 3;
	AS_PERMISSION_STATUS_TELEMETRY_IDS_DENIED = 4;
}

enum ASPermissionTelemetryIds {
	AS_PERMISSION_TELEMETRY_IDS_UNSET_PERMISSION = 0;
	AS_PERMISSION_TELEMETRY_IDS_LOCATION = 1;
	AS_PERMISSION_TELEMETRY_IDS_BACKGROUND_LOCATION = 2;
	AS_PERMISSION_TELEMETRY_IDS_ACTIVITY = 3;
	AS_PERMISSION_TELEMETRY_IDS_PRECISE_LOCATION = 4;
	AS_PERMISSION_TELEMETRY_IDS_FITNESS_PERMISSION = 5;
}

enum ASServiceTelemetryIds {
	AS_SERVICE_TELEMETRY_IDS_UNSET_SERVICE = 0;
	AS_SERVICE_TELEMETRY_IDS_FITNESS = 1;
	AS_SERVICE_TELEMETRY_IDS_AWARENESS = 2;
	AS_SERVICE_TELEMETRY_IDS_BREADCRUMB = 3;
}

enum AdFeedbackComplaintReason {
	AD_FEEDBACK_COMPLAINT_REASON_INVALID = 0;
	AD_FEEDBACK_COMPLAINT_REASON_OFFENSIVE = 1;
	AD_FEEDBACK_COMPLAINT_REASON_SPAM = 2;
	AD_FEEDBACK_COMPLAINT_REASON_SEXUALLY_INAPPROPRIATE = 3;
	AD_FEEDBACK_COMPLAINT_REASON_SCAM_OR_MISLEADING = 4;
	AD_FEEDBACK_COMPLAINT_REASON_VIOLENCE_OR_PROHIBITED = 5;
	AD_FEEDBACK_COMPLAINT_REASON_POLITICAL = 6;
}

enum AdFeedbackLikeReason {
	AD_FEEDBACK_LIKE_REASON_INVALID = 0;
	AD_FEEDBACK_LIKE_REASON_CATEGORY = 1;
	AD_FEEDBACK_LIKE_REASON_SEE_MORE = 2;
	AD_FEEDBACK_LIKE_REASON_MORE_SPONSORED_GIFTS = 3;
	AD_FEEDBACK_LIKE_REASON_OTHER = 4;
}

enum AdFeedbackNotInterestedReason {
	AD_FEEDBACK_NOT_INTERESTED_REASON_INVALID = 0;
	AD_FEEDBACK_NOT_INTERESTED_REASON_NOT_RELEVANT = 1;
	AD_FEEDBACK_NOT_INTERESTED_REASON_SEEN_TOO_OFTEN = 2;
}

enum AdResponseStatus {
	WASABI_AD_FOUND = 0;
	NO_CAMPAIGNS_FOUND = 1;
	USER_NOT_ELIGIBLE = 2;
}

enum AdType {
	AD_TYPE_UNKNOWN = 0;
	AD_TYPE_SPONSORED_GIFT = 1;
	AD_TYPE_SPONSORED_BALLOON = 2;
	AD_TYPE_SPONSORED_BALLOON_WASABI = 3;
	AD_TYPE_SPONSORED_BALLOON_GOOGLE_MANAGED_AD = 4;
	AD_TYPE_SPONSORED_BALLOON_AR_AD = 5;
}

enum AssetTelemetryIds {
	ASSET_TELEMETRY_IDS_UNDEFINED_ASSET_EVENT = 0;
	ASSET_TELEMETRY_IDS_DOWNLOAD_START = 1;
	ASSET_TELEMETRY_IDS_DOWNLOAD_FINISHED = 2;
	ASSET_TELEMETRY_IDS_DOWNLOAD_FAILED = 3;
	ASSET_TELEMETRY_IDS_ASSET_RETRIEVED_FROM_CACHE = 4;
	ASSET_TELEMETRY_IDS_CACHE_THRASH = 5;
}

enum AvatarCustomizationTelemetryIds {
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_UNDEFINED_AVATAR_CUSTOMIZATION = 0;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_EQUIP_ITEM = 1;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_OPEN_FEATURES = 2;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_OPEN_STORE = 3;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_PURCHASE_ITEM = 4;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_PURCHASE_ERROR = 5;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_SELECT_ITEM_GROUP = 6;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_SELECT_SLOT = 7;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_SELECT_COLOR = 8;
	AVATAR_CUSTOMIZATION_TELEMETRY_IDS_SHOW_QUICK_SHOP = 9;
}

enum AvatarGender {
	AVATAR_GENDER_UNKNOWN = 0;
	AVATAR_GENDER_MALE = 1;
	AVATAR_GENDER_FEMALE = 2;
}

enum BattleHubSection {
	SECTION_UNSET = 0;
	SECTION_VS_SEEKER = 1;
	SECTION_CURR_SEASON = 2;
	SECTION_LAST_SEASON = 3;
	SECTION_NEARBY = 4;
	SECTION_TEAM_LEADERS = 5;
	SECTION_QR_CODE = 6;
}

enum BattleHubSubsection {
	SUBSECTION_UNSET = 0;
	SUBSECTION_VS_CHARGING = 1;
	SUBSECTION_VS_FREE = 2;
	SUBSECTION_VS_PREMIUM = 3;
	SUBSECTION_NEARBY_TEAM_LEADERS = 4;
	SUBSECTION_NEARBY_QR_CODE = 5;
}

enum BattlePartyTelemetryIds {
	BATTLE_PARTY_TELEMETRY_IDS_UNDEFINED_BATTLE_PARTY_EVENT = 0;
	BATTLE_PARTY_TELEMETRY_IDS_ADD = 1;
	BATTLE_PARTY_TELEMETRY_IDS_REMOVE = 2;
	BATTLE_PARTY_TELEMETRY_IDS_GYM_BATTLE = 3;
	BATTLE_PARTY_TELEMETRY_IDS_RAID_BATTLE = 4;
	BATTLE_PARTY_TELEMETRY_IDS_BATTLE_POKEMON_CHANGED = 5;
}

enum BuddyActivity {
	BUDDY_ACTIVITY_UNSET = 0;
	BUDDY_ACTIVITY_FEED = 1;
	BUDDY_ACTIVITY_PET = 2;
	BUDDY_ACTIVITY_SNAPSHOT = 3;
	BUDDY_ACTIVITY_WALK = 4;
	BUDDY_ACTIVITY_NEW_POIS = 5;
	BUDDY_ACTIVITY_GYM_BATTLE = 6;
	BUDDY_ACTIVITY_RAID_BATTLE = 7;
	BUDDY_ACTIVITY_NPC_BATTLE = 8;
	BUDDY_ACTIVITY_PVP_BATTLE = 9;
	BUDDY_ACTIVITY_OPEN_SOUVENIRS = 10;
	BUDDY_ACTIVITY_OPEN_CONSUMABLES = 11;
	BUDDY_ACTIVITY_INVASION_GRUNT = 12;
	BUDDY_ACTIVITY_INVASION_LEADER = 13;
	BUDDY_ACTIVITY_INVASION_GIOVANNI = 14;
	BUDDY_ACTIVITY_ATTRACTIVE_POI = 15;
	BUDDY_ACTIVITY_VISIT_POWERED_UP_FORT = 16;
}

enum BuddyActivityCategory {
	BUDDY_CATEGORY_UNSET = 0;
	BUDDY_CATEGORY_FEED = 1;
	BUDDY_CATEGORY_CARE = 2;
	BUDDY_CATEGORY_SNAPSHOT = 3;
	BUDDY_CATEGORY_WALK = 4;
	BUDDY_CATEGORY_BATTLE = 5;
	BUDDY_CATEGORY_EXPLORE = 6;
	BUDDY_CATEGORY_BONUS = 7;
}

enum BuddyAnimation {
	BUDDY_ANIMATION_UNSET = 0;
	BUDDY_ANIMATION_HAPPY = 1;
	BUDDY_ANIMATION_HATE = 2;
}

enum BuddyEmotionLevel {
	BUDDY_EMOTION_LEVEL_UNSET = 0;
	BUDDY_EMOTION_LEVEL_0 = 1;
	BUDDY_EMOTION_LEVEL_1 = 2;
	BUDDY_EMOTION_LEVEL_2 = 3;
	BUDDY_EMOTION_LEVEL_3 = 4;
	BUDDY_EMOTION_LEVEL_4 = 5;
	BUDDY_EMOTION_LEVEL_5 = 6;
	BUDDY_EMOTION_LEVEL_6 = 7;
}

enum BuddyLevel {
	BUDDY_LEVEL_UNSET = 0;
	BUDDY_LEVEL_0 = 1;
	BUDDY_LEVEL_1 = 2;
	BUDDY_LEVEL_2 = 3;
	BUDDY_LEVEL_3 = 4;
	BUDDY_LEVEL_4 = 5;
	BUDDY_LEVEL_5 = 6;
}

enum CameraInterpolation {
	CAM_INTERP_CUT = 0;
	CAM_INTERP_LINEAR = 1;
	CAM_INTERP_SMOOTH = 2;
	CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE = 3;
	CAM_INTERP_DEPENDS = 4;
}

enum CameraTarget {
	CAM_TARGET_ATTACKER = 0;
	CAM_TARGET_ATTACKER_EDGE = 1;
	CAM_TARGET_ATTACKER_GROUND = 2;
	CAM_TARGET_DEFENDER = 3;
	CAM_TARGET_DEFENDER_EDGE = 4;
	CAM_TARGET_DEFENDER_GROUND = 5;
	CAM_TARGET_ATTACKER_DEFENDER = 6;
	CAM_TARGET_ATTACKER_DEFENDER_EDGE = 7;
	CAM_TARGET_DEFENDER_ATTACKER = 8;
	CAM_TARGET_DEFENDER_ATTACKER_EDGE = 9;
	CAM_TARGET_ATTACKER_DEFENDER_MIRROR = 11;
	CAM_TARGET_SHOULDER_ATTACKER_DEFENDER = 12;
	CAM_TARGET_SHOULDER_ATTACKER_DEFENDER_MIRROR = 13;
	CAM_TARGET_ATTACKER_DEFENDER_WORLD = 14;
}

enum ClientAction {
	CLIENT_ACTION_UNKNOWN_CLIENT_ACTION = 0;
	CLIENT_ACTION_REGISTER_PUSH_NOTIFICATION = 5000;
	CLIENT_ACTION_UNREGISTER_PUSH_NOTIFICATION = 5001;
	CLIENT_ACTION_UPDATE_NOTIFICATION_STATUS = 5002;
	CLIENT_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY = 5003;
	CLIENT_ACTION_DOWNLOAD_GAME_MASTER_TEMPLATES = 5004;
	CLIENT_ACTION_GET_INVENTORY = 5005;
	CLIENT_ACTION_REDEEM_PASSCODE = 5006;
	CLIENT_ACTION_PING = 5007;
	CLIENT_ACTION_ADD_LOGIN_ACTION = 5008;
	CLIENT_ACTION_REMOVE_LOGIN_ACTION = 5009;
	CLIENT_ACTION_LIST_LOGIN_ACTION = 5010;
	CLIENT_ACTION_ADD_NEW_POI = 5011;
	CLIENT_ACTION_PROXY_SOCIAL_ACTION = 5012;
	CLIENT_ACTION_DEPRECATED_CLIENT_TELEMETRY = 5013;
	CLIENT_ACTION_GET_AVAILABLE_SUBMISSIONS = 5014;
	CLIENT_ACTION_GET_SIGNED_URL_FOR_PHOTO_UPLOAD = 5015;
	CLIENT_ACTION_REPLACE_LOGIN_ACTION = 5016;
	CLIENT_ACTION_PROXY_SOCIAL_SIDE_CHANNEL_ACTION = 5017;
	CLIENT_ACTION_COLLECT_CLIENT_TELEMETRY = 5018;
	CLIENT_ACTION_PURCHASE_SKU = 5019;
	CLIENT_ACTION_GET_AVAILABLE_SKUS_AND_BALANCES = 5020;
	CLIENT_ACTION_REDEEM_GOOGLE_RECEIPT = 5021;
	CLIENT_ACTION_REDEEM_APPLE_RECEIPT = 5022;
	CLIENT_ACTION_REDEEM_DESKTOP_RECEIPT = 5023;
	CLIENT_ACTION_UPDATE_FITNESS_METRICS = 5024;
	CLIENT_ACTION_GET_FITNESS_REPORT = 5025;
	CLIENT_ACTION_GET_CLIENT_TELEMETRY_SETTINGS = 5026;
	CLIENT_ACTION_PING_ASYNC = 5027;
	CLIENT_ACTION_REGISTER_BACKGROUND_SERVICE = 5028;
	CLIENT_ACTION_GET_CLIENT_BGMODE_SETTINGS = 5029;
	CLIENT_ACTION_PING_DOWNSTREAM = 5030;
	CLIENT_ACTION_SET_IN_GAME_CURRENCY_EXCHANGE_RATE = 5032;
	CLIENT_ACTION_REQUEST_GEOFENCE_UPDATES = 5033;
	CLIENT_ACTION_UPDATE_PLAYER_LOCATION = 5034;
	CLIENT_ACTION_GENERATE_GMAP_SIGNED_URL = 5035;
	CLIENT_ACTION_GET_GMAP_SETTINGS = 5036;
	CLIENT_ACTION_REDEEM_SAMSUNG_RECEIPT = 5037;
	CLIENT_ACTION_ADD_NEW_ROUTE = 5038;
	CLIENT_ACTION_GET_OUTSTANDING_WARNINGS = 5039;
	CLIENT_ACTION_ACKNOWLEDGE_WARNINGS = 5040;
	CLIENT_ACTION_SUBMIT_POI_IMAGE = 5041;
	CLIENT_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE = 5042;
	CLIENT_ACTION_SUBMIT_POI_LOCATION_UPDATE = 5043;
	CLIENT_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST = 5044;
	CLIENT_ACTION_GET_WEB_TOKEN_ACTION = 5045;
	CLIENT_ACTION_GET_ADVENTURE_SYNC_SETTINGS = 5046;
	CLIENT_ACTION_UPDATE_ADVENTURE_SYNC_SETTINGS = 5047;
	CLIENT_ACTION_SET_BIRTHDAY = 5048;
}

enum CombatHubEntranceTelemetryIds {
	COMBAT_HUB_ENTRANCE_TELEMETRY_IDS_UNDEFINED_EVENT = 0;
	COMBAT_HUB_ENTRANCE_TELEMETRY_IDS_CLICKED_COMBAT_HUB_BUTTON = 1;
}

enum CombatPlayerFinishState {
	COMBAT_PLAYER_FINISH_STATE_WINNER = 0;
	COMBAT_PLAYER_FINISH_STATE_LOSER = 1;
	COMBAT_PLAYER_FINISH_STATE_DRAW = 2;
}

enum CombatRefactorToggleProto {
	BASELINE = 0;
	FAST_MOVE_ALWAYS_LEAK = 1;
	MINIGAME_FAST_MOVE_CLEAR = 2;
	SWAP_FAST_MOVE_CLEAR = 3;
	DOWNSTREAM_REDUNDANCY = 4;
	DEFENSIVE_ACK_CHECK = 5;
	SERVER_FLY_IN_FLY_OUT = 6;
	CLIENT_REOBSERVER_COMBAT_STATE = 7;
	FAST_MOVE_FLY_IN_CLIP = 8;
	CLIENT_FAST_MOVE_FLY_IN_CLIP_FALL_BACK = 9;
	COMBAT_REWARDS_INVOKE = 10;
	CLIENT_SWAP_WIDGET_DISMISS = 11;
	CLIENT_COMBAT_NULL_RPC_GUARD = 12;
}

enum CombatRewardStatus {
	COMBAT_REWARD_STATUS_UNSET_REWARD_STATUS = 0;
	COMBAT_REWARD_STATUS_REWARDS_GRANTED = 1;
	COMBAT_REWARD_STATUS_MAX_REWARDS_RECEIVED = 2;
	COMBAT_REWARD_STATUS_PLAYER_BAG_FULL = 3;
	COMBAT_REWARD_STATUS_NO_REWARDS = 4;
}

enum CombatType {
	COMBAT_TYPE_UNSET = 0;
	COMBAT_TYPE_SOLO = 1;
	COMBAT_TYPE_QR_CODE = 2;
	COMBAT_TYPE_FRIENDS = 3;
	COMBAT_TYPE_NEARBY = 4;
	COMBAT_TYPE_SOLO_INVASION = 5;
	COMBAT_TYPE_VS_SEEKER = 6;
}

enum DeviceServiceTelemetryIds {
	DEVICE_SERVICE_TELEMETRY_IDS_UNDEFINED_DEVICE_SERVICE = 0;
	DEVICE_SERVICE_TELEMETRY_IDS_FITNESS = 1;
	DEVICE_SERVICE_TELEMETRY_IDS_SMART_WATCH = 2;
	DEVICE_SERVICE_TELEMETRY_IDS_SFIDA = 3;
	DEVICE_SERVICE_TELEMETRY_IDS_AWARENESS = 4;
	DEVICE_SERVICE_TELEMETRY_IDS_ADVENTURE_SYNC = 5;
	DEVICE_SERVICE_TELEMETRY_IDS_SENSOR = 6;
}

enum EggIncubatorType {
	INCUBATOR_UNSET = 0;
	INCUBATOR_DISTANCE = 1;
}

enum EggSlotType {
	EGG_SLOT_DEFAULT = 0;
	EGG_SLOT_SPECIAL = 1;
}

enum EncounterType {
	ENCOUNTER_TYPE_SPAWN_POINT = 0;
	ENCOUNTER_TYPE_INCENSE = 1;
	ENCOUNTER_TYPE_DISK = 2;
	ENCOUNTER_TYPE_POST_RAID = 3;
	ENCOUNTER_TYPE_STORY_QUEST = 4;
	ENCOUNTER_TYPE_QUEST_STAMP_CARD = 5;
	ENCOUNTER_TYPE_CHALLENGE_QUEST = 6;
	ENCOUNTER_TYPE_PHOTOBOMB = 7;
	ENCOUNTER_TYPE_INVASION = 8;
	ENCOUNTER_TYPE_VS_SEEKER_REWARD = 9;
	ENCOUNTER_TYPE_TIMED_STORY_QUEST = 10;
	ENCOUNTER_TYPE_DAILY_BONUS = 11;
	ENCOUNTER_TYPE_REFERRAL_QUEST = 12;
	ENCOUNTER_TYPE_TIMED_MINI_COLLECTION_QUEST = 13;
	ENCOUNTER_TYPE_POWER_UP_POKESTOP = 14;
}

enum FeatureKind {
	FEATURE_KIND_UNDEFINED = 0;
	FEATURE_KIND_BASIN = 1;
	FEATURE_KIND_CANAL = 2;
	FEATURE_KIND_CEMETERY = 3;
	FEATURE_KIND_CINEMA = 4;
	FEATURE_KIND_COLLEGE = 5;
	FEATURE_KIND_COMMERCIAL = 6;
	FEATURE_KIND_COMMON = 7;
	FEATURE_KIND_DAM = 8;
	FEATURE_KIND_DITCH = 9;
	FEATURE_KIND_DOCK = 10;
	FEATURE_KIND_DRAIN = 11;
	FEATURE_KIND_FARM = 12;
	FEATURE_KIND_FARMLAND = 13;
	FEATURE_KIND_FARMYARD = 14;
	FEATURE_KIND_FOOTWAY = 15;
	FEATURE_KIND_FOREST = 16;
	FEATURE_KIND_GARDEN = 17;
	FEATURE_KIND_GLACIER = 18;
	FEATURE_KIND_GOLF_COURSE = 19;
	FEATURE_KIND_GRASS = 20;
	FEATURE_KIND_HIGHWAY = 21;
	FEATURE_KIND_HOSPITAL = 22;
	FEATURE_KIND_HOTEL = 23;
	FEATURE_KIND_INDUSTRIAL = 24;
	FEATURE_KIND_LAKE = 25;
	FEATURE_KIND_LAND = 26;
	FEATURE_KIND_LIBRARY = 27;
	FEATURE_KIND_MAJOR_ROAD = 28;
	FEATURE_KIND_MEADOW = 29;
	FEATURE_KIND_MINOR_ROAD = 30;
	FEATURE_KIND_NATURE_RESERVE = 31;
	FEATURE_KIND_OCEAN = 32;
	FEATURE_KIND_PARK = 33;
	FEATURE_KIND_PARKING = 34;
	FEATURE_KIND_PATH = 35;
	FEATURE_KIND_PEDESTRIAN = 36;
	FEATURE_KIND_PITCH = 37;
	FEATURE_KIND_PLACE_OF_WORSHIP = 38;
	FEATURE_KIND_PLAYA = 39;
	FEATURE_KIND_PLAYGROUND = 40;
	FEATURE_KIND_QUARRY = 41;
	FEATURE_KIND_RAILWAY = 42;
	FEATURE_KIND_RECREATION_AREA = 43;
	FEATURE_KIND_RESERVOIR = 44;
	FEATURE_KIND_RESIDENTIAL = 45;
	FEATURE_KIND_RETAIL = 46;
	FEATURE_KIND_RIVER = 47;
	FEATURE_KIND_RIVERBANK = 48;
	FEATURE_KIND_RUNWAY = 49;
	FEATURE_KIND_SCHOOL = 50;
	FEATURE_KIND_SPORTS_CENTER = 51;
	FEATURE_KIND_STADIUM = 52;
	FEATURE_KIND_STREAM = 53;
	FEATURE_KIND_TAXIWAY = 54;
	FEATURE_KIND_THEATRE = 55;
	FEATURE_KIND_UNIVERSITY = 56;
	FEATURE_KIND_URBAN_AREA = 57;
	FEATURE_KIND_WATER = 58;
	FEATURE_KIND_WETLAND = 59;
	FEATURE_KIND_WOOD = 60;
	FEATURE_KIND_DEBUG_TILE_OUTLINE = 61;
	FEATURE_KIND_DEBUG_TILE_SURFACE = 62;
	FEATURE_KIND_OTHER = 63;
	FEATURE_KIND_COUNTRY = 64;
	FEATURE_KIND_REGION = 65;
	FEATURE_KIND_CITY = 66;
	FEATURE_KIND_TOWN = 67;
	FEATURE_KIND_AIRPORT = 68;
	FEATURE_KIND_BAY = 69;
	FEATURE_KIND_BOROUGH = 70;
	FEATURE_KIND_FJORD = 71;
	FEATURE_KIND_HAMLET = 72;
	FEATURE_KIND_MILITARY = 73;
	FEATURE_KIND_NATIONAL_PARK = 74;
	FEATURE_KIND_NEIGHBORHOOD = 75;
	FEATURE_KIND_PEAK = 76;
	FEATURE_KIND_PRISON = 77;
	FEATURE_KIND_PROTECTED_AREA = 78;
	FEATURE_KIND_REEF = 79;
	FEATURE_KIND_ROCK = 80;
	FEATURE_KIND_SAND = 81;
	FEATURE_KIND_SCRUB = 82;
	FEATURE_KIND_SEA = 83;
	FEATURE_KIND_STRAIT = 84;
	FEATURE_KIND_VALLEY = 85;
	FEATURE_KIND_VILLAGE = 86;
	FEATURE_KIND_LIGHT_RAIL = 87;
	FEATURE_KIND_PLATFORM = 88;
	FEATURE_KIND_STATION = 89;
	FEATURE_KIND_SUBWAY = 90;
	FEATURE_KIND_AGRICULTURAL = 91;
	FEATURE_KIND_EDUCATION = 92;
	FEATURE_KIND_GOVERNMENT = 93;
	FEATURE_KIND_HEALTHCARE = 94;
	FEATURE_KIND_LANDMARK = 95;
	FEATURE_KIND_RELIGIOUS = 96;
	FEATURE_KIND_SERVICES = 97;
	FEATURE_KIND_SPORTS = 98;
	FEATURE_KIND_TRANSPORTATION = 99;
	FEATURE_KIND_UNUSED = 100;
	FEATURE_KIND_ANY = 2000;
}

enum FortPowerUpLevel {
	FORT_POWER_UP_LEVEL_UNSET = 0;
	FORT_POWER_UP_LEVEL_0 = 1;
	FORT_POWER_UP_LEVEL_1 = 2;
	FORT_POWER_UP_LEVEL_2 = 3;
	FORT_POWER_UP_LEVEL_3 = 4;
}

enum FortPowerUpLevelReward {
	FORT_POWER_UP_LEVEL_REWARD_UNSET = 0;
	FORT_POWER_UP_LEVEL_REWARD_BUDDY_BONUS_HEART = 1;
	FORT_POWER_UP_REWARD_BONUS_ITEM_ON_SPIN = 2;
	FORT_POWER_UP_REWARD_BONUS_SPAWN = 3;
	FORT_POWER_UP_REWARD_BONUS_RAID_POKEBALLS = 4;
}

enum FortType {
	GYM = 0;
	CHECKPOINT = 1;
}

enum FriendshipLevelMilestone {
	FRIENDSHIP_LEVEL_UNSET = 0;
	FRIENDSHIP_LEVEL_0 = 1;
	FRIENDSHIP_LEVEL_1 = 2;
	FRIENDSHIP_LEVEL_2 = 3;
	FRIENDSHIP_LEVEL_3 = 4;
	FRIENDSHIP_LEVEL_4 = 5;
}

enum GameAdventureSyncAction {
	UNKNOWN_GAME_LOCATION_AWARENESS_ACTION = 0;
	REQUEST_GEOFENCE_UPDATES_1 = 360000;
	UPDATE_PLAYER_LOCATION_1 = 360001;
	UPDATE_BREADCRUMB_HISTORY = 361000;
	REFRESH_PROXIMITY_TOKENS = 362000;
	REPORT_PROXIMITY_CONTACTS = 362001;
}

enum GameFitnessAction {
	UNKNOWN_GAME_FITNESS_ACTION = 0;
	UPDATE_FITNESS_METRICS_1 = 640000;
	GET_FITNESS_REPORT_1 = 640001;
	GET_ADVENTURE_SYNC_SETTINGS_1 = 640002;
	UPDATE_ADVENTURE_SYNC_SETTINGS_1 = 640003;
	UPDATE_ADVENTURE_SYNC_FITNESS = 640004 [deprecated = true];
	GET_ADVENTURE_SYNC_FITNESS_REPORT = 640005 [deprecated = true];
}

enum GenericClickTelemetryIds {
	GENERIC_CLICK_TELEMETRY_IDS_UNDEFINED_GENERIC_EVENT = 0;
	GENERIC_CLICK_TELEMETRY_IDS_SPEED_WARNING_SHOW = 1;
	GENERIC_CLICK_TELEMETRY_IDS_SPEED_WARNING_PASSENGER = 2;
	GENERIC_CLICK_TELEMETRY_IDS_CACHE_RESET_CLICKED = 3;
	GENERIC_CLICK_TELEMETRY_IDS_REFUND_PAGE_OPENED = 4;
}

enum GymBadgeType {
	GYM_BADGE_UNSET = 0;
	GYM_BADGE_VANILLA = 1;
	GYM_BADGE_BRONZE = 2;
	GYM_BADGE_SILVER = 3;
	GYM_BADGE_GOLD = 4;
}

enum HoloActivityType {
	ACTIVITY_UNKNOWN = 0;
	ACTIVITY_CATCH_POKEMON = 1;
	ACTIVITY_CATCH_LEGEND_POKEMON = 2;
	ACTIVITY_FLEE_POKEMON = 3;
	ACTIVITY_DEFEAT_FORT = 4;
	ACTIVITY_EVOLVE_POKEMON = 5;
	ACTIVITY_HATCH_EGG = 6;
	ACTIVITY_WALK_KM = 7;
	ACTIVITY_POKEDEX_ENTRY_NEW = 8;
	ACTIVITY_CATCH_FIRST_THROW = 9;
	ACTIVITY_CATCH_NICE_THROW = 10;
	ACTIVITY_CATCH_GREAT_THROW = 11;
	ACTIVITY_CATCH_EXCELLENT_THROW = 12;
	ACTIVITY_CATCH_CURVEBALL = 13;
	ACTIVITY_CATCH_FIRST_CATCH_OF_DAY = 14;
	ACTIVITY_CATCH_MILESTONE = 15;
	ACTIVITY_TRAIN_POKEMON = 16;
	ACTIVITY_SEARCH_FORT = 17;
	ACTIVITY_RELEASE_POKEMON = 18;
	ACTIVITY_HATCH_EGG_SMALL_BONUS = 19;
	ACTIVITY_HATCH_EGG_MEDIUM_BONUS = 20;
	ACTIVITY_HATCH_EGG_LARGE_BONUS = 21;
	ACTIVITY_DEFEAT_GYM_DEFENDER = 22;
	ACTIVITY_DEFEAT_GYM_LEADER = 23;
	ACTIVITY_CATCH_FIRST_CATCH_STREAK_BONUS = 24;
	ACTIVITY_SEARCH_FORT_FIRST_OF_THE_DAY = 25;
	ACTIVITY_SEARCH_FORT_STREAK_BONUS = 26;
	ACTIVITY_DEFEAT_RAID_POKEMON = 27;
	ACTIVITY_FEED_BERRY = 28;
	ACTIVITY_SEARCH_GYM = 29;
	ACTIVITY_NEW_POKESTOP = 30;
	ACTIVITY_GYM_BATTLE_LOSS = 31;
	ACTIVITY_CATCH_AR_PLUS_BONUS = 32;
	ACTIVITY_CATCH_QUEST_POKEMON_ENCOUNTER = 33;
	ACTIVITY_FRIENDSHIP_LEVEL_UP_0 = 35;
	ACTIVITY_FRIENDSHIP_LEVEL_UP_1 = 36;
	ACTIVITY_FRIENDSHIP_LEVEL_UP_2 = 37;
	ACTIVITY_FRIENDSHIP_LEVEL_UP_3 = 38;
	ACTIVITY_FRIENDSHIP_LEVEL_UP_4 = 39;
	ACTIVITY_SEND_GIFT = 40;
	ACTIVITY_SHARE_EX_RAID_PASS = 41;
	ACTIVITY_RAID_LEVEL_1_ADDITIONAL_XP = 42;
	ACTIVITY_RAID_LEVEL_2_ADDITIONAL_XP = 43;
	ACTIVITY_RAID_LEVEL_3_ADDITIONAL_XP = 44;
	ACTIVITY_RAID_LEVEL_4_ADDITIONAL_XP = 45;
	ACTIVITY_RAID_LEVEL_5_ADDITIONAL_XP = 46;
	ACTIVITY_HATCH_EGG_SHADOW = 47;
	ACTIVITY_HATCH_EGG_GIFT = 48;
	ACTIVITY_REMOTE_DEFEAT_RAID_POKEMON = 49;
	ACTIVITY_REMOTE_RAID_LEVEL_1_ADDITIONAL_XP = 50;
	ACTIVITY_REMOTE_RAID_LEVEL_2_ADDITIONAL_XP = 51;
	ACTIVITY_REMOTE_RAID_LEVEL_3_ADDITIONAL_XP = 52;
	ACTIVITY_REMOTE_RAID_LEVEL_4_ADDITIONAL_XP = 53;
	ACTIVITY_REMOTE_RAID_LEVEL_5_ADDITIONAL_XP = 54;
	ACTIVITY_CHANGE_POKEMON_FORM = 55;
	ACTIVITY_EARN_BUDDY_WALKED_CANDY = 56;
}

enum HoloBadgeType {
	BADGE_UNSET = 0;
	BADGE_TRAVEL_KM = 1;
	BADGE_POKEDEX_ENTRIES = 2;
	BADGE_CAPTURE_TOTAL = 3;
	BADGE_DEFEATED_FORT = 4;
	BADGE_EVOLVED_TOTAL = 5;
	BADGE_HATCHED_TOTAL = 6;
	BADGE_ENCOUNTERED_TOTAL = 7;
	BADGE_POKESTOPS_VISITED = 8;
	BADGE_UNIQUE_POKESTOPS = 9;
	BADGE_POKEBALL_THROWN = 10;
	BADGE_BIG_MAGIKARP = 11;
	BADGE_DEPLOYED_TOTAL = 12;
	BADGE_BATTLE_ATTACK_WON = 13;
	BADGE_BATTLE_TRAINING_WON = 14;
	BADGE_BATTLE_DEFEND_WON = 15;
	BADGE_PRESTIGE_RAISED = 16;
	BADGE_PRESTIGE_DROPPED = 17;
	BADGE_TYPE_NORMAL = 18;
	BADGE_TYPE_FIGHTING = 19;
	BADGE_TYPE_FLYING = 20;
	BADGE_TYPE_POISON = 21;
	BADGE_TYPE_GROUND = 22;
	BADGE_TYPE_ROCK = 23;
	BADGE_TYPE_BUG = 24;
	BADGE_TYPE_GHOST = 25;
	BADGE_TYPE_STEEL = 26;
	BADGE_TYPE_FIRE = 27;
	BADGE_TYPE_WATER = 28;
	BADGE_TYPE_GRASS = 29;
	BADGE_TYPE_ELECTRIC = 30;
	BADGE_TYPE_PSYCHIC = 31;
	BADGE_TYPE_ICE = 32;
	BADGE_TYPE_DRAGON = 33;
	BADGE_TYPE_DARK = 34;
	BADGE_TYPE_FAIRY = 35;
	BADGE_SMALL_RATTATA = 36;
	BADGE_PIKACHU = 37;
	BADGE_UNOWN = 38;
	BADGE_POKEDEX_ENTRIES_GEN2 = 39;
	BADGE_RAID_BATTLE_WON = 40;
	BADGE_LEGENDARY_BATTLE_WON = 41;
	BADGE_BERRIES_FED = 42;
	BADGE_HOURS_DEFENDED = 43;
	BADGE_PLACE_HOLDER = 44;
	BADGE_POKEDEX_ENTRIES_GEN3 = 45;
	BADGE_CHALLENGE_QUESTS = 46;
	BADGE_MEW_ENCOUNTER = 47;
	BADGE_MAX_LEVEL_FRIENDS = 48;
	BADGE_TRADING = 49;
	BADGE_TRADING_DISTANCE = 50;
	BADGE_POKEDEX_ENTRIES_GEN4 = 51;
	BADGE_GREAT_LEAGUE = 52;
	BADGE_ULTRA_LEAGUE = 53;
	BADGE_MASTER_LEAGUE = 54;
	BADGE_PHOTOBOMB = 55;
	BADGE_POKEDEX_ENTRIES_GEN5 = 56;
	BADGE_POKEMON_PURIFIED = 57;
	BADGE_ROCKET_GRUNTS_DEFEATED = 58;
	BADGE_ROCKET_GIOVANNI_DEFEATED = 59;
	BADGE_BUDDY_BEST = 60;
	BADGE_POKEDEX_ENTRIES_GEN6 = 61;
	BADGE_POKEDEX_ENTRIES_GEN7 = 62;
	BADGE_POKEDEX_ENTRIES_GEN8 = 63;
	BADGE_7_DAY_STREAKS = 64;
	BADGE_UNIQUE_RAID_BOSSES_DEFEATED = 65;
	BADGE_RAIDS_WITH_FRIENDS = 66;
	BADGE_POKEMON_CAUGHT_AT_YOUR_LURES = 67;
	BADGE_WAYFARER = 68;
	BADGE_TOTAL_MEGA_EVOS = 69;
	BADGE_UNIQUE_MEGA_EVOS = 70;
	DEPRECATED_0 = 71;
	BADGE_ROUTE_ACCEPTED = 72;
	BADGE_TRAINERS_REFERRED = 73;
	BADGE_POKESTOPS_SCANNED = 74;
	BADGE_RAID_BATTLE_STAT = 76;
	BADGE_TOTAL_ROUTE_PLAY = 77;
	BADGE_UNIQUE_ROUTE_PLAY = 78;
	BADGE_POKEDEX_ENTRIES_GEN8A = 79;
	BADGE_DYNAMIC_MIN = 1000;
	BADGE_MINI_COLLECTION = 1002;
	BADGE_EVENT_MIN = 2000;
	BADGE_CHICAGO_FEST_JULY_2017 = 2001;
	BADGE_PIKACHU_OUTBREAK_YOKOHAMA_2017 = 2002;
	BADGE_SAFARI_ZONE_EUROPE_2017 = 2003;
	BADGE_SAFARI_ZONE_EUROPE_2017_10_07 = 2004;
	BADGE_SAFARI_ZONE_EUROPE_2017_10_14 = 2005;
	BADGE_CHICAGO_FEST_JULY_2018_SAT_NORTH = 2006;
	BADGE_CHICAGO_FEST_JULY_2018_SAT_SOUTH = 2007;
	BADGE_CHICAGO_FEST_JULY_2018_SUN_NORTH = 2008;
	BADGE_CHICAGO_FEST_JULY_2018_SUN_SOUTH = 2009;
	BADGE_APAC_PARTNER_JULY_2018_0 = 2010;
	BADGE_APAC_PARTNER_JULY_2018_1 = 2011;
	BADGE_APAC_PARTNER_JULY_2018_2 = 2012;
	BADGE_APAC_PARTNER_JULY_2018_3 = 2013;
	BADGE_APAC_PARTNER_JULY_2018_4 = 2014;
	BADGE_APAC_PARTNER_JULY_2018_5 = 2015;
	BADGE_APAC_PARTNER_JULY_2018_6 = 2016;
	BADGE_APAC_PARTNER_JULY_2018_7 = 2017;
	BADGE_APAC_PARTNER_JULY_2018_8 = 2018;
	BADGE_APAC_PARTNER_JULY_2018_9 = 2019;
	BADGE_YOKOSUKA_29_AUG_2018_MIKASA = 2020;
	BADGE_YOKOSUKA_29_AUG_2018_VERNY = 2021;
	BADGE_YOKOSUKA_29_AUG_2018_KURIHAMA = 2022;
	BADGE_YOKOSUKA_30_AUG_2018_MIKASA = 2023;
	BADGE_YOKOSUKA_30_AUG_2018_VERNY = 2024;
	BADGE_YOKOSUKA_30_AUG_2018_KURIHAMA = 2025;
	BADGE_YOKOSUKA_31_AUG_2018_MIKASA = 2026;
	BADGE_YOKOSUKA_31_AUG_2018_VERNY = 2027;
	BADGE_YOKOSUKA_31_AUG_2018_KURIHAMA = 2028;
	BADGE_YOKOSUKA_1_SEP_2018_MIKASA = 2029;
	BADGE_YOKOSUKA_1_SEP_2018_VERNY = 2030;
	BADGE_YOKOSUKA_1_SEP_2018_KURIHAMA = 2031;
	BADGE_YOKOSUKA_2_SEP_2018_MIKASA = 2032;
	BADGE_YOKOSUKA_2_SEP_2018_VERNY = 2033;
	BADGE_YOKOSUKA_2_SEP_2018_KURIHAMA = 2034;
	BADGE_TOP_BANANA_1 = 2035;
	BADGE_TOP_BANANA_2 = 2036;
	BADGE_TOP_BANANA_3 = 2037;
	BADGE_PARTNER_EVENT_2019_0 = 2038;
	BADGE_PARTNER_EVENT_2019_1 = 2039;
	BADGE_PARTNER_EVENT_2019_2 = 2040;
	BADGE_PARTNER_EVENT_2019_3 = 2041;
	BADGE_PARTNER_EVENT_2019_4 = 2042;
	BADGE_PARTNER_EVENT_2019_5 = 2043;
	BADGE_PARTNER_EVENT_2019_6 = 2044;
	BADGE_PARTNER_EVENT_2019_7 = 2045;
	BADGE_PARTNER_EVENT_2019_8 = 2046;
	BADGE_PARTNER_EVENT_2019_9 = 2047;
	BADGE_SENTOSA_18_APR_2019 = 2048;
	BADGE_SENTOSA_19_APR_2019 = 2049;
	BADGE_SENTOSA_20_APR_2019 = 2050;
	BADGE_SENTOSA_21_APR_2019 = 2051;
	BADGE_SENTOSA_22_APR_2019 = 2052;
	BADGE_CITY_EXPLORER_PASS_00 = 2053;
	BADGE_CITY_EXPLORER_PASS_01 = 2054;
	BADGE_CITY_EXPLORER_PASS_02 = 2055;
	BADGE_CITY_EXPLORER_PASS_03 = 2056;
	BADGE_CITY_EXPLORER_PASS_04 = 2057;
	BADGE_CITY_EXPLORER_PASS_05 = 2058;
	BADGE_CITY_EXPLORER_PASS_06 = 2059;
	BADGE_CITY_EXPLORER_PASS_07 = 2060;
	BADGE_CITY_EXPLORER_PASS_08 = 2061;
	BADGE_CITY_EXPLORER_PASS_09 = 2062;
	BADGE_CITY_EXPLORER_PASS_10 = 2063;
	BADGE_CITY_EXPLORER_PASS_11 = 2064;
	BADGE_CITY_EXPLORER_PASS_12 = 2065;
	BADGE_CITY_EXPLORER_PASS_13 = 2066;
	BADGE_CITY_EXPLORER_PASS_14 = 2067;
	BADGE_CITY_EXPLORER_PASS_15 = 2068;
	BADGE_CITY_EXPLORER_PASS_16 = 2069;
	BADGE_CITY_EXPLORER_PASS_17 = 2070;
	BADGE_CITY_EXPLORER_PASS_18 = 2071;
	BADGE_CITY_EXPLORER_PASS_19 = 2072;
	BADGE_CITY_EXPLORER_PASS_20 = 2073;
	BADGE_CITY_EXPLORER_PASS_21 = 2074;
	BADGE_CITY_EXPLORER_PASS_22 = 2075;
	BADGE_CITY_EXPLORER_PASS_23 = 2076;
	BADGE_CITY_EXPLORER_PASS_24 = 2077;
	BADGE_CITY_EXPLORER_PASS_25 = 2078;
	BADGE_CITY_EXPLORER_PASS_26 = 2079;
	BADGE_CITY_EXPLORER_PASS_27 = 2080;
	BADGE_CITY_EXPLORER_PASS_28 = 2081;
	BADGE_CITY_EXPLORER_PASS_29 = 2082;
	BADGE_CITY_EXPLORER_PASS_30 = 2083;
	BADGE_CITY_EXPLORER_PASS_31 = 2084;
	BADGE_CITY_EXPLORER_PASS_32 = 2085;
	BADGE_CITY_EXPLORER_PASS_33 = 2086;
	BADGE_CITY_EXPLORER_PASS_34 = 2087;
	BADGE_CITY_EXPLORER_PASS_35 = 2088;
	BADGE_CITY_EXPLORER_PASS_36 = 2089;
	BADGE_CITY_EXPLORER_PASS_37 = 2090;
	BADGE_CITY_EXPLORER_PASS_38 = 2091;
	BADGE_CITY_EXPLORER_PASS_39 = 2092;
	BADGE_CITY_EXPLORER_PASS_40 = 2093;
	BADGE_AIR_ADVENTURES_OKINAWA_00 = 2094;
	BADGE_AIR_ADVENTURES_OKINAWA_RELEASE = 2095;
	BADGE_DYNAMIC_EVENT_MIN = 5000;
	BADGE_GOFEST_2019_AMERICAS_DAY_00_NORTH_GENERAL = 5001;
	BADGE_GOFEST_2019_AMERICAS_DAY_00_NORTH_EARLYACCESS = 5002;
	BADGE_GOFEST_2019_AMERICAS_DAY_00_SOUTH_GENERAL = 5003;
	BADGE_GOFEST_2019_AMERICAS_DAY_00_SOUTH_EARLYACCESS = 5004;
	BADGE_GOFEST_2019_AMERICAS_DAY_01_NORTH_GENERAL = 5005;
	BADGE_GOFEST_2019_AMERICAS_DAY_01_NORTH_EARLYACCESS = 5006;
	BADGE_GOFEST_2019_AMERICAS_DAY_01_SOUTH_GENERAL = 5007;
	BADGE_GOFEST_2019_AMERICAS_DAY_01_SOUTH_EARLYACCESS = 5008;
	BADGE_GOFEST_2019_AMERICAS_DAY_02_NORTH_GENERAL = 5009;
	BADGE_GOFEST_2019_AMERICAS_DAY_02_NORTH_EARLYACCESS = 5010;
	BADGE_GOFEST_2019_AMERICAS_DAY_02_SOUTH_GENERAL = 5011;
	BADGE_GOFEST_2019_AMERICAS_DAY_02_SOUTH_EARLYACCESS = 5012;
	BADGE_GOFEST_2019_AMERICAS_DAY_03_NORTH_GENERAL = 5013;
	BADGE_GOFEST_2019_AMERICAS_DAY_03_NORTH_EARLYACCESS = 5014;
	BADGE_GOFEST_2019_AMERICAS_DAY_03_SOUTH_GENERAL = 5015;
	BADGE_GOFEST_2019_AMERICAS_DAY_03_SOUTH_EARLYACCESS = 5016;
	BADGE_GOFEST_2019_AMERICAS_DAY_04_NORTH_GENERAL = 5017;
	BADGE_GOFEST_2019_AMERICAS_DAY_04_NORTH_EARLYACCESS = 5018;
	BADGE_GOFEST_2019_AMERICAS_DAY_04_SOUTH_GENERAL = 5019;
	BADGE_GOFEST_2019_AMERICAS_DAY_04_SOUTH_EARLYACCESS = 5020;
	BADGE_GOFEST_2019_EMEA_DAY_00_GENERAL = 5021;
	BADGE_GOFEST_2019_EMEA_DAY_00_EARLYACCESS = 5022;
	BADGE_GOFEST_2019_EMEA_DAY_01_GENERAL = 5023;
	BADGE_GOFEST_2019_EMEA_DAY_01_EARLYACCESS = 5024;
	BADGE_GOFEST_2019_EMEA_DAY_02_GENERAL = 5025;
	BADGE_GOFEST_2019_EMEA_DAY_02_EARLYACCESS = 5026;
	BADGE_GOFEST_2019_EMEA_DAY_03_GENERAL = 5027;
	BADGE_GOFEST_2019_EMEA_DAY_03_EARLYACCESS = 5028;
	BADGE_GOFEST_2019_EMEA_DAY_04_GENERAL = 5029;
	BADGE_GOFEST_2019_EMEA_DAY_04_EARLYACCESS = 5030;
	BADGE_GOFEST_2019_APAC_DAY_00_GENERAL = 5031;
	BADGE_GOFEST_2019_APAC_DAY_01_GENERAL = 5032;
	BADGE_GOFEST_2019_APAC_DAY_02_GENERAL = 5033;
	BADGE_GOFEST_2019_APAC_DAY_03_GENERAL = 5034;
	BADGE_GOFEST_2019_APAC_DAY_04_GENERAL = 5035;
	BADGE_GOFEST_2019_APAC_DAY_05_GENERAL = 5036;
	BADGE_GOFEST_2019_APAC_DAY_06_GENERAL = 5037;
	BADGE_GOFEST_2019_APAC_DAY_07_GENERAL = 5038;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_00_GENERAL = 5039;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_00_EARLYACCESS = 5040;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_01_GENERAL = 5041;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_01_EARLYACCESS = 5042;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_02_GENERAL = 5043;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_02_EARLYACCESS = 5044;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_03_GENERAL = 5045;
	BADGE_SAFARIZONE_2019_MONTREAL_DAY_03_EARLYACCESS = 5046;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_00_GENERAL = 5047;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_00_EARLYACCESS = 5048;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_01_GENERAL = 5049;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_01_EARLYACCESS = 5050;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_02_GENERAL = 5051;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_02_EARLYACCESS = 5052;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_03_GENERAL = 5053;
	BADGE_SAFARIZONE_2020_STLOUIS_DAY_03_EARLYACCESS = 5054;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_00_GENERAL = 5055;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_00_EARLYACCESS = 5056;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_01_GENERAL = 5057;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_01_EARLYACCESS = 5058;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_02_GENERAL = 5059;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_02_EARLYACCESS = 5060;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_03_GENERAL = 5061;
	BADGE_SAFARIZONE_2020_LIVERPOOL_DAY_03_EARLYACCESS = 5062;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_00_GENERAL = 5063;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_00_EARLYACCESS = 5064;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_01_GENERAL = 5065;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_01_EARLYACCESS = 5066;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_02_GENERAL = 5067;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_02_EARLYACCESS = 5068;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_03_GENERAL = 5069;
	BADGE_SAFARIZONE_2020_PHILADELPHIA_DAY_03_EARLYACCESS = 5070;
	BADGE_GOFEST_2020_TEST = 5071;
	BADGE_GOFEST_2020_GLOBAL = 5072;
	BADGE_GOTOUR_2021_GREEN_TEST = 5073;
	BADGE_GOTOUR_2021_RED_TEST = 5074;
	BADGE_GOTOUR_2021_GREEN_GLOBAL = 5075;
	BADGE_GOTOUR_2021_RED_GLOBAL = 5076;
	BADGE_GLOBAL_TICKETED_EVENT = 5100;
	BADGE_EVENT_0001 = 5201;
	BADGE_EVENT_0002 = 5202;
	BADGE_EVENT_0003 = 5203;
	BADGE_EVENT_0004 = 5204;
	BADGE_EVENT_0005 = 5205;
	BADGE_EVENT_0006 = 5206;
	BADGE_EVENT_0007 = 5207;
	BADGE_EVENT_0008 = 5208;
	BADGE_EVENT_0009 = 5209;
	BADGE_EVENT_0010 = 5210;
	BADGE_EVENT_0011 = 5211;
	BADGE_EVENT_0012 = 5212;
	BADGE_EVENT_0013 = 5213;
	BADGE_EVENT_0014 = 5214;
	BADGE_EVENT_0015 = 5215;
	BADGE_EVENT_0016 = 5216;
	BADGE_EVENT_0017 = 5217;
	BADGE_EVENT_0018 = 5218;
	BADGE_EVENT_0019 = 5219;
	BADGE_EVENT_0020 = 5220;
	BADGE_EVENT_0021 = 5221;
	BADGE_EVENT_0022 = 5222;
	BADGE_EVENT_0023 = 5223;
	BADGE_EVENT_0024 = 5224;
	BADGE_EVENT_0025 = 5225;
	BADGE_EVENT_0026 = 5226;
	BADGE_EVENT_0027 = 5227;
	BADGE_EVENT_0028 = 5228;
	BADGE_EVENT_0029 = 5229;
	BADGE_EVENT_0030 = 5230;
	BADGE_LEVEL_40 = 5231;
	BADGE_GOFEST_2021_TEST = 5232;
	BADGE_GOFEST_2021_GLOBAL = 5233;
	BADGE_TRADING_CARD_0001 = 5234;
	BADGE_TRADING_CARD_0002 = 5235;
	BADGE_TRADING_CARD_0003 = 5236;
	BADGE_TRADING_CARD_0004 = 5237;
	BADGE_TRADING_CARD_0005 = 5238;
	BADGE_TRADING_CARD_0006 = 5239;
	BADGE_TRADING_CARD_0007 = 5240;
	BADGE_TRADING_CARD_0008 = 5241;
	BADGE_TRADING_CARD_0009 = 5242;
	BADGE_TRADING_CARD_0010 = 5243;
	BADGE_GOFEST_2022_TEST = 5244;
	BADGE_GOFEST_2022_GLOBAL = 5245;
	BADGE_GOTOUR_2022_GOLD_TEST = 5246;
	BADGE_GOTOUR_2022_SILVER_TEST = 5247;
	BADGE_GOTOUR_2022_GOLD_GLOBAL = 5248;
	BADGE_GOTOUR_2022_SILVER_GLOBAL = 5249;
	BADGE_GOTOUR_2022_LIVE_A_TEST = 5250;
	BADGE_GOTOUR_2022_LIVE_A_GLOBAL = 5251;
	BADGE_GOTOUR_2022_LIVE_B_TEST = 5252;
	BADGE_GOTOUR_2022_LIVE_B_GLOBAL = 5253;
	BADGE_EVENT_0031 = 5254;
	BADGE_EVENT_0032 = 5255;
	BADGE_EVENT_0033 = 5256;
	BADGE_EVENT_0034 = 5257;
	BADGE_EVENT_0035 = 5258;
	BADGE_EVENT_0036 = 5259;
	BADGE_EVENT_0037 = 5260;
	BADGE_EVENT_0038 = 5261;
	BADGE_EVENT_0039 = 5262;
	BADGE_EVENT_0040 = 5263;
	BADGE_EVENT_0041 = 5264;
	BADGE_EVENT_0042 = 5265;
	BADGE_EVENT_0043 = 5266;
	BADGE_EVENT_0044 = 5267;
	BADGE_EVENT_0045 = 5268;
	BADGE_EVENT_0046 = 5269;
	BADGE_EVENT_0047 = 5270;
	BADGE_EVENT_0048 = 5271;
	BADGE_EVENT_0049 = 5272;
	BADGE_EVENT_0050 = 5273;
	BADGE_EVENT_0051 = 5274;
	BADGE_EVENT_0052 = 5275;
	BADGE_EVENT_0053 = 5276;
	BADGE_EVENT_0054 = 5277;
	BADGE_EVENT_0055 = 5278;
	BADGE_EVENT_0056 = 5279;
	BADGE_EVENT_0057 = 5280;
	BADGE_EVENT_0058 = 5281;
	BADGE_EVENT_0059 = 5282;
	BADGE_EVENT_0060 = 5283;
	BADGE_EVENT_0061 = 5284;
	BADGE_EVENT_0062 = 5285;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_00_GENERAL = 5286;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_00_EARLYACCESS = 5287;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_01_GENERAL = 5288;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_01_EARLYACCESS = 5289;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_02_GENERAL = 5290;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_02_EARLYACCESS = 5291;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_03_GENERAL = 5292;
	BADGE_SAFARIZONE_2022_SEVILLE_DAY_03_EARLYACCESS = 5293;
	DEPRECATED_1 = 5300;
	DEPRECATED_2 = 5301;
	BADGE_GOFEST_2022_BERLIN_TEST_GENERAL = 5302;
	BADGE_GOFEST_2022_BERLIN_TEST_EARLYACCESS = 5303;
	BADGE_GOFEST_2022_BERLIN_DAY_01_GENERAL = 5304;
	BADGE_GOFEST_2022_BERLIN_DAY_01_EARLYACCESS = 5305;
	BADGE_GOFEST_2022_BERLIN_DAY_02_GENERAL = 5306;
	BADGE_GOFEST_2022_BERLIN_DAY_02_EARLYACCESS = 5307;
	BADGE_GOFEST_2022_BERLIN_DAY_03_GENERAL = 5308;
	BADGE_GOFEST_2022_BERLIN_DAY_03_EARLYACCESS = 5309;
	BADGE_GOFEST_2022_SEATTLE_TEST_PARK_MORNING = 5310;
	BADGE_GOFEST_2022_SEATTLE_TEST_PARK_AFTERNOON = 5311;
	BADGE_GOFEST_2022_SEATTLE_TEST_CITY_MORNING = 5312;
	BADGE_GOFEST_2022_SEATTLE_TEST_CITY_AFTERNOON = 5313;
	BADGE_GOFEST_2022_SEATTLE_DAY_01_PARK_MORNING = 5314;
	BADGE_GOFEST_2022_SEATTLE_DAY_01_PARK_AFTERNOON = 5315;
	BADGE_GOFEST_2022_SEATTLE_DAY_01_CITY_MORNING = 5316;
	BADGE_GOFEST_2022_SEATTLE_DAY_01_CITY_AFTERNOON = 5317;
	BADGE_GOFEST_2022_SEATTLE_DAY_02_PARK_MORNING = 5318;
	BADGE_GOFEST_2022_SEATTLE_DAY_02_PARK_AFTERNOON = 5319;
	BADGE_GOFEST_2022_SEATTLE_DAY_02_CITY_MORNING = 5320;
	BADGE_GOFEST_2022_SEATTLE_DAY_02_CITY_AFTERNOON = 5321;
	BADGE_GOFEST_2022_SEATTLE_DAY_03_PARK_MORNING = 5322;
	BADGE_GOFEST_2022_SEATTLE_DAY_03_PARK_AFTERNOON = 5323;
	BADGE_GOFEST_2022_SEATTLE_DAY_03_CITY_MORNING = 5324;
	BADGE_GOFEST_2022_SEATTLE_DAY_03_CITY_AFTERNOON = 5325;
	BADGE_GOFEST_2022_SAPPORO_TEST_PARK_MORNING = 5326;
	BADGE_GOFEST_2022_SAPPORO_TEST_PARK_AFTERNOON = 5327;
	BADGE_GOFEST_2022_SAPPORO_TEST_CITY_MORNING = 5328;
	BADGE_GOFEST_2022_SAPPORO_TEST_CITY_AFTERNOON = 5329;
	BADGE_GOFEST_2022_SAPPORO_DAY_01_PARK_MORNING = 5330;
	BADGE_GOFEST_2022_SAPPORO_DAY_01_PARK_AFTERNOON = 5331;
	BADGE_GOFEST_2022_SAPPORO_DAY_01_CITY_MORNING = 5332;
	BADGE_GOFEST_2022_SAPPORO_DAY_01_CITY_AFTERNOON = 5333;
	BADGE_GOFEST_2022_SAPPORO_DAY_02_PARK_MORNING = 5334;
	BADGE_GOFEST_2022_SAPPORO_DAY_02_PARK_AFTERNOON = 5335;
	BADGE_GOFEST_2022_SAPPORO_DAY_02_CITY_MORNING = 5336;
	BADGE_GOFEST_2022_SAPPORO_DAY_02_CITY_AFTERNOON = 5337;
	BADGE_GOFEST_2022_SAPPORO_DAY_03_PARK_MORNING = 5338;
	BADGE_GOFEST_2022_SAPPORO_DAY_03_PARK_AFTERNOON = 5339;
	BADGE_GOFEST_2022_SAPPORO_DAY_03_CITY_MORNING = 5340;
	BADGE_GOFEST_2022_SAPPORO_DAY_03_CITY_AFTERNOON = 5341;
	BADGE_GOFEST_2022_BERLIN_ADDON_HATCH_TEST = 5342;
	BADGE_GOFEST_2022_BERLIN_ADDON_HATCH = 5343;
	BADGE_GOFEST_2022_BERLIN_ADDON_RAID_TEST = 5344;
	BADGE_GOFEST_2022_BERLIN_ADDON_RAID = 5345;
	BADGE_GOFEST_2022_SEATTLE_ADDON_HATCH_TEST = 5346;
	BADGE_GOFEST_2022_SEATTLE_ADDON_HATCH = 5347;
	BADGE_GOFEST_2022_SEATTLE_ADDON_RAID_TEST = 5348;
	BADGE_GOFEST_2022_SEATTLE_ADDON_RAID = 5349;
	BADGE_GOFEST_2022_SAPPORO_ADDON_HATCH_TEST = 5350;
	BADGE_GOFEST_2022_SAPPORO_ADDON_HATCH = 5351;
	BADGE_GOFEST_2022_SAPPORO_ADDON_RAID_TEST = 5352;
	BADGE_GOFEST_2022_SAPPORO_ADDON_RAID = 5353;
}

enum HoloIapItemCategory {
	IAP_CATEGORY_NONE = 0;
	IAP_CATEGORY_BUNDLE = 1;
	IAP_CATEGORY_ITEMS = 2;
	IAP_CATEGORY_UPGRADES = 3;
	IAP_CATEGORY_POKECOINS = 4;
	IAP_CATEGORY_AVATAR = 5;
	IAP_CATEGORY_AVATAR_STORE_LINK = 6;
	IAP_CATEGORY_TEAM_CHANGE = 7;
	IAP_CATEGORY_ROUTE_MAKER = 8;
	IAP_CATEGORY_GLOBAL_EVENT_TICKET = 10;
	IAP_CATEGORY_VS_SEEKER = 11;
	IAP_CATEGORY_STICKER = 12;
	IAP_CATEGORY_FREE = 13;
	IAP_CATEGORY_SUBSCRIPTION = 14;
	IAP_CATEGORY_TRANSPORTER_ENERGY = 15;
}

enum HoloItemCategory {
	ITEM_CATEGORY_NONE = 0;
	ITEM_CATEGORY_POKEBALL = 1;
	ITEM_CATEGORY_FOOD = 2;
	ITEM_CATEGORY_MEDICINE = 3;
	ITEM_CATEGORY_BOOST = 4;
	ITEM_CATEGORY_UTILITES = 5;
	ITEM_CATEGORY_CAMERA = 6;
	ITEM_CATEGORY_DISK = 7;
	ITEM_CATEGORY_INCUBATOR = 8;
	ITEM_CATEGORY_INCENSE = 9;
	ITEM_CATEGORY_XP_BOOST = 10;
	ITEM_CATEGORY_INVENTORY_UPGRADE = 11;
	ITEM_CATEGORY_EVOLUTION_REQUIREMENT = 12;
	ITEM_CATEGORY_MOVE_REROLL = 13;
	ITEM_CATEGORY_CANDY = 14;
	ITEM_CATEGORY_RAID_TICKET = 15;
	ITEM_CATEGORY_STARDUST_BOOST = 16;
	ITEM_CATEGORY_FRIEND_GIFT_BOX = 17;
	ITEM_CATEGORY_TEAM_CHANGE = 18;
	ITEM_CATEGORY_ROUTE_MAKER = 19;
	ITEM_CATEGORY_VS_SEEKER = 20;
	ITEM_CATEGORY_INCIDENT_TICKET = 21;
	ITEM_CATEGORY_GLOBAL_EVENT_TICKET = 22;
	ITEM_CATEGORY_BUDDY_EXCLUSIVE_FOOD = 23;
	ITEM_CATEGORY_STICKER = 24;
	ITEM_CATEGORY_POSTCARD_INVENTORY = 25;
	ITEM_CATEGORY_EVENT_TICKET_GIFT = 26;
}

enum HoloItemEffect {
	ITEM_EFFECT_NONE = 0;
	ITEM_EFFECT_CAP_NO_FLEE = 1000;
	ITEM_EFFECT_CAP_NO_MOVEMENT = 1002;
	ITEM_EFFECT_CAP_NO_THREAT = 1003;
	ITEM_EFFECT_CAP_TARGET_MAX = 1004;
	ITEM_EFFECT_CAP_TARGET_SLOW = 1005;
	ITEM_EFFECT_CAP_CHANCE_NIGHT = 1006;
	ITEM_EFFECT_CAP_CHANCE_TRAINER = 1007;
	ITEM_EFFECT_CAP_CHANCE_FIRST_THROW = 1008;
	ITEM_EFFECT_CAP_CHANCE_LEGEND = 1009;
	ITEM_EFFECT_CAP_CHANCE_HEAVY = 1010;
	ITEM_EFFECT_CAP_CHANCE_REPEAT = 1011;
	ITEM_EFFECT_CAP_CHANCE_MULTI_THROW = 1012;
	ITEM_EFFECT_CAP_CHANCE_ALWAYS = 1013;
	ITEM_EFFECT_CAP_CHANCE_SINGLE_THROW = 1014;
	ITEM_EFFECT_CANDY_AWARD = 1015;
	ITEM_EFFECT_FULL_MOTIVATION = 1016;
}

enum HoloItemType {
	ITEM_TYPE_NONE = 0;
	ITEM_TYPE_POKEBALL = 1;
	ITEM_TYPE_POTION = 2;
	ITEM_TYPE_REVIVE = 3;
	ITEM_TYPE_MAP = 4;
	ITEM_TYPE_BATTLE = 5;
	ITEM_TYPE_FOOD = 6;
	ITEM_TYPE_CAMERA = 7;
	ITEM_TYPE_DISK = 8;
	ITEM_TYPE_INCUBATOR = 9;
	ITEM_TYPE_INCENSE = 10;
	ITEM_TYPE_XP_BOOST = 11;
	ITEM_TYPE_INVENTORY_UPGRADE = 12;
	ITEM_TYPE_EVOLUTION_REQUIREMENT = 13;
	ITEM_TYPE_MOVE_REROLL = 14;
	ITEM_TYPE_CANDY = 15;
	ITEM_TYPE_RAID_TICKET = 16;
	ITEM_TYPE_STARDUST_BOOST = 17;
	ITEM_TYPE_FRIEND_GIFT_BOX = 18;
	ITEM_TYPE_TEAM_CHANGE = 19;
	ITEM_TYPE_ROUTE_MAKER = 20;
	ITEM_TYPE_VS_SEEKER_BATTLE_NOW = 21;
	ITEM_TYPE_INCIDENT_TICKET = 22;
	ITEM_TYPE_GLOBAL_EVENT_TICKET = 23;
	ITEM_TYPE_STICKER_INVENTORY = 24;
	ITEM_TYPE_POSTCARD_INVENTORY = 25;
	ITEM_TYPE_EVENT_TICKET_GIFT = 26;
}

enum HoloPokemonClass {
	POKEMON_CLASS_NORMAL = 0;
	POKEMON_CLASS_LEGENDARY = 1;
	POKEMON_CLASS_MYTHIC = 2;
	POKEMON_CLASS_ULTRA_BEAST = 3;
}

enum HoloPokemonEggType {
	EGG_TYPE_UNSET = 0;
	EGG_TYPE_SHADOW = 1;
}

enum HoloPokemonFamilyId {
	FAMILY_UNSET = 0;
	FAMILY_BULBASAUR = 1;
	FAMILY_CHARMANDER = 4;
	FAMILY_SQUIRTLE = 7;
	FAMILY_CATERPIE = 10;
	FAMILY_WEEDLE = 13;
	FAMILY_PIDGEY = 16;
	FAMILY_RATTATA = 19;
	FAMILY_SPEAROW = 21;
	FAMILY_EKANS = 23;
	FAMILY_PIKACHU = 25;
	FAMILY_SANDSHREW = 27;
	FAMILY_NIDORAN_FEMALE = 29;
	FAMILY_NIDORAN_MALE = 32;
	FAMILY_CLEFAIRY = 35;
	FAMILY_VULPIX = 37;
	FAMILY_JIGGLYPUFF = 39;
	FAMILY_ZUBAT = 41;
	FAMILY_ODDISH = 43;
	FAMILY_PARAS = 46;
	FAMILY_VENONAT = 48;
	FAMILY_DIGLETT = 50;
	FAMILY_MEOWTH = 52;
	FAMILY_PSYDUCK = 54;
	FAMILY_MANKEY = 56;
	FAMILY_GROWLITHE = 58;
	FAMILY_POLIWAG = 60;
	FAMILY_ABRA = 63;
	FAMILY_MACHOP = 66;
	FAMILY_BELLSPROUT = 69;
	FAMILY_TENTACOOL = 72;
	FAMILY_GEODUDE = 74;
	FAMILY_PONYTA = 77;
	FAMILY_SLOWPOKE = 79;
	FAMILY_MAGNEMITE = 81;
	FAMILY_FARFETCHD = 83;
	FAMILY_DODUO = 84;
	FAMILY_SEEL = 86;
	FAMILY_GRIMER = 88;
	FAMILY_SHELLDER = 90;
	FAMILY_GASTLY = 92;
	FAMILY_ONIX = 95;
	FAMILY_DROWZEE = 96;
	FAMILY_KRABBY = 98;
	FAMILY_VOLTORB = 100;
	FAMILY_EXEGGCUTE = 102;
	FAMILY_CUBONE = 104;
	FAMILY_HITMONLEE = 106;
	FAMILY_HITMONCHAN = 107;
	FAMILY_LICKITUNG = 108;
	FAMILY_KOFFING = 109;
	FAMILY_RHYHORN = 111;
	FAMILY_CHANSEY = 113;
	FAMILY_TANGELA = 114;
	FAMILY_KANGASKHAN = 115;
	FAMILY_HORSEA = 116;
	FAMILY_GOLDEEN = 118;
	FAMILY_STARYU = 120;
	FAMILY_MR_MIME = 122;
	FAMILY_SCYTHER = 123;
	FAMILY_JYNX = 124;
	FAMILY_ELECTABUZZ = 125;
	FAMILY_MAGMAR = 126;
	FAMILY_PINSIR = 127;
	FAMILY_TAUROS = 128;
	FAMILY_MAGIKARP = 129;
	FAMILY_LAPRAS = 131;
	FAMILY_DITTO = 132;
	FAMILY_EEVEE = 133;
	FAMILY_PORYGON = 137;
	FAMILY_OMANYTE = 138;
	FAMILY_KABUTO = 140;
	FAMILY_AERODACTYL = 142;
	FAMILY_SNORLAX = 143;
	FAMILY_ARTICUNO = 144;
	FAMILY_ZAPDOS = 145;
	FAMILY_MOLTRES = 146;
	FAMILY_DRATINI = 147;
	FAMILY_MEWTWO = 150;
	FAMILY_MEW = 151;
	FAMILY_CHIKORITA = 152;
	FAMILY_CYNDAQUIL = 155;
	FAMILY_TOTODILE = 158;
	FAMILY_SENTRET = 161;
	FAMILY_HOOTHOOT = 163;
	FAMILY_LEDYBA = 165;
	FAMILY_SPINARAK = 167;
	FAMILY_CHINCHOU = 170;
	FAMILY_TOGEPI = 175;
	FAMILY_NATU = 177;
	FAMILY_MAREEP = 179;
	FAMILY_MARILL = 183;
	FAMILY_SUDOWOODO = 185;
	FAMILY_HOPPIP = 187;
	FAMILY_AIPOM = 190;
	FAMILY_SUNKERN = 191;
	FAMILY_YANMA = 193;
	FAMILY_WOOPER = 194;
	FAMILY_MURKROW = 198;
	FAMILY_MISDREAVUS = 200;
	FAMILY_UNOWN = 201;
	FAMILY_WOBBUFFET = 202;
	FAMILY_GIRAFARIG = 203;
	FAMILY_PINECO = 204;
	FAMILY_DUNSPARCE = 206;
	FAMILY_GLIGAR = 207;
	FAMILY_SNUBBULL = 209;
	FAMILY_QWILFISH = 211;
	FAMILY_SHUCKLE = 213;
	FAMILY_HERACROSS = 214;
	FAMILY_SNEASEL = 215;
	FAMILY_TEDDIURSA = 216;
	FAMILY_SLUGMA = 218;
	FAMILY_SWINUB = 220;
	FAMILY_CORSOLA = 222;
	FAMILY_REMORAID = 223;
	FAMILY_DELIBIRD = 225;
	FAMILY_MANTINE = 226;
	FAMILY_SKARMORY = 227;
	FAMILY_HOUNDOUR = 228;
	FAMILY_PHANPY = 231;
	FAMILY_STANTLER = 234;
	FAMILY_SMEARGLE = 235;
	FAMILY_TYROGUE = 236;
	FAMILY_MILTANK = 241;
	FAMILY_RAIKOU = 243;
	FAMILY_ENTEI = 244;
	FAMILY_SUICUNE = 245;
	FAMILY_LARVITAR = 246;
	FAMILY_LUGIA = 249;
	FAMILY_HO_OH = 250;
	FAMILY_CELEBI = 251;
	FAMILY_TREECKO = 252;
	FAMILY_TORCHIC = 255;
	FAMILY_MUDKIP = 258;
	FAMILY_POOCHYENA = 261;
	FAMILY_ZIGZAGOON = 263;
	FAMILY_WURMPLE = 265;
	FAMILY_LOTAD = 270;
	FAMILY_SEEDOT = 273;
	FAMILY_TAILLOW = 276;
	FAMILY_WINGULL = 278;
	FAMILY_RALTS = 280;
	FAMILY_SURSKIT = 283;
	FAMILY_SHROOMISH = 285;
	FAMILY_SLAKOTH = 287;
	FAMILY_NINCADA = 290;
	FAMILY_WHISMUR = 293;
	FAMILY_MAKUHITA = 296;
	FAMILY_NOSEPASS = 299;
	FAMILY_SKITTY = 300;
	FAMILY_SABLEYE = 302;
	FAMILY_MAWILE = 303;
	FAMILY_ARON = 304;
	FAMILY_MEDITITE = 307;
	FAMILY_ELECTRIKE = 309;
	FAMILY_PLUSLE = 311;
	FAMILY_MINUN = 312;
	FAMILY_VOLBEAT = 313;
	FAMILY_ILLUMISE = 314;
	FAMILY_ROSELIA = 315;
	FAMILY_GULPIN = 316;
	FAMILY_CARVANHA = 318;
	FAMILY_WAILMER = 320;
	FAMILY_NUMEL = 322;
	FAMILY_TORKOAL = 324;
	FAMILY_SPOINK = 325;
	FAMILY_SPINDA = 327;
	FAMILY_TRAPINCH = 328;
	FAMILY_CACNEA = 331;
	FAMILY_SWABLU = 333;
	FAMILY_ZANGOOSE = 335;
	FAMILY_SEVIPER = 336;
	FAMILY_LUNATONE = 337;
	FAMILY_SOLROCK = 338;
	FAMILY_BARBOACH = 339;
	FAMILY_CORPHISH = 341;
	FAMILY_BALTOY = 343;
	FAMILY_LILEEP = 345;
	FAMILY_ANORITH = 347;
	FAMILY_FEEBAS = 349;
	FAMILY_CASTFORM = 351;
	FAMILY_KECLEON = 352;
	FAMILY_SHUPPET = 353;
	FAMILY_DUSKULL = 355;
	FAMILY_TROPIUS = 357;
	FAMILY_CHIMECHO = 358;
	FAMILY_ABSOL = 359;
	FAMILY_SNORUNT = 361;
	FAMILY_SPHEAL = 363;
	FAMILY_CLAMPERL = 366;
	FAMILY_RELICANTH = 369;
	FAMILY_LUVDISC = 370;
	FAMILY_BAGON = 371;
	FAMILY_BELDUM = 374;
	FAMILY_REGIROCK = 377;
	FAMILY_REGICE = 378;
	FAMILY_REGISTEEL = 379;
	FAMILY_LATIAS = 380;
	FAMILY_LATIOS = 381;
	FAMILY_KYOGRE = 382;
	FAMILY_GROUDON = 383;
	FAMILY_RAYQUAZA = 384;
	FAMILY_JIRACHI = 385;
	FAMILY_DEOXYS = 386;
	FAMILY_TURTWIG = 387;
	FAMILY_CHIMCHAR = 390;
	FAMILY_PIPLUP = 393;
	FAMILY_STARLY = 396;
	FAMILY_BIDOOF = 399;
	FAMILY_KRICKETOT = 401;
	FAMILY_SHINX = 403;
	FAMILY_CRANIDOS = 408;
	FAMILY_SHIELDON = 410;
	FAMILY_BURMY = 412;
	FAMILY_COMBEE = 415;
	FAMILY_PACHIRISU = 417;
	FAMILY_BUIZEL = 418;
	FAMILY_CHERUBI = 420;
	FAMILY_SHELLOS = 422;
	FAMILY_DRIFLOON = 425;
	FAMILY_BUNEARY = 427;
	FAMILY_GLAMEOW = 431;
	FAMILY_STUNKY = 434;
	FAMILY_BRONZOR = 436;
	FAMILY_CHATOT = 441;
	FAMILY_SPIRITOMB = 442;
	FAMILY_GIBLE = 443;
	FAMILY_LUCARIO = 448;
	FAMILY_HIPPOPOTAS = 449;
	FAMILY_SKORUPI = 451;
	FAMILY_CROAGUNK = 453;
	FAMILY_CARNIVINE = 455;
	FAMILY_FINNEON = 456;
	FAMILY_SNOVER = 459;
	FAMILY_ROTOM = 479;
	FAMILY_UXIE = 480;
	FAMILY_MESPRIT = 481;
	FAMILY_AZELF = 482;
	FAMILY_DIALGA = 483;
	FAMILY_PALKIA = 484;
	FAMILY_HEATRAN = 485;
	FAMILY_REGIGIGAS = 486;
	FAMILY_GIRATINA = 487;
	FAMILY_CRESSELIA = 488;
	FAMILY_PHIONE = 489;
	FAMILY_MANAPHY = 490;
	FAMILY_DARKRAI = 491;
	FAMILY_SHAYMIN = 492;
	FAMILY_ARCEUS = 493;
	FAMILY_VICTINI = 494;
	FAMILY_SNIVY = 495;
	FAMILY_TEPIG = 498;
	FAMILY_OSHAWOTT = 501;
	FAMILY_PATRAT = 504;
	FAMILY_LILLIPUP = 506;
	FAMILY_PURRLOIN = 509;
	FAMILY_PANSAGE = 511;
	FAMILY_PANSEAR = 513;
	FAMILY_PANPOUR = 515;
	FAMILY_MUNNA = 517;
	FAMILY_PIDOVE = 519;
	FAMILY_BLITZLE = 522;
	FAMILY_ROGGENROLA = 524;
	FAMILY_WOOBAT = 527;
	FAMILY_DRILBUR = 529;
	FAMILY_AUDINO = 531;
	FAMILY_TIMBURR = 532;
	FAMILY_TYMPOLE = 535;
	FAMILY_THROH = 538;
	FAMILY_SAWK = 539;
	FAMILY_SEWADDLE = 540;
	FAMILY_VENIPEDE = 543;
	FAMILY_COTTONEE = 546;
	FAMILY_PETILIL = 548;
	FAMILY_BASCULIN = 550;
	FAMILY_SANDILE = 551;
	FAMILY_DARUMAKA = 554;
	FAMILY_MARACTUS = 556;
	FAMILY_DWEBBLE = 557;
	FAMILY_SCRAGGY = 559;
	FAMILY_SIGILYPH = 561;
	FAMILY_YAMASK = 562;
	FAMILY_TIRTOUGA = 564;
	FAMILY_ARCHEN = 566;
	FAMILY_TRUBBISH = 568;
	FAMILY_ZORUA = 570;
	FAMILY_MINCCINO = 572;
	FAMILY_GOTHITA = 574;
	FAMILY_SOLOSIS = 577;
	FAMILY_DUCKLETT = 580;
	FAMILY_VANILLITE = 582;
	FAMILY_DEERLING = 585;
	FAMILY_EMOLGA = 587;
	FAMILY_KARRABLAST = 588;
	FAMILY_FOONGUS = 590;
	FAMILY_FRILLISH = 592;
	FAMILY_ALOMOMOLA = 594;
	FAMILY_JOLTIK = 595;
	FAMILY_FERROSEED = 597;
	FAMILY_KLINK = 599;
	FAMILY_TYNAMO = 602;
	FAMILY_ELGYEM = 605;
	FAMILY_LITWICK = 607;
	FAMILY_AXEW = 610;
	FAMILY_CUBCHOO = 613;
	FAMILY_CRYOGONAL = 615;
	FAMILY_SHELMET = 616;
	FAMILY_STUNFISK = 618;
	FAMILY_MIENFOO = 619;
	FAMILY_DRUDDIGON = 621;
	FAMILY_GOLETT = 622;
	FAMILY_PAWNIARD = 624;
	FAMILY_BOUFFALANT = 626;
	FAMILY_RUFFLET = 627;
	FAMILY_VULLABY = 629;
	FAMILY_HEATMOR = 631;
	FAMILY_DURANT = 632;
	FAMILY_DEINO = 633;
	FAMILY_LARVESTA = 636;
	FAMILY_COBALION = 638;
	FAMILY_TERRAKION = 639;
	FAMILY_VIRIZION = 640;
	FAMILY_TORNADUS = 641;
	FAMILY_THUNDURUS = 642;
	FAMILY_RESHIRAM = 643;
	FAMILY_ZEKROM = 644;
	FAMILY_LANDORUS = 645;
	FAMILY_KYUREM = 646;
	FAMILY_KELDEO = 647;
	FAMILY_MELOETTA = 648;
	FAMILY_GENESECT = 649;
	FAMILY_CHESPIN = 650;
	FAMILY_FENNEKIN = 653;
	FAMILY_FROAKIE = 656;
	FAMILY_BUNNELBY = 659;
	FAMILY_FLETCHLING = 661;
	FAMILY_SCATTERBUG = 664;
	FAMILY_LITLEO = 667;
	FAMILY_FLABEBE = 669;
	FAMILY_SKIDDO = 672;
	FAMILY_PANCHAM = 674;
	FAMILY_FURFROU = 676;
	FAMILY_ESPURR = 677;
	FAMILY_HONEDGE = 679;
	FAMILY_SPRITZEE = 682;
	FAMILY_SWIRLIX = 684;
	FAMILY_INKAY = 686;
	FAMILY_BINACLE = 688;
	FAMILY_SKRELP = 690;
	FAMILY_CLAUNCHER = 692;
	FAMILY_HELIOPTILE = 694;
	FAMILY_TYRUNT = 696;
	FAMILY_AMAURA = 698;
	FAMILY_HAWLUCHA = 701;
	FAMILY_DEDENNE = 702;
	FAMILY_CARBINK = 703;
	FAMILY_GOOMY = 704;
	FAMILY_KLEFKI = 707;
	FAMILY_PHANTUMP = 708;
	FAMILY_PUMPKABOO = 710;
	FAMILY_BERGMITE = 712;
	FAMILY_NOIBAT = 714;
	FAMILY_XERNEAS = 716;
	FAMILY_YVELTAL = 717;
	FAMILY_ZYGARDE = 718;
	FAMILY_DIANCIE = 719;
	FAMILY_HOOPA = 720;
	FAMILY_VOLCANION = 721;
	FAMILY_ROWLET = 722;
	FAMILY_LITTEN = 725;
	FAMILY_POPPLIO = 728;
	FAMILY_PIKIPEK = 731;
	FAMILY_YUNGOOS = 734;
	FAMILY_GRUBBIN = 736;
	FAMILY_CRABRAWLER = 739;
	FAMILY_ORICORIO = 741;
	FAMILY_CUTIEFLY = 742;
	FAMILY_ROCKRUFF = 744;
	FAMILY_WISHIWASHI = 746;
	FAMILY_MAREANIE = 747;
	FAMILY_MUDBRAY = 749;
	FAMILY_DEWPIDER = 751;
	FAMILY_FOMANTIS = 753;
	FAMILY_MORELULL = 755;
	FAMILY_SALANDIT = 757;
	FAMILY_STUFFUL = 759;
	FAMILY_BOUNSWEET = 761;
	FAMILY_COMFEY = 764;
	FAMILY_ORANGURU = 765;
	FAMILY_PASSIMIAN = 766;
	FAMILY_WIMPOD = 767;
	FAMILY_SANDYGAST = 769;
	FAMILY_PYUKUMUKU = 771;
	FAMILY_TYPE_NULL = 772;
	FAMILY_MINIOR = 774;
	FAMILY_KOMALA = 775;
	FAMILY_TURTONATOR = 776;
	FAMILY_TOGEDEMARU = 777;
	FAMILY_MIMIKYU = 778;
	FAMILY_BRUXISH = 779;
	FAMILY_DRAMPA = 780;
	FAMILY_DHELMISE = 781;
	FAMILY_JANGMO_O = 782;
	FAMILY_TAPU_KOKO = 785;
	FAMILY_TAPU_LELE = 786;
	FAMILY_TAPU_BULU = 787;
	FAMILY_TAPU_FINI = 788;
	FAMILY_COSMOG = 789;
	FAMILY_NIHILEGO = 793;
	FAMILY_BUZZWOLE = 794;
	FAMILY_PHEROMOSA = 795;
	FAMILY_XURKITREE = 796;
	FAMILY_CELESTEELA = 797;
	FAMILY_KARTANA = 798;
	FAMILY_GUZZLORD = 799;
	FAMILY_NECROZMA = 800;
	FAMILY_MAGEARNA = 801;
	FAMILY_MARSHADOW = 802;
	FAMILY_POIPOLE = 803;
	FAMILY_STAKATAKA = 805;
	FAMILY_BLACEPHALON = 806;
	FAMILY_ZERAORA = 807;
	FAMILY_MELTAN = 808;
	FAMILY_GROOKEY = 810;
	FAMILY_SCORBUNNY = 813;
	FAMILY_SOBBLE = 816;
	FAMILY_SKWOVET = 819;
	FAMILY_ROOKIDEE = 821;
	FAMILY_BLIPBUG = 824;
	FAMILY_NICKIT = 827;
	FAMILY_GOSSIFLEUR = 829;
	FAMILY_WOOLOO = 831;
	FAMILY_CHEWTLE = 833;
	FAMILY_YAMPER = 835;
	FAMILY_ROLYCOLY = 837;
	FAMILY_APPLIN = 840;
	FAMILY_SILICOBRA = 843;
	FAMILY_CRAMORANT = 845;
	FAMILY_ARROKUDA = 846;
	FAMILY_TOXEL = 848;
	FAMILY_SIZZLIPEDE = 850;
	FAMILY_CLOBBOPUS = 852;
	FAMILY_SINISTEA = 854;
	FAMILY_HATENNA = 856;
	FAMILY_IMPIDIMP = 859;
	FAMILY_MILCERY = 868;
	FAMILY_FALINKS = 870;
	FAMILY_PINCURCHIN = 871;
	FAMILY_SNOM = 872;
	FAMILY_STONJOURNER = 874;
	FAMILY_EISCUE = 875;
	FAMILY_INDEEDEE = 876;
	FAMILY_MORPEKO = 877;
	FAMILY_CUFANT = 878;
	FAMILY_DRACOZOLT = 880;
	FAMILY_ARCTOZOLT = 881;
	FAMILY_DRACOVISH = 882;
	FAMILY_ARCTOVISH = 883;
	FAMILY_DURALUDON = 884;
	FAMILY_DREEPY = 885;
	FAMILY_ZACIAN = 888;
	FAMILY_ZAMAZENTA = 889;
	FAMILY_ETERNATUS = 890;
	FAMILY_KUBFU = 891;
	FAMILY_ZARUDE = 893;
	FAMILY_REGIELEKI = 894;
	FAMILY_REGIDRAGO = 895;
	FAMILY_GLASTRIER = 896;
	FAMILY_SPECTRIER = 897;
	FAMILY_CALYREX = 898;
	FAMILY_ENAMORUS = 905;
}

enum HoloPokemonId {
	MISSINGNO = 0;
	BULBASAUR = 1;
	IVYSAUR = 2;
	VENUSAUR = 3;
	CHARMANDER = 4;
	CHARMELEON = 5;
	CHARIZARD = 6;
	SQUIRTLE = 7;
	WARTORTLE = 8;
	BLASTOISE = 9;
	CATERPIE = 10;
	METAPOD = 11;
	BUTTERFREE = 12;
	WEEDLE = 13;
	KAKUNA = 14;
	BEEDRILL = 15;
	PIDGEY = 16;
	PIDGEOTTO = 17;
	PIDGEOT = 18;
	RATTATA = 19;
	RATICATE = 20;
	SPEAROW = 21;
	FEAROW = 22;
	EKANS = 23;
	ARBOK = 24;
	PIKACHU = 25;
	RAICHU = 26;
	SANDSHREW = 27;
	SANDSLASH = 28;
	NIDORAN_FEMALE = 29;
	NIDORINA = 30;
	NIDOQUEEN = 31;
	NIDORAN_MALE = 32;
	NIDORINO = 33;
	NIDOKING = 34;
	CLEFAIRY = 35;
	CLEFABLE = 36;
	VULPIX = 37;
	NINETALES = 38;
	JIGGLYPUFF = 39;
	WIGGLYTUFF = 40;
	ZUBAT = 41;
	GOLBAT = 42;
	ODDISH = 43;
	GLOOM = 44;
	VILEPLUME = 45;
	PARAS = 46;
	PARASECT = 47;
	VENONAT = 48;
	VENOMOTH = 49;
	DIGLETT = 50;
	DUGTRIO = 51;
	MEOWTH = 52;
	PERSIAN = 53;
	PSYDUCK = 54;
	GOLDUCK = 55;
	MANKEY = 56;
	PRIMEAPE = 57;
	GROWLITHE = 58;
	ARCANINE = 59;
	POLIWAG = 60;
	POLIWHIRL = 61;
	POLIWRATH = 62;
	ABRA = 63;
	KADABRA = 64;
	ALAKAZAM = 65;
	MACHOP = 66;
	MACHOKE = 67;
	MACHAMP = 68;
	BELLSPROUT = 69;
	WEEPINBELL = 70;
	VICTREEBEL = 71;
	TENTACOOL = 72;
	TENTACRUEL = 73;
	GEODUDE = 74;
	GRAVELER = 75;
	GOLEM = 76;
	PONYTA = 77;
	RAPIDASH = 78;
	SLOWPOKE = 79;
	SLOWBRO = 80;
	MAGNEMITE = 81;
	MAGNETON = 82;
	FARFETCHD = 83;
	DODUO = 84;
	DODRIO = 85;
	SEEL = 86;
	DEWGONG = 87;
	GRIMER = 88;
	MUK = 89;
	SHELLDER = 90;
	CLOYSTER = 91;
	GASTLY = 92;
	HAUNTER = 93;
	GENGAR = 94;
	ONIX = 95;
	DROWZEE = 96;
	HYPNO = 97;
	KRABBY = 98;
	KINGLER = 99;
	VOLTORB = 100;
	ELECTRODE = 101;
	EXEGGCUTE = 102;
	EXEGGUTOR = 103;
	CUBONE = 104;
	MAROWAK = 105;
	HITMONLEE = 106;
	HITMONCHAN = 107;
	LICKITUNG = 108;
	KOFFING = 109;
	WEEZING = 110;
	RHYHORN = 111;
	RHYDON = 112;
	CHANSEY = 113;
	TANGELA = 114;
	KANGASKHAN = 115;
	HORSEA = 116;
	SEADRA = 117;
	GOLDEEN = 118;
	SEAKING = 119;
	STARYU = 120;
	STARMIE = 121;
	MR_MIME = 122;
	SCYTHER = 123;
	JYNX = 124;
	ELECTABUZZ = 125;
	MAGMAR = 126;
	PINSIR = 127;
	TAUROS = 128;
	MAGIKARP = 129;
	GYARADOS = 130;
	LAPRAS = 131;
	DITTO = 132;
	EEVEE = 133;
	VAPOREON = 134;
	JOLTEON = 135;
	FLAREON = 136;
	PORYGON = 137;
	OMANYTE = 138;
	OMASTAR = 139;
	KABUTO = 140;
	KABUTOPS = 141;
	AERODACTYL = 142;
	SNORLAX = 143;
	ARTICUNO = 144;
	ZAPDOS = 145;
	MOLTRES = 146;
	DRATINI = 147;
	DRAGONAIR = 148;
	DRAGONITE = 149;
	MEWTWO = 150;
	MEW = 151;
	CHIKORITA = 152;
	BAYLEEF = 153;
	MEGANIUM = 154;
	CYNDAQUIL = 155;
	QUILAVA = 156;
	TYPHLOSION = 157;
	TOTODILE = 158;
	CROCONAW = 159;
	FERALIGATR = 160;
	SENTRET = 161;
	FURRET = 162;
	HOOTHOOT = 163;
	NOCTOWL = 164;
	LEDYBA = 165;
	LEDIAN = 166;
	SPINARAK = 167;
	ARIADOS = 168;
	CROBAT = 169;
	CHINCHOU = 170;
	LANTURN = 171;
	PICHU = 172;
	CLEFFA = 173;
	IGGLYBUFF = 174;
	TOGEPI = 175;
	TOGETIC = 176;
	NATU = 177;
	XATU = 178;
	MAREEP = 179;
	FLAAFFY = 180;
	AMPHAROS = 181;
	BELLOSSOM = 182;
	MARILL = 183;
	AZUMARILL = 184;
	SUDOWOODO = 185;
	POLITOED = 186;
	HOPPIP = 187;
	SKIPLOOM = 188;
	JUMPLUFF = 189;
	AIPOM = 190;
	SUNKERN = 191;
	SUNFLORA = 192;
	YANMA = 193;
	WOOPER = 194;
	QUAGSIRE = 195;
	ESPEON = 196;
	UMBREON = 197;
	MURKROW = 198;
	SLOWKING = 199;
	MISDREAVUS = 200;
	UNOWN = 201;
	WOBBUFFET = 202;
	GIRAFARIG = 203;
	PINECO = 204;
	FORRETRESS = 205;
	DUNSPARCE = 206;
	GLIGAR = 207;
	STEELIX = 208;
	SNUBBULL = 209;
	GRANBULL = 210;
	QWILFISH = 211;
	SCIZOR = 212;
	SHUCKLE = 213;
	HERACROSS = 214;
	SNEASEL = 215;
	TEDDIURSA = 216;
	URSARING = 217;
	SLUGMA = 218;
	MAGCARGO = 219;
	SWINUB = 220;
	PILOSWINE = 221;
	CORSOLA = 222;
	REMORAID = 223;
	OCTILLERY = 224;
	DELIBIRD = 225;
	MANTINE = 226;
	SKARMORY = 227;
	HOUNDOUR = 228;
	HOUNDOOM = 229;
	KINGDRA = 230;
	PHANPY = 231;
	DONPHAN = 232;
	PORYGON2 = 233;
	STANTLER = 234;
	SMEARGLE = 235;
	TYROGUE = 236;
	HITMONTOP = 237;
	SMOOCHUM = 238;
	ELEKID = 239;
	MAGBY = 240;
	MILTANK = 241;
	BLISSEY = 242;
	RAIKOU = 243;
	ENTEI = 244;
	SUICUNE = 245;
	LARVITAR = 246;
	PUPITAR = 247;
	TYRANITAR = 248;
	LUGIA = 249;
	HO_OH = 250;
	CELEBI = 251;
	TREECKO = 252;
	GROVYLE = 253;
	SCEPTILE = 254;
	TORCHIC = 255;
	COMBUSKEN = 256;
	BLAZIKEN = 257;
	MUDKIP = 258;
	MARSHTOMP = 259;
	SWAMPERT = 260;
	POOCHYENA = 261;
	MIGHTYENA = 262;
	ZIGZAGOON = 263;
	LINOONE = 264;
	WURMPLE = 265;
	SILCOON = 266;
	BEAUTIFLY = 267;
	CASCOON = 268;
	DUSTOX = 269;
	LOTAD = 270;
	LOMBRE = 271;
	LUDICOLO = 272;
	SEEDOT = 273;
	NUZLEAF = 274;
	SHIFTRY = 275;
	TAILLOW = 276;
	SWELLOW = 277;
	WINGULL = 278;
	PELIPPER = 279;
	RALTS = 280;
	KIRLIA = 281;
	GARDEVOIR = 282;
	SURSKIT = 283;
	MASQUERAIN = 284;
	SHROOMISH = 285;
	BRELOOM = 286;
	SLAKOTH = 287;
	VIGOROTH = 288;
	SLAKING = 289;
	NINCADA = 290;
	NINJASK = 291;
	SHEDINJA = 292;
	WHISMUR = 293;
	LOUDRED = 294;
	EXPLOUD = 295;
	MAKUHITA = 296;
	HARIYAMA = 297;
	AZURILL = 298;
	NOSEPASS = 299;
	SKITTY = 300;
	DELCATTY = 301;
	SABLEYE = 302;
	MAWILE = 303;
	ARON = 304;
	LAIRON = 305;
	AGGRON = 306;
	MEDITITE = 307;
	MEDICHAM = 308;
	ELECTRIKE = 309;
	MANECTRIC = 310;
	PLUSLE = 311;
	MINUN = 312;
	VOLBEAT = 313;
	ILLUMISE = 314;
	ROSELIA = 315;
	GULPIN = 316;
	SWALOT = 317;
	CARVANHA = 318;
	SHARPEDO = 319;
	WAILMER = 320;
	WAILORD = 321;
	NUMEL = 322;
	CAMERUPT = 323;
	TORKOAL = 324;
	SPOINK = 325;
	GRUMPIG = 326;
	SPINDA = 327;
	TRAPINCH = 328;
	VIBRAVA = 329;
	FLYGON = 330;
	CACNEA = 331;
	CACTURNE = 332;
	SWABLU = 333;
	ALTARIA = 334;
	ZANGOOSE = 335;
	SEVIPER = 336;
	LUNATONE = 337;
	SOLROCK = 338;
	BARBOACH = 339;
	WHISCASH = 340;
	CORPHISH = 341;
	CRAWDAUNT = 342;
	BALTOY = 343;
	CLAYDOL = 344;
	LILEEP = 345;
	CRADILY = 346;
	ANORITH = 347;
	ARMALDO = 348;
	FEEBAS = 349;
	MILOTIC = 350;
	CASTFORM = 351;
	KECLEON = 352;
	SHUPPET = 353;
	BANETTE = 354;
	DUSKULL = 355;
	DUSCLOPS = 356;
	TROPIUS = 357;
	CHIMECHO = 358;
	ABSOL = 359;
	WYNAUT = 360;
	SNORUNT = 361;
	GLALIE = 362;
	SPHEAL = 363;
	SEALEO = 364;
	WALREIN = 365;
	CLAMPERL = 366;
	HUNTAIL = 367;
	GOREBYSS = 368;
	RELICANTH = 369;
	LUVDISC = 370;
	BAGON = 371;
	SHELGON = 372;
	SALAMENCE = 373;
	BELDUM = 374;
	METANG = 375;
	METAGROSS = 376;
	REGIROCK = 377;
	REGICE = 378;
	REGISTEEL = 379;
	LATIAS = 380;
	LATIOS = 381;
	KYOGRE = 382;
	GROUDON = 383;
	RAYQUAZA = 384;
	JIRACHI = 385;
	DEOXYS = 386;
	TURTWIG = 387;
	GROTLE = 388;
	TORTERRA = 389;
	CHIMCHAR = 390;
	MONFERNO = 391;
	INFERNAPE = 392;
	PIPLUP = 393;
	PRINPLUP = 394;
	EMPOLEON = 395;
	STARLY = 396;
	STARAVIA = 397;
	STARAPTOR = 398;
	BIDOOF = 399;
	BIBAREL = 400;
	KRICKETOT = 401;
	KRICKETUNE = 402;
	SHINX = 403;
	LUXIO = 404;
	LUXRAY = 405;
	BUDEW = 406;
	ROSERADE = 407;
	CRANIDOS = 408;
	RAMPARDOS = 409;
	SHIELDON = 410;
	BASTIODON = 411;
	BURMY = 412;
	WORMADAM = 413;
	MOTHIM = 414;
	COMBEE = 415;
	VESPIQUEN = 416;
	PACHIRISU = 417;
	BUIZEL = 418;
	FLOATZEL = 419;
	CHERUBI = 420;
	CHERRIM = 421;
	SHELLOS = 422;
	GASTRODON = 423;
	AMBIPOM = 424;
	DRIFLOON = 425;
	DRIFBLIM = 426;
	BUNEARY = 427;
	LOPUNNY = 428;
	MISMAGIUS = 429;
	HONCHKROW = 430;
	GLAMEOW = 431;
	PURUGLY = 432;
	CHINGLING = 433;
	STUNKY = 434;
	SKUNTANK = 435;
	BRONZOR = 436;
	BRONZONG = 437;
	BONSLY = 438;
	MIME_JR = 439;
	HAPPINY = 440;
	CHATOT = 441;
	SPIRITOMB = 442;
	GIBLE = 443;
	GABITE = 444;
	GARCHOMP = 445;
	MUNCHLAX = 446;
	RIOLU = 447;
	LUCARIO = 448;
	HIPPOPOTAS = 449;
	HIPPOWDON = 450;
	SKORUPI = 451;
	DRAPION = 452;
	CROAGUNK = 453;
	TOXICROAK = 454;
	CARNIVINE = 455;
	FINNEON = 456;
	LUMINEON = 457;
	MANTYKE = 458;
	SNOVER = 459;
	ABOMASNOW = 460;
	WEAVILE = 461;
	MAGNEZONE = 462;
	LICKILICKY = 463;
	RHYPERIOR = 464;
	TANGROWTH = 465;
	ELECTIVIRE = 466;
	MAGMORTAR = 467;
	TOGEKISS = 468;
	YANMEGA = 469;
	LEAFEON = 470;
	GLACEON = 471;
	GLISCOR = 472;
	MAMOSWINE = 473;
	PORYGON_Z = 474;
	GALLADE = 475;
	PROBOPASS = 476;
	DUSKNOIR = 477;
	FROSLASS = 478;
	ROTOM = 479;
	UXIE = 480;
	MESPRIT = 481;
	AZELF = 482;
	DIALGA = 483;
	PALKIA = 484;
	HEATRAN = 485;
	REGIGIGAS = 486;
	GIRATINA = 487;
	CRESSELIA = 488;
	PHIONE = 489;
	MANAPHY = 490;
	DARKRAI = 491;
	SHAYMIN = 492;
	ARCEUS = 493;
	VICTINI = 494;
	SNIVY = 495;
	SERVINE = 496;
	SERPERIOR = 497;
	TEPIG = 498;
	PIGNITE = 499;
	EMBOAR = 500;
	OSHAWOTT = 501;
	DEWOTT = 502;
	SAMUROTT = 503;
	PATRAT = 504;
	WATCHOG = 505;
	LILLIPUP = 506;
	HERDIER = 507;
	STOUTLAND = 508;
	PURRLOIN = 509;
	LIEPARD = 510;
	PANSAGE = 511;
	SIMISAGE = 512;
	PANSEAR = 513;
	SIMISEAR = 514;
	PANPOUR = 515;
	SIMIPOUR = 516;
	MUNNA = 517;
	MUSHARNA = 518;
	PIDOVE = 519;
	TRANQUILL = 520;
	UNFEZANT = 521;
	BLITZLE = 522;
	ZEBSTRIKA = 523;
	ROGGENROLA = 524;
	BOLDORE = 525;
	GIGALITH = 526;
	WOOBAT = 527;
	SWOOBAT = 528;
	DRILBUR = 529;
	EXCADRILL = 530;
	AUDINO = 531;
	TIMBURR = 532;
	GURDURR = 533;
	CONKELDURR = 534;
	TYMPOLE = 535;
	PALPITOAD = 536;
	SEISMITOAD = 537;
	THROH = 538;
	SAWK = 539;
	SEWADDLE = 540;
	SWADLOON = 541;
	LEAVANNY = 542;
	VENIPEDE = 543;
	WHIRLIPEDE = 544;
	SCOLIPEDE = 545;
	COTTONEE = 546;
	WHIMSICOTT = 547;
	PETILIL = 548;
	LILLIGANT = 549;
	BASCULIN = 550;
	SANDILE = 551;
	KROKOROK = 552;
	KROOKODILE = 553;
	DARUMAKA = 554;
	DARMANITAN = 555;
	MARACTUS = 556;
	DWEBBLE = 557;
	CRUSTLE = 558;
	SCRAGGY = 559;
	SCRAFTY = 560;
	SIGILYPH = 561;
	YAMASK = 562;
	COFAGRIGUS = 563;
	TIRTOUGA = 564;
	CARRACOSTA = 565;
	ARCHEN = 566;
	ARCHEOPS = 567;
	TRUBBISH = 568;
	GARBODOR = 569;
	ZORUA = 570;
	ZOROARK = 571;
	MINCCINO = 572;
	CINCCINO = 573;
	GOTHITA = 574;
	GOTHORITA = 575;
	GOTHITELLE = 576;
	SOLOSIS = 577;
	DUOSION = 578;
	REUNICLUS = 579;
	DUCKLETT = 580;
	SWANNA = 581;
	VANILLITE = 582;
	VANILLISH = 583;
	VANILLUXE = 584;
	DEERLING = 585;
	SAWSBUCK = 586;
	EMOLGA = 587;
	KARRABLAST = 588;
	ESCAVALIER = 589;
	FOONGUS = 590;
	AMOONGUSS = 591;
	FRILLISH = 592;
	JELLICENT = 593;
	ALOMOMOLA = 594;
	JOLTIK = 595;
	GALVANTULA = 596;
	FERROSEED = 597;
	FERROTHORN = 598;
	KLINK = 599;
	KLANG = 600;
	KLINKLANG = 601;
	TYNAMO = 602;
	EELEKTRIK = 603;
	EELEKTROSS = 604;
	ELGYEM = 605;
	BEHEEYEM = 606;
	LITWICK = 607;
	LAMPENT = 608;
	CHANDELURE = 609;
	AXEW = 610;
	FRAXURE = 611;
	HAXORUS = 612;
	CUBCHOO = 613;
	BEARTIC = 614;
	CRYOGONAL = 615;
	SHELMET = 616;
	ACCELGOR = 617;
	STUNFISK = 618;
	MIENFOO = 619;
	MIENSHAO = 620;
	DRUDDIGON = 621;
	GOLETT = 622;
	GOLURK = 623;
	PAWNIARD = 624;
	BISHARP = 625;
	BOUFFALANT = 626;
	RUFFLET = 627;
	BRAVIARY = 628;
	VULLABY = 629;
	MANDIBUZZ = 630;
	HEATMOR = 631;
	DURANT = 632;
	DEINO = 633;
	ZWEILOUS = 634;
	HYDREIGON = 635;
	LARVESTA = 636;
	VOLCARONA = 637;
	COBALION = 638;
	TERRAKION = 639;
	VIRIZION = 640;
	TORNADUS = 641;
	THUNDURUS = 642;
	RESHIRAM = 643;
	ZEKROM = 644;
	LANDORUS = 645;
	KYUREM = 646;
	KELDEO = 647;
	MELOETTA = 648;
	GENESECT = 649;
	CHESPIN = 650;
	QUILLADIN = 651;
	CHESNAUGHT = 652;
	FENNEKIN = 653;
	BRAIXEN = 654;
	DELPHOX = 655;
	FROAKIE = 656;
	FROGADIER = 657;
	GRENINJA = 658;
	BUNNELBY = 659;
	DIGGERSBY = 660;
	FLETCHLING = 661;
	FLETCHINDER = 662;
	TALONFLAME = 663;
	SCATTERBUG = 664;
	SPEWPA = 665;
	VIVILLON = 666;
	LITLEO = 667;
	PYROAR = 668;
	FLABEBE = 669;
	FLOETTE = 670;
	FLORGES = 671;
	SKIDDO = 672;
	GOGOAT = 673;
	PANCHAM = 674;
	PANGORO = 675;
	FURFROU = 676;
	ESPURR = 677;
	MEOWSTIC = 678;
	HONEDGE = 679;
	DOUBLADE = 680;
	AEGISLASH = 681;
	SPRITZEE = 682;
	AROMATISSE = 683;
	SWIRLIX = 684;
	SLURPUFF = 685;
	INKAY = 686;
	MALAMAR = 687;
	BINACLE = 688;
	BARBARACLE = 689;
	SKRELP = 690;
	DRAGALGE = 691;
	CLAUNCHER = 692;
	CLAWITZER = 693;
	HELIOPTILE = 694;
	HELIOLISK = 695;
	TYRUNT = 696;
	TYRANTRUM = 697;
	AMAURA = 698;
	AURORUS = 699;
	SYLVEON = 700;
	HAWLUCHA = 701;
	DEDENNE = 702;
	CARBINK = 703;
	GOOMY = 704;
	SLIGGOO = 705;
	GOODRA = 706;
	KLEFKI = 707;
	PHANTUMP = 708;
	TREVENANT = 709;
	PUMPKABOO = 710;
	GOURGEIST = 711;
	BERGMITE = 712;
	AVALUGG = 713;
	NOIBAT = 714;
	NOIVERN = 715;
	XERNEAS = 716;
	YVELTAL = 717;
	ZYGARDE = 718;
	DIANCIE = 719;
	HOOPA = 720;
	VOLCANION = 721;
	ROWLET = 722;
	DARTRIX = 723;
	DECIDUEYE = 724;
	LITTEN = 725;
	TORRACAT = 726;
	INCINEROAR = 727;
	POPPLIO = 728;
	BRIONNE = 729;
	PRIMARINA = 730;
	PIKIPEK = 731;
	TRUMBEAK = 732;
	TOUCANNON = 733;
	YUNGOOS = 734;
	GUMSHOOS = 735;
	GRUBBIN = 736;
	CHARJABUG = 737;
	VIKAVOLT = 738;
	CRABRAWLER = 739;
	CRABOMINABLE = 740;
	ORICORIO = 741;
	CUTIEFLY = 742;
	RIBOMBEE = 743;
	ROCKRUFF = 744;
	LYCANROC = 745;
	WISHIWASHI = 746;
	MAREANIE = 747;
	TOXAPEX = 748;
	MUDBRAY = 749;
	MUDSDALE = 750;
	DEWPIDER = 751;
	ARAQUANID = 752;
	FOMANTIS = 753;
	LURANTIS = 754;
	MORELULL = 755;
	SHIINOTIC = 756;
	SALANDIT = 757;
	SALAZZLE = 758;
	STUFFUL = 759;
	BEWEAR = 760;
	BOUNSWEET = 761;
	STEENEE = 762;
	TSAREENA = 763;
	COMFEY = 764;
	ORANGURU = 765;
	PASSIMIAN = 766;
	WIMPOD = 767;
	GOLISOPOD = 768;
	SANDYGAST = 769;
	PALOSSAND = 770;
	PYUKUMUKU = 771;
	TYPE_NULL = 772;
	SILVALLY = 773;
	MINIOR = 774;
	KOMALA = 775;
	TURTONATOR = 776;
	TOGEDEMARU = 777;
	MIMIKYU = 778;
	BRUXISH = 779;
	DRAMPA = 780;
	DHELMISE = 781;
	JANGMO_O = 782;
	HAKAMO_O = 783;
	KOMMO_O = 784;
	TAPU_KOKO = 785;
	TAPU_LELE = 786;
	TAPU_BULU = 787;
	TAPU_FINI = 788;
	COSMOG = 789;
	COSMOEM = 790;
	SOLGALEO = 791;
	LUNALA = 792;
	NIHILEGO = 793;
	BUZZWOLE = 794;
	PHEROMOSA = 795;
	XURKITREE = 796;
	CELESTEELA = 797;
	KARTANA = 798;
	GUZZLORD = 799;
	NECROZMA = 800;
	MAGEARNA = 801;
	MARSHADOW = 802;
	POIPOLE = 803;
	NAGANADEL = 804;
	STAKATAKA = 805;
	BLACEPHALON = 806;
	ZERAORA = 807;
	MELTAN = 808;
	MELMETAL = 809;
	GROOKEY = 810;
	THWACKEY = 811;
	RILLABOOM = 812;
	SCORBUNNY = 813;
	RABOOT = 814;
	CINDERACE = 815;
	SOBBLE = 816;
	DRIZZILE = 817;
	INTELEON = 818;
	SKWOVET = 819;
	GREEDENT = 820;
	ROOKIDEE = 821;
	CORVISQUIRE = 822;
	CORVIKNIGHT = 823;
	BLIPBUG = 824;
	DOTTLER = 825;
	ORBEETLE = 826;
	NICKIT = 827;
	THIEVUL = 828;
	GOSSIFLEUR = 829;
	ELDEGOSS = 830;
	WOOLOO = 831;
	DUBWOOL = 832;
	CHEWTLE = 833;
	DREDNAW = 834;
	YAMPER = 835;
	BOLTUND = 836;
	ROLYCOLY = 837;
	CARKOL = 838;
	COALOSSAL = 839;
	APPLIN = 840;
	FLAPPLE = 841;
	APPLETUN = 842;
	SILICOBRA = 843;
	SANDACONDA = 844;
	CRAMORANT = 845;
	ARROKUDA = 846;
	BARRASKEWDA = 847;
	TOXEL = 848;
	TOXTRICITY = 849;
	SIZZLIPEDE = 850;
	CENTISKORCH = 851;
	CLOBBOPUS = 852;
	GRAPPLOCT = 853;
	SINISTEA = 854;
	POLTEAGEIST = 855;
	HATENNA = 856;
	HATTREM = 857;
	HATTERENE = 858;
	IMPIDIMP = 859;
	MORGREM = 860;
	GRIMMSNARL = 861;
	OBSTAGOON = 862;
	PERRSERKER = 863;
	CURSOLA = 864;
	SIRFETCHD = 865;
	MR_RIME = 866;
	RUNERIGUS = 867;
	MILCERY = 868;
	ALCREMIE = 869;
	FALINKS = 870;
	PINCURCHIN = 871;
	SNOM = 872;
	FROSMOTH = 873;
	STONJOURNER = 874;
	EISCUE = 875;
	INDEEDEE = 876;
	MORPEKO = 877;
	CUFANT = 878;
	COPPERAJAH = 879;
	DRACOZOLT = 880;
	ARCTOZOLT = 881;
	DRACOVISH = 882;
	ARCTOVISH = 883;
	DURALUDON = 884;
	DREEPY = 885;
	DRAKLOAK = 886;
	DRAGAPULT = 887;
	ZACIAN = 888;
	ZAMAZENTA = 889;
	ETERNATUS = 890;
	KUBFU = 891;
	URSHIFU = 892;
	ZARUDE = 893;
	REGIELEKI = 894;
	REGIDRAGO = 895;
	GLASTRIER = 896;
	SPECTRIER = 897;
	CALYREX = 898;
	WYRDEER = 899;
	KLEAVOR = 900;
	URSALUNA = 901;
	BASCULEGION = 902;
	SNEASLER = 903;
	OVERQWIL = 904;
	ENAMORUS = 905;
}

enum HoloPokemonMove {
	MOVE_UNSET = 0;
	THUNDER_SHOCK = 1;
	QUICK_ATTACK = 2;
	SCRATCH = 3;
	EMBER = 4;
	VINE_WHIP = 5;
	TACKLE = 6;
	RAZOR_LEAF = 7;
	TAKE_DOWN = 8;
	WATER_GUN = 9;
	BITE = 10;
	POUND = 11;
	DOUBLE_SLAP = 12;
	WRAP = 13;
	HYPER_BEAM = 14;
	LICK = 15;
	DARK_PULSE = 16;
	SMOG = 17;
	SLUDGE = 18;
	METAL_CLAW = 19;
	VICE_GRIP = 20;
	FLAME_WHEEL = 21;
	MEGAHORN = 22;
	WING_ATTACK = 23;
	FLAMETHROWER = 24;
	SUCKER_PUNCH = 25;
	DIG = 26;
	LOW_KICK = 27;
	CROSS_CHOP = 28;
	PSYCHO_CUT = 29;
	PSYBEAM = 30;
	EARTHQUAKE = 31;
	STONE_EDGE = 32;
	ICE_PUNCH = 33;
	HEART_STAMP = 34;
	DISCHARGE = 35;
	FLASH_CANNON = 36;
	PECK = 37;
	DRILL_PECK = 38;
	ICE_BEAM = 39;
	BLIZZARD = 40;
	AIR_SLASH = 41;
	HEAT_WAVE = 42;
	TWINEEDLE = 43;
	POISON_JAB = 44;
	AERIAL_ACE = 45;
	DRILL_RUN = 46;
	PETAL_BLIZZARD = 47;
	MEGA_DRAIN = 48;
	BUG_BUZZ = 49;
	POISON_FANG = 50;
	NIGHT_SLASH = 51;
	SLASH = 52;
	BUBBLE_BEAM = 53;
	SUBMISSION = 54;
	KARATE_CHOP = 55;
	LOW_SWEEP = 56;
	AQUA_JET = 57;
	AQUA_TAIL = 58;
	SEED_BOMB = 59;
	PSYSHOCK = 60;
	ROCK_THROW = 61;
	ANCIENT_POWER = 62;
	ROCK_TOMB = 63;
	ROCK_SLIDE = 64;
	POWER_GEM = 65;
	SHADOW_SNEAK = 66;
	SHADOW_PUNCH = 67;
	SHADOW_CLAW = 68;
	OMINOUS_WIND = 69;
	SHADOW_BALL = 70;
	BULLET_PUNCH = 71;
	MAGNET_BOMB = 72;
	STEEL_WING = 73;
	IRON_HEAD = 74;
	PARABOLIC_CHARGE = 75;
	SPARK = 76;
	THUNDER_PUNCH = 77;
	THUNDER = 78;
	THUNDERBOLT = 79;
	TWISTER = 80;
	DRAGON_BREATH = 81;
	DRAGON_PULSE = 82;
	DRAGON_CLAW = 83;
	DISARMING_VOICE = 84;
	DRAINING_KISS = 85;
	DAZZLING_GLEAM = 86;
	MOONBLAST = 87;
	PLAY_ROUGH = 88;
	CROSS_POISON = 89;
	SLUDGE_BOMB = 90;
	SLUDGE_WAVE = 91;
	GUNK_SHOT = 92;
	MUD_SHOT = 93;
	BONE_CLUB = 94;
	BULLDOZE = 95;
	MUD_BOMB = 96;
	FURY_CUTTER = 97;
	BUG_BITE = 98;
	SIGNAL_BEAM = 99;
	X_SCISSOR = 100;
	FLAME_CHARGE = 101;
	FLAME_BURST = 102;
	FIRE_BLAST = 103;
	BRINE = 104;
	WATER_PULSE = 105;
	SCALD = 106;
	HYDRO_PUMP = 107;
	PSYCHIC = 108;
	PSYSTRIKE = 109;
	ICE_SHARD = 110;
	ICY_WIND = 111;
	FROST_BREATH = 112;
	ABSORB = 113;
	GIGA_DRAIN = 114;
	FIRE_PUNCH = 115;
	SOLAR_BEAM = 116;
	LEAF_BLADE = 117;
	POWER_WHIP = 118;
	SPLASH = 119;
	ACID = 120;
	AIR_CUTTER = 121;
	HURRICANE = 122;
	BRICK_BREAK = 123;
	CUT = 124;
	SWIFT = 125;
	HORN_ATTACK = 126;
	STOMP = 127;
	HEADBUTT = 128;
	HYPER_FANG = 129;
	SLAM = 130;
	BODY_SLAM = 131;
	REST = 132;
	STRUGGLE = 133;
	SCALD_BLASTOISE = 134;
	HYDRO_PUMP_BLASTOISE = 135;
	WRAP_GREEN = 136;
	WRAP_PINK = 137;
	FURY_CUTTER_FAST = 200;
	BUG_BITE_FAST = 201;
	BITE_FAST = 202;
	SUCKER_PUNCH_FAST = 203;
	DRAGON_BREATH_FAST = 204;
	THUNDER_SHOCK_FAST = 205;
	SPARK_FAST = 206;
	LOW_KICK_FAST = 207;
	KARATE_CHOP_FAST = 208;
	EMBER_FAST = 209;
	WING_ATTACK_FAST = 210;
	PECK_FAST = 211;
	LICK_FAST = 212;
	SHADOW_CLAW_FAST = 213;
	VINE_WHIP_FAST = 214;
	RAZOR_LEAF_FAST = 215;
	MUD_SHOT_FAST = 216;
	ICE_SHARD_FAST = 217;
	FROST_BREATH_FAST = 218;
	QUICK_ATTACK_FAST = 219;
	SCRATCH_FAST = 220;
	TACKLE_FAST = 221;
	POUND_FAST = 222;
	CUT_FAST = 223;
	POISON_JAB_FAST = 224;
	ACID_FAST = 225;
	PSYCHO_CUT_FAST = 226;
	ROCK_THROW_FAST = 227;
	METAL_CLAW_FAST = 228;
	BULLET_PUNCH_FAST = 229;
	WATER_GUN_FAST = 230;
	SPLASH_FAST = 231;
	WATER_GUN_FAST_BLASTOISE = 232;
	MUD_SLAP_FAST = 233;
	ZEN_HEADBUTT_FAST = 234;
	CONFUSION_FAST = 235;
	POISON_STING_FAST = 236;
	BUBBLE_FAST = 237;
	FEINT_ATTACK_FAST = 238;
	STEEL_WING_FAST = 239;
	FIRE_FANG_FAST = 240;
	ROCK_SMASH_FAST = 241;
	TRANSFORM_FAST = 242;
	COUNTER_FAST = 243;
	POWDER_SNOW_FAST = 244;
	CLOSE_COMBAT = 245;
	DYNAMIC_PUNCH = 246;
	FOCUS_BLAST = 247;
	AURORA_BEAM = 248;
	CHARGE_BEAM_FAST = 249;
	VOLT_SWITCH_FAST = 250;
	WILD_CHARGE = 251;
	ZAP_CANNON = 252;
	DRAGON_TAIL_FAST = 253;
	AVALANCHE = 254;
	AIR_SLASH_FAST = 255;
	BRAVE_BIRD = 256;
	SKY_ATTACK = 257;
	SAND_TOMB = 258;
	ROCK_BLAST = 259;
	INFESTATION_FAST = 260;
	STRUGGLE_BUG_FAST = 261;
	SILVER_WIND = 262;
	ASTONISH_FAST = 263;
	HEX_FAST = 264;
	NIGHT_SHADE = 265;
	IRON_TAIL_FAST = 266;
	GYRO_BALL = 267;
	HEAVY_SLAM = 268;
	FIRE_SPIN_FAST = 269;
	OVERHEAT = 270;
	BULLET_SEED_FAST = 271;
	GRASS_KNOT = 272;
	ENERGY_BALL = 273;
	EXTRASENSORY_FAST = 274;
	FUTURESIGHT = 275;
	MIRROR_COAT = 276;
	OUTRAGE = 277;
	SNARL_FAST = 278;
	CRUNCH = 279;
	FOUL_PLAY = 280;
	HIDDEN_POWER_FAST = 281;
	TAKE_DOWN_FAST = 282;
	WATERFALL_FAST = 283;
	SURF = 284;
	DRACO_METEOR = 285;
	DOOM_DESIRE = 286;
	YAWN_FAST = 287;
	PSYCHO_BOOST = 288;
	ORIGIN_PULSE = 289;
	PRECIPICE_BLADES = 290;
	PRESENT_FAST = 291;
	WEATHER_BALL_FIRE = 292;
	WEATHER_BALL_ICE = 293;
	WEATHER_BALL_ROCK = 294;
	WEATHER_BALL_WATER = 295;
	FRENZY_PLANT = 296;
	SMACK_DOWN_FAST = 297;
	BLAST_BURN = 298;
	HYDRO_CANNON = 299;
	LAST_RESORT = 300;
	METEOR_MASH = 301;
	SKULL_BASH = 302;
	ACID_SPRAY = 303;
	EARTH_POWER = 304;
	CRABHAMMER = 305;
	LUNGE = 306;
	CRUSH_CLAW = 307;
	OCTAZOOKA = 308;
	MIRROR_SHOT = 309;
	SUPER_POWER = 310;
	FELL_STINGER = 311;
	LEAF_TORNADO = 312;
	LEECH_LIFE = 313;
	DRAIN_PUNCH = 314;
	SHADOW_BONE = 315;
	MUDDY_WATER = 316;
	BLAZE_KICK = 317;
	RAZOR_SHELL = 318;
	POWER_UP_PUNCH = 319;
	CHARM_FAST = 320;
	GIGA_IMPACT = 321;
	FRUSTRATION = 322;
	RETURN = 323;
	SYNCHRONOISE = 324;
	LOCK_ON_FAST = 325;
	THUNDER_FANG_FAST = 326;
	ICE_FANG_FAST = 327;
	HORN_DRILL = 328;
	FISSURE = 329;
	SACRED_SWORD = 330;
	FLYING_PRESS = 331;
	AURA_SPHERE = 332;
	PAYBACK = 333;
	ROCK_WRECKER = 334;
	AEROBLAST = 335;
	TECHNO_BLAST_NORMAL = 336;
	TECHNO_BLAST_BURN = 337;
	TECHNO_BLAST_CHILL = 338;
	TECHNO_BLAST_WATER = 339;
	TECHNO_BLAST_SHOCK = 340;
	FLY = 341;
	V_CREATE = 342;
	LEAF_STORM = 343;
	TRI_ATTACK = 344;
	GUST_FAST = 345;
	INCINERATE_FAST = 346;
	DARK_VOID = 347;
	FEATHER_DANCE = 348;
	FIERY_DANCE = 349;
	FAIRY_WIND_FAST = 350;
	RELIC_SONG = 351;
	WEATHER_BALL_NORMAL = 352;
	PSYCHIC_FANGS = 353;
	HYPERSPACE_FURY = 354;
	HYPERSPACE_HOLE = 355;
	DOUBLE_KICK_FAST = 356;
	MAGICAL_LEAF_FAST = 357;
	SACRED_FIRE = 358;
	ICICLE_SPEAR = 359;
	AEROBLAST_PLUS = 360;
	AEROBLAST_PLUS_PLUS = 361;
	SACRED_FIRE_PLUS = 362;
	SACRED_FIRE_PLUS_PLUS = 363;
	ACROBATICS = 364;
	LUSTER_PURGE = 365;
	MIST_BALL = 366;
	BRUTAL_SWING = 367;
	ROLLOUT_FAST = 368;
	SEED_FLARE = 369;
	OBSTRUCT = 370;
}

enum HoloPokemonMovementType {
	MOVEMENT_STATIC = 0;
	MOVEMENT_JUMP = 1;
	MOVEMENT_VERTICAL = 2;
	MOVEMENT_PSYCHIC = 3;
	MOVEMENT_ELECTRIC = 4;
	MOVEMENT_FLYING = 5;
	MOVEMENT_HOVERING = 6;
}

enum HoloPokemonNature {
	NATURE_UNKNOWN = 0;
	POKEMON_NATURE_STOIC = 1;
	POKEMON_NATURE_ASSASSIN = 2;
	POKEMON_NATURE_GUARDIAN = 3;
	POKEMON_NATURE_RAIDER = 4;
	POKEMON_NATURE_PROTECTOR = 5;
	POKEMON_NATURE_SENTRY = 6;
	POKEMON_NATURE_CHAMPION = 7;
}

enum HoloPokemonType {
	POKEMON_TYPE_NONE = 0;
	POKEMON_TYPE_NORMAL = 1;
	POKEMON_TYPE_FIGHTING = 2;
	POKEMON_TYPE_FLYING = 3;
	POKEMON_TYPE_POISON = 4;
	POKEMON_TYPE_GROUND = 5;
	POKEMON_TYPE_ROCK = 6;
	POKEMON_TYPE_BUG = 7;
	POKEMON_TYPE_GHOST = 8;
	POKEMON_TYPE_STEEL = 9;
	POKEMON_TYPE_FIRE = 10;
	POKEMON_TYPE_WATER = 11;
	POKEMON_TYPE_GRASS = 12;
	POKEMON_TYPE_ELECTRIC = 13;
	POKEMON_TYPE_PSYCHIC = 14;
	POKEMON_TYPE_ICE = 15;
	POKEMON_TYPE_DRAGON = 16;
	POKEMON_TYPE_DARK = 17;
	POKEMON_TYPE_FAIRY = 18;
}

enum HoloTemporaryEvolutionId {
	TEMP_EVOLUTION_UNSET = 0;
	TEMP_EVOLUTION_MEGA = 1;
	TEMP_EVOLUTION_MEGA_X = 2;
	TEMP_EVOLUTION_MEGA_Y = 3;
}

enum IapLibraryVersion {
	IAP_LIBRARY_VERSION_DEFAULT = 0;
	IAP_LIBRARY_VERSION_IODINE_1_8 = 1;
	IAP_LIBRARY_VERSION_NIA_IAP_4 = 2;
}

enum IdentityProvider {
	IDENTITY_PROVIDER_UNSET_IDENTITY_PROVIDER = 0;
	IDENTITY_PROVIDER_GOOGLE = 1;
	IDENTITY_PROVIDER_PTC = 2;
	IDENTITY_PROVIDER_FACEBOOK = 3;
	IDENTITY_PROVIDER_BACKGROUND = 4;
	IDENTITY_PROVIDER_INTERNAL = 5;
	IDENTITY_PROVIDER_SFIDA = 6;
	IDENTITY_PROVIDER_SUPER_AWESOME = 7;
	IDENTITY_PROVIDER_DEVELOPER = 8;
	IDENTITY_PROVIDER_SHARED_SECRET = 9;
	IDENTITY_PROVIDER_POSEIDON = 10;
	IDENTITY_PROVIDER_NINTENDO = 11;
	IDENTITY_PROVIDER_APPLE = 12;
}

enum IncidentDisplayType {
	INCIDENT_DISPLAY_TYPE_NONE = 0;
	INCIDENT_DISPLAY_TYPE_INVASION_GRUNT = 1;
	INCIDENT_DISPLAY_TYPE_INVASION_LEADER = 2;
	INCIDENT_DISPLAY_TYPE_INVASION_GIOVANNI = 3;
	INCIDENT_DISPLAY_TYPE_INVASION_GRUNTB = 4;
	INCIDENT_DISPLAY_TYPE_INVASION_EVENT_NPC = 5;
	INCIDENT_DISPLAY_TYPE_INVASION_ROUTES_NPC = 6;
}

enum InvasionTelemetryIds {
	INVASION_TELEMETRY_IDS_UNDEFINED_INVASION_EVENT = 0;
	INVASION_TELEMETRY_IDS_INVASION_NPC_TAP = 1;
	INVASION_TELEMETRY_IDS_INVASION_BATTLE_STARTED = 2;
	INVASION_TELEMETRY_IDS_INVASION_BATTLE_FINISHED = 3;
	INVASION_TELEMETRY_IDS_INVASION_ENCOUNTER_STARTED = 4;
	INVASION_TELEMETRY_IDS_INVASION_ENCOUNTER_FINISHED = 5;
	INVASION_TELEMETRY_IDS_INVASION_POKEMON_PURIFIED = 6;
	INVASION_TELEMETRY_IDS_INVASION_AFTER_POI_EXITED = 7;
	INVASION_TELEMETRY_IDS_INVASION_RADAR_VIEW_OPENED = 8;
	INVASION_TELEMETRY_IDS_INVASION_RADAR_VIEW_CLOSED = 9;
	INVASION_TELEMETRY_IDS_INVASION_RADAR_VIEW_EMPTY = 10;
	INVASION_TELEMETRY_IDS_INVASION_DECOY_FOUND = 11;
	INVASION_TELEMETRY_IDS_INVASION_GIOVANNI_FOUND = 12;
	INVASION_TELEMETRY_IDS_INVASION_BALLOON_TAP = 13;
}

enum InventoryUpgradeType {
	UPGRADE_UNSET = 0;
	INCREASE_ITEM_STORAGE = 1;
	INCREASE_POKEMON_STORAGE = 2;
}

enum InvitationType {
	INVITATION_TYPE_UNSET = 0;
	INVITATION_TYPE_CODE = 1;
	INVITATION_TYPE_FACEBOOK = 2;
	INVITATION_TYPE_SERVER_REQUEST = 3;
	INVITATION_TYPE_NIANTIC_SOCIAL_GRAPH = 4;
	INVITATION_TYPE_ADDRESS_BOOK_IMPORT = 5;
}

enum Item {
	ITEM_UNKNOWN = 0;
	ITEM_POKE_BALL = 1;
	ITEM_GREAT_BALL = 2;
	ITEM_ULTRA_BALL = 3;
	ITEM_MASTER_BALL = 4;
	ITEM_PREMIER_BALL = 5;
	ITEM_BEAST_BALL = 6;
	ITEM_POTION = 101;
	ITEM_SUPER_POTION = 102;
	ITEM_HYPER_POTION = 103;
	ITEM_MAX_POTION = 104;
	ITEM_REVIVE = 201;
	ITEM_MAX_REVIVE = 202;
	ITEM_LUCKY_EGG = 301;
	ITEM_INCENSE_ORDINARY = 401;
	ITEM_INCENSE_SPICY = 402;
	ITEM_INCENSE_COOL = 403;
	ITEM_INCENSE_FLORAL = 404;
	ITEM_INCENSE_BELUGA_BOX = 405;
	ITEM_TROY_DISK = 501;
	ITEM_TROY_DISK_GLACIAL = 502;
	ITEM_TROY_DISK_MOSSY = 503;
	ITEM_TROY_DISK_MAGNETIC = 504;
	ITEM_TROY_DISK_RAINY = 505;
	ITEM_X_ATTACK = 602;
	ITEM_X_DEFENSE = 603;
	ITEM_X_MIRACLE = 604;
	ITEM_RAZZ_BERRY = 701;
	ITEM_BLUK_BERRY = 702;
	ITEM_NANAB_BERRY = 703;
	ITEM_WEPAR_BERRY = 704;
	ITEM_PINAP_BERRY = 705;
	ITEM_GOLDEN_RAZZ_BERRY = 706;
	ITEM_GOLDEN_NANAB_BERRY = 707;
	ITEM_GOLDEN_PINAP_BERRY = 708;
	ITEM_POFFIN = 709;
	ITEM_SPECIAL_CAMERA = 801;
	ITEM_STICKER_INVENTORY = 802;
	ITEM_POSTCARD_INVENTORY = 803;
	ITEM_INCUBATOR_BASIC_UNLIMITED = 901;
	ITEM_INCUBATOR_BASIC = 902;
	ITEM_INCUBATOR_SUPER = 903;
	ITEM_POKEMON_STORAGE_UPGRADE = 1001;
	ITEM_ITEM_STORAGE_UPGRADE = 1002;
	ITEM_SUN_STONE = 1101;
	ITEM_KINGS_ROCK = 1102;
	ITEM_METAL_COAT = 1103;
	ITEM_DRAGON_SCALE = 1104;
	ITEM_UP_GRADE = 1105;
	ITEM_GEN4_EVOLUTION_STONE = 1106;
	ITEM_GEN5_EVOLUTION_STONE = 1107;
	ITEM_MOVE_REROLL_FAST_ATTACK = 1201;
	ITEM_MOVE_REROLL_SPECIAL_ATTACK = 1202;
	ITEM_MOVE_REROLL_ELITE_FAST_ATTACK = 1203;
	ITEM_MOVE_REROLL_ELITE_SPECIAL_ATTACK = 1204;
	ITEM_RARE_CANDY = 1301;
	ITEM_XL_RARE_CANDY = 1302;
	ITEM_FREE_RAID_TICKET = 1401;
	ITEM_PAID_RAID_TICKET = 1402;
	ITEM_LEGENDARY_RAID_TICKET = 1403;
	ITEM_STAR_PIECE = 1404;
	ITEM_FRIEND_GIFT_BOX = 1405;
	ITEM_TEAM_CHANGE = 1406;
	ITEM_ROUTE_MAKER = 1407;
	ITEM_REMOTE_RAID_TICKET = 1408;
	ITEM_LEADER_MAP_FRAGMENT = 1501;
	ITEM_LEADER_MAP = 1502;
	ITEM_GIOVANNI_MAP = 1503;
	ITEM_GLOBAL_EVENT_TICKET = 1600;
	ITEM_EVENT_TICKET_PINK = 1601;
	ITEM_EVENT_TICKET_GRAY = 1602;
	ITEM_GLOBAL_EVENT_TICKET_TO_GIFT = 1603;
	ITEM_EVENT_TICKET_PINK_TO_GIFT = 1604;
	ITEM_EVENT_TICKET_GRAY_TO_GIFT = 1605;
}

enum ItemUseTelemetryIds {
	ITEM_USE_TELEMETRY_IDS_UNDEFINED_ITEM_EVENT = 0;
	ITEM_USE_TELEMETRY_IDS_USE_ITEM = 1;
	ITEM_USE_TELEMETRY_IDS_RECYCLE_ITEM = 2;
	ITEM_USE_TELEMETRY_IDS_UPDATE_ITEM_EQUIPPED = 3;
}

enum LoginActionTelemetryIds {
	LOGIN_ACTION_TELEMETRY_IDS_UNDEFINED_LOGIN_ACTION = 0;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_AGE_GATE = 1;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_NEW_PLAYER = 2;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_EXISTING_PLAYER = 3;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_GOOGLE = 4;
	LOGIN_ACTION_TELEMETRY_IDS_COMPLETE_GOOGLE = 5;
	LOGIN_ACTION_TELEMETRY_IDS_CANCEL_GOOGLE = 6;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_FACEBOOK = 7;
	LOGIN_ACTION_TELEMETRY_IDS_COMPLETE_FACEBOOK = 8;
	LOGIN_ACTION_TELEMETRY_IDS_CANCEL_FACEBOOK = 9;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_PTC = 10;
	LOGIN_ACTION_TELEMETRY_IDS_EXIT_PTC = 11;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_PTC_REGISTER = 12;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_PTC_SIGN_IN = 13;
	LOGIN_ACTION_TELEMETRY_IDS_CANCEL_PTC_SIGN_IN = 14;
	LOGIN_ACTION_TELEMETRY_IDS_COMPLETE_PTC_SIGN_IN = 15;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_SUPERAWESOME = 16;
	LOGIN_ACTION_TELEMETRY_IDS_EXIT_SUPERAWESOME = 17;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_SUPERAWESOME_REGISTER = 18;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_SUPERAWESOME_FORGOT_PASSWORD = 19;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_SUPERAWESOME_SIGN_IN = 20;
	LOGIN_ACTION_TELEMETRY_IDS_CANCEL_SUPERAWESOME_SIGN_IN = 21;
	LOGIN_ACTION_TELEMETRY_IDS_COMPLETE_SUPERAWESOME_SIGN_IN = 22;
	LOGIN_ACTION_TELEMETRY_IDS_EXIT_NEW_PLAYER = 23;
	LOGIN_ACTION_TELEMETRY_IDS_EXIT_EXISTING_PLAYER = 24;
	LOGIN_ACTION_TELEMETRY_IDS_LOGIN_STARTED = 25;
	LOGIN_ACTION_TELEMETRY_IDS_CLICK_APPLE = 26;
	LOGIN_ACTION_TELEMETRY_IDS_COMPLETE_APPLE = 27;
	LOGIN_ACTION_TELEMETRY_IDS_CANCEL_APPLE = 28;
}

enum MapEventsTelemetryIds {
	MAP_EVENTS_TELEMETRY_IDS_UNDEFINED_MAP_EVENT = 0;
	MAP_EVENTS_TELEMETRY_IDS_ITEM_BAG = 1;
	MAP_EVENTS_TELEMETRY_IDS_MAIN_MENU = 2;
	MAP_EVENTS_TELEMETRY_IDS_POKEDEX = 3;
	MAP_EVENTS_TELEMETRY_IDS_PROFILE = 4;
	MAP_EVENTS_TELEMETRY_IDS_SETTINGS = 5;
	MAP_EVENTS_TELEMETRY_IDS_SHOP_FROM_MAP = 6;
	MAP_EVENTS_TELEMETRY_IDS_GYM = 7;
	MAP_EVENTS_TELEMETRY_IDS_POKESTOP = 8;
	MAP_EVENTS_TELEMETRY_IDS_RESEARCH = 9;
	MAP_EVENTS_TELEMETRY_IDS_COMPASS = 10;
	MAP_EVENTS_TELEMETRY_IDS_NEARBY = 11;
}

enum MapLayer {
	MAP_LAYER_UNDEFINED = 0;
	MAP_LAYER_BOUNDARIES = 1;
	MAP_LAYER_BUILDINGS = 2;
	MAP_LAYER_LANDMASS = 3;
	MAP_LAYER_LANDUSE = 4;
	MAP_LAYER_PLACES = 5;
	MAP_LAYER_POIS = 6;
	MAP_LAYER_ROADS = 7;
	MAP_LAYER_TRANSIT = 8;
	MAP_LAYER_WATER = 9;
	MAP_LAYER_DEBUG_TILE_BOUNDARIES = 10;
}

enum MementoType {
	MEMENTO_POSTCARD = 0;
}

enum Method {
	METHOD_UNSET = 0;
	METHOD_GET_PLAYER = 2;
	METHOD_GET_HOLOHOLO_INVENTORY = 4;
	METHOD_DOWNLOAD_SETTINGS = 5;
	METHOD_DOWNLOAD_ITEM_TEMPLATES = 6;
	METHOD_DOWNLOAD_REMOTE_CONFIG_VERSION = 7;
	METHOD_REGISTER_BACKGROUND_DEVICE = 8;
	METHOD_GET_PLAYER_DAY = 9;
	METHOD_ACKNOWLEDGE_PUNISHMENT = 10;
	METHOD_GET_SERVER_TIME = 11;
	METHOD_GET_LOCAL_TIME = 12;
	METHOD_FORT_SEARCH = 101;
	METHOD_ENCOUNTER = 102;
	METHOD_CATCH_POKEMON = 103;
	METHOD_FORT_DETAILS = 104;
	METHOD_GET_MAP_OBJECTS = 106;
	METHOD_FORT_DEPLOY_POKEMON = 110;
	METHOD_FORT_RECALL_POKEMON = 111;
	METHOD_RELEASE_POKEMON = 112;
	METHOD_USE_ITEM_POTION = 113;
	METHOD_USE_ITEM_CAPTURE = 114;
	METHOD_USE_ITEM_FLEE = 115;
	METHOD_USE_ITEM_REVIVE = 116;
	METHOD_GET_PLAYER_PROFILE = 121;
	METHOD_EVOLVE_POKEMON = 125;
	METHOD_GET_HATCHED_EGGS = 126;
	METHOD_ENCOUNTER_TUTORIAL_COMPLETE = 127;
	METHOD_LEVEL_UP_REWARDS = 128;
	METHOD_CHECK_AWARDED_BADGES = 129;
	METHOD_RECYCLE_INVENTORY_ITEM = 137;
	METHOD_COLLECT_DAILY_BONUS = 138;
	METHOD_USE_ITEM_XP_BOOST = 139;
	METHOD_USE_ITEM_EGG_INCUBATOR = 140;
	METHOD_USE_INCENSE = 141;
	METHOD_GET_INCENSE_POKEMON = 142;
	METHOD_INCENSE_ENCOUNTER = 143;
	METHOD_ADD_FORT_MODIFIER = 144;
	METHOD_DISK_ENCOUNTER = 145;
	METHOD_UPGRADE_POKEMON = 147;
	METHOD_SET_FAVORITE_POKEMON = 148;
	METHOD_NICKNAME_POKEMON = 149;
	METHOD_EQUIP_BADGE = 150;
	METHOD_SET_CONTACT_SETTINGS = 151;
	METHOD_SET_BUDDY_POKEMON = 152;
	METHOD_GET_BUDDY_WALKED = 153;
	METHOD_USE_ITEM_ENCOUNTER = 154;
	METHOD_GYM_DEPLOY = 155;
	METHOD_GYM_GET_INFO = 156;
	METHOD_GYM_START_SESSION = 157;
	METHOD_GYM_BATTLE_ATTACK = 158;
	METHOD_JOIN_LOBBY = 159;
	METHOD_LEAVE_LOBBY = 160;
	METHOD_SET_LOBBY_VISIBILITY = 161;
	METHOD_SET_LOBBY_POKEMON = 162;
	METHOD_GET_RAID_DETAILS = 163;
	METHOD_GYM_FEED_POKEMON = 164;
	METHOD_START_RAID_BATTLE = 165;
	METHOD_ATTACK_RAID = 166;
	METHOD_AWARD_POKECOIN = 167;
	METHOD_USE_ITEM_STARDUST_BOOST = 168;
	METHOD_REASSIGN_PLAYER = 169;
	METHOD_REDEEM_POI_PASSCODE = 170;
	METHOD_CONVERT_CANDY_TO_XL_CANDY = 171;
	METHOD_IS_SKU_AVAILABLE = 172;
	METHOD_GET_ASSET_DIGEST = 300;
	METHOD_GET_DOWNLOAD_URLS = 301;
	METHOD_GET_ASSET_VERSION = 302;
	METHOD_CLAIM_CODENAME = 403;
	METHOD_SET_AVATAR = 404;
	METHOD_SET_PLAYER_TEAM = 405;
	METHOD_MARK_TUTORIAL_COMPLETE = 406;
	METHOD_UPDATE_PERFORMANCE_METRICS = 407;
	METHOD_CHECK_CHALLENGE = 600;
	METHOD_VERIFY_CHALLENGE = 601;
	METHOD_ECHO = 666;
	METHOD_SFIDA_REGISTRATION = 800;
	METHOD_SFIDA_ACTION_LOG = 801;
	METHOD_SFIDA_CERTIFICATION = 802;
	METHOD_SFIDA_UPDATE = 803;
	METHOD_SFIDA_ACTION = 804;
	METHOD_SFIDA_DOWSER = 805;
	METHOD_SFIDA_CAPTURE = 806;
	METHOD_LIST_AVATAR_CUSTOMIZATIONS = 807;
	METHOD_SET_AVATAR_ITEM_AS_VIEWED = 808;
	METHOD_GET_INBOX = 809;
	METHOD_LIST_GYM_BADGES = 811;
	METHOD_GET_GYM_BADGE_DETAILS = 812;
	METHOD_USE_ITEM_MOVE_REROLL = 813;
	METHOD_USE_ITEM_RARE_CANDY = 814;
	METHOD_AWARD_FREE_RAID_TICKET = 815;
	METHOD_FETCH_ALL_NEWS = 816;
	METHOD_MARK_READ_NEWS_ARTICLE = 817;
	METHOD_GET_PLAYER_DISPLAY_INFO = 818;
	METHOD_BELUGA_TRANSACTION_START = 819;
	METHOD_BELUGA_TRANSACTION_COMPLETE = 820;
	METHOD_SFIDA_ASSOCIATE = 822;
	METHOD_SFIDA_CHECK_PAIRING = 823;
	METHOD_SFIDA_DISASSOCIATE = 824;
	METHOD_WAINA_SUBMIT_SLEEP_DATA = 826;
	METHOD_GET_NEW_QUESTS = 900;
	METHOD_GET_QUEST_DETAILS = 901;
	METHOD_COMPLETE_QUEST = 902;
	METHOD_REMOVE_QUEST = 903;
	METHOD_QUEST_ENCOUNTER = 904;
	METHOD_COMPLETE_QUEST_STAMP_CARD = 905;
	METHOD_PROGRESS_QUEST = 906;
	METHOD_START_QUEST_INCIDENT = 907;
	METHOD_READ_QUEST_DIALOG = 908;
	METHOD_SEND_GIFT = 950;
	METHOD_OPEN_GIFT = 951;
	METHOD_GIFT_DETAILS = 952;
	METHOD_DELETE_GIFT = 953;
	METHOD_SAVE_PLAYER_SNAPSHOT = 954;
	METHOD_GET_FRIENDSHIP_MILESTONE_REWARDS = 955;
	METHOD_CHECK_SEND_GIFT = 956;
	METHOD_SET_FRIEND_NICKNAME = 957;
	METHOD_DELETE_GIFT_FROM_INVENTORY = 958;
	METHOD_SAVE_SOCIAL_PLAYER_SETTINGS = 959;
	METHOD_SHARE_EX_RAID_PASS = 960;
	METHOD_CHECK_SHARE_EX_RAID_PASS = 961;
	METHOD_DECLINE_SHARED_EX_RAID_PASS = 962;
	METHOD_OPEN_TRADING = 970;
	METHOD_UPDATE_TRADING = 971;
	METHOD_CONFIRM_TRADING = 972;
	METHOD_CANCEL_TRADING = 973;
	METHOD_GET_TRADING = 974;
	METHOD_GET_FITNESS_REWARDS = 980;
	METHOD_GET_COMBAT_PLAYER_PROFILE = 990;
	METHOD_GENERATE_COMBAT_CHALLENGE_ID = 991;
	METHOD_CREATE_COMBAT_CHALLENGE = 992;
	METHOD_OPEN_COMBAT_CHALLENGE = 993;
	METHOD_GET_COMBAT_CHALLENGE = 994;
	METHOD_ACCEPT_COMBAT_CHALLENGE = 995;
	METHOD_DECLINE_COMBAT_CHALLENGE = 996;
	METHOD_CANCEL_COMBAT_CHALLENGE = 997;
	METHOD_SUBMIT_COMBAT_CHALLENGE_POKEMONS = 998;
	METHOD_SAVE_COMBAT_PLAYER_PREFERENCES = 999;
	METHOD_OPEN_COMBAT_SESSION = 1000;
	METHOD_UPDATE_COMBAT = 1001;
	METHOD_QUIT_COMBAT = 1002;
	METHOD_GET_COMBAT_RESULTS = 1003;
	METHOD_UNLOCK_SPECIAL_MOVE = 1004;
	METHOD_GET_NPC_COMBAT_REWARDS = 1005;
	METHOD_COMBAT_FRIEND_REQUEST = 1006;
	METHOD_OPEN_NPC_COMBAT_SESSION = 1007;
	METHOD_START_TUTORIAL_ACTION = 1008;
	METHOD_GET_TUTORIAL_EGG_ACTION = 1009;
	METHOD_SEND_PROBE = 1020;
	METHOD_PROBE_DATA = 1021;
	METHOD_COMBAT_DATA = 1022;
	METHOD_COMBAT_CHALLENGE_DATA = 1023;
	METHOD_CHECK_PHOTOBOMB = 1101;
	METHOD_CONFIRM_PHOTOBOMB = 1102;
	METHOD_GET_PHOTOBOMB = 1103;
	METHOD_ENCOUNTER_PHOTOBOMB = 1104;
	METHOD_GET_SIGNED_GMAP_URL_DEPRECATED = 1105;
	METHOD_CHANGE_TEAM = 1106;
	METHOD_GET_WEB_TOKEN = 1107;
	METHOD_COMPLETE_SNAPSHOT_SESSION = 1110;
	METHOD_COMPLETE_WILD_SNAPSHOT_SESSION = 1111;
	METHOD_START_INCIDENT = 1200;
	METHOD_INVASION_COMPLETE_DIALOGUE = 1201;
	METHOD_INVASION_OPEN_COMBAT_SESSION = 1202;
	METHOD_INVASION_BATTLE_UPDATE = 1203;
	METHOD_INVASION_ENCOUNTER = 1204;
	METHOD_PURIFY_POKEMON = 1205;
	METHOD_GET_ROCKET_BALLOON = 1206;
	METHOD_START_ROCKET_BALLOON_INCIDENT = 1207;
	METHOD_VS_SEEKER_START_MATCHMAKING = 1300;
	METHOD_CANCEL_MATCHMAKING = 1301;
	METHOD_GET_MATCHMAKING_STATUS = 1302;
	METHOD_COMPLETE_VS_SEEKER_AND_RESTART_CHARGING = 1303;
	METHOD_GET_VS_SEEKER_STATUS = 1304;
	METHOD_COMPLETE_COMBAT_COMPETITIVE_SEASON_ACTION = 1305;
	METHOD_CLAIM_VS_SEEKER_REWARDS = 1306;
	METHOD_VS_SEEKER_REWARD_ENCOUNTER = 1307;
	METHOD_ACTIVATE_VS_SEEKER = 1308;
	METHOD_GET_BUDDY_MAP = 1350;
	METHOD_GET_BUDDY_STATS = 1351;
	METHOD_FEED_BUDDY = 1352;
	METHOD_OPEN_BUDDY_GIFT = 1353;
	METHOD_PET_BUDDY = 1354;
	METHOD_GET_BUDDY_HISTORY = 1355;
	METHOD_UPDATE_ROUTE_DRAFT = 1400;
	METHOD_GET_MAP_FORTS = 1401;
	METHOD_SUBMIT_ROUTE_DRAFT = 1402;
	METHOD_GET_PUBLISHED_ROUTES = 1403;
	METHOD_START_ROUTE = 1404;
	METHOD_GET_ROUTES = 1405;
	METHOD_PROGRESS_ROUTE = 1406;
	METHOD_PROCESS_ROUTE_WAYPOINT_INTERACTION = 1407;
	METHOD_PROCESS_ROUTE_TAPPABLE = 1408;
	METHOD_LIST_ROUTE_BADGES = 1409;
	METHOD_CANCEL_ROUTE = 1410;
	METHOD_LIST_ROUTE_STAMPS = 1411;
	METHOD_CREATE_BUDDY_MUTLIPLAYER_SESSION = 1456;
	METHOD_JOIN_BUDDY_MULTIPLAYER_SESSION = 1457;
	METHOD_LEAVE_BUDDY_MULTIPLAYER_SESSION = 1458;
	METHOD_GET_TODAY_VIEW = 1501;
	METHOD_MEGA_EVOLVE_POKEMON = 1502;
	METHOD_REMOTE_GIFT_PING = 1503;
	METHOD_SEND_RAID_INVITATION = 1504;
	METHOD_GET_DAILY_ENCOUNTER = 1601;
	METHOD_DAILY_ENCOUNTER = 1602;
	METHOD_OPEN_SPONSORED_GIFT = 1650;
	METHOD_SPONSORED_GIFT_REPORT_INTERACTION = 1651;
	METHOD_SAVE_PLAYER_PREFERENCES = 1652;
	METHOD_PROFANITY_CHECK = 1653;
	METHOD_GET_TIMED_GROUP_CHALLENGE = 1700;
	METHOD_GET_NINTENDO_ACCOUNT = 1710;
	METHOD_UNLINK_NINTENDO_ACCOUNT = 1711;
	METHOD_GET_NINTENDO_OAUTH2_URL = 1712;
	METHOD_TRANSFER_TO_POKEMON_HOME = 1713;
	METHOD_REPORT_AD_FEEDBACK = 1716;
	METHOD_CREATE_POKEMON_TAG = 1717;
	METHOD_DELETE_POKEMON_TAG = 1718;
	METHOD_EDIT_POKEMON_TAG = 1719;
	METHOD_SET_POKEMON_TAGS_FOR_POKEMON = 1720;
	METHOD_GET_POKEMON_TAGS = 1721;
	METHOD_CHANGE_POKEMON_FORM = 1722;
	METHOD_CHOOSE_EVENT_VARIANT = 1723;
	METHOD_GET_REFERRAL_CODE = 1800;
	METHOD_ADD_REFERRER = 1801;
	METHOD_SEND_FRIEND_INVITE_VIA_REFERRAL_CODE = 1802;
	METHOD_GET_MILESTONES = 1803;
	METHOD_MARK_MILESTONES_AS_VIEWED = 1804;
	METHOD_GET_MILESTONES_PREVIEW = 1805;
	METHOD_COMPLETE_MILESTONE = 1806;
	METHOD_GET_GEOFENCED_AD = 1820;
	METHOD_POWER_UP_POKESTOP_ENCOUNTER = 1900;
	METHOD_CREATE_POSTCARD = 1910;
	METHOD_UPDATE_POSTCARD = 1911;
	METHOD_DELETE_POSTCARD = 1912;
	METHOD_GET_MEMENTO_LIST = 1913;
	METHOD_UPLOAD_RAID_CLIENT_LOG = 1914;
	METHOD_SKIP_ENTER_REFERRAL_CODE = 1915;
	METHOD_UPLOAD_COMBAT_CLIENT_LOG = 1916;
	METHOD_COMBAT_SYNC_SERVER_OFFSET = 1917;
	METHOD_CHECK_GIFTING_ELIGIBILITY = 2000;
	METHOD_REDEEM_TICKET_GIFT_FOR_FRIEND = 2001;
}

enum NewsPageTelemetryIds {
	NEWS_PAGE_TELEMETRY_IDS_UNDEFINED_NEWS_EVENT = 0;
	NEWS_PAGE_TELEMETRY_IDS_NEWS_VIEWED = 1;
	NEWS_PAGE_TELEMETRY_IDS_NEWS_DISMISSED = 2;
	NEWS_PAGE_TELEMETRY_IDS_NEWS_LINK_CLICKED = 3;
	NEWS_PAGE_TELEMETRY_IDS_NEWS_UPDATED_APP = 4;
}

enum NotificationState {
	NOTIFICATION_STATE_UNSET_STATE = 0;
	NOTIFICATION_STATE_VIEWED = 1;
}

enum ObSuggestionsEntry {
	SUGGESTION_ENTRY_UNDEFINED_USERNAME_ENTRY_MODE = 0;
	SUGGESTION_ENTRY_NEW_USER = 1;
	SUGGESTION_ENTRY_CHANGE_BANNED_NAME = 2;
	SUGGESTION_ENTRY_EXISTING_USER_CHANGE_NAME = 3;
}

enum OnboardingArStatus {
	ONBOARDING_AR_STATUS_UNSET = 0;
	ONBOARDING_AR_STATUS_OFF = 1;
	ONBOARDING_AR_STATUS_AR_STANDARD = 2;
	ONBOARDING_AR_STATUS_AR_PLUS = 3;
}

enum OnboardingEventIds {
	ONBOARDING_EVENT_IDS_TOS_ACCEPTED = 0;
	ONBOARDING_EVENT_IDS_PRIVACY_ACCEPTED = 1;
	ONBOARDING_EVENT_IDS_CONVERSATION = 2;
	ONBOARDING_EVENT_IDS_ENCOUNTER_ENTER = 3;
	ONBOARDING_EVENT_IDS_ENCOUNTER_LEAVE = 4;
	ONBOARDING_EVENT_IDS_AVATAR_SELECTION = 5;
	ONBOARDING_EVENT_IDS_AVATAR_GENDER = 6;
	ONBOARDING_EVENT_IDS_AVATAR_GENDER_CHOSEN = 7;
	ONBOARDING_EVENT_IDS_AVATAR_HEAD_CHOSEN = 8;
	ONBOARDING_EVENT_IDS_AVATAR_BODY_CHOSEN = 9;
	ONBOARDING_EVENT_IDS_AVATAR_TRY_AGAIN = 10;
	ONBOARDING_EVENT_IDS_AVATAR_ACCEPTED = 11;
	ONBOARDING_EVENT_IDS_NAME_ENTRY = 12;
	ONBOARDING_EVENT_IDS_NAME_UNAVAILABLE = 13;
	ONBOARDING_EVENT_IDS_NAME_ACCEPTED = 14;
	ONBOARDING_EVENT_IDS_POKEDEX_TUTORIAL_STARTED = 15;
	ONBOARDING_EVENT_IDS_POKEDEX_TUTORIAL_INFO_PANEL_EXIT_PRESSED = 16;
	ONBOARDING_EVENT_IDS_POKEDEX_EXIT_PRESSED = 17;
	ONBOARDING_EVENT_IDS_EGG_TUTORIAL_STARTED = 18;
	ONBOARDING_EVENT_IDS_EGG_TUTORIAL_PRESS = 19;
	ONBOARDING_EVENT_IDS_EGG_TUTORIAL_FINISHED = 20;
	ONBOARDING_EVENT_IDS_POKESTOP_LETSGO = 21;
	ONBOARDING_EVENT_IDS_WILD_POKEMON_ENCOUNTER_ENTERED = 22;
	ONBOARDING_EVENT_IDS_WILD_POKEMON_CAUGHT = 23;
	ONBOARDING_EVENT_IDS_AR_STANDARD_ENABLED = 24;
	ONBOARDING_EVENT_IDS_AR_STANDARD_REJECTED = 25;
	ONBOARDING_EVENT_IDS_AR_PLUS_ENABLED = 26;
	ONBOARDING_EVENT_IDS_AR_PLUS_REJECTED = 27;
	ONBOARDING_EVENT_IDS_SEE_TOS_MODAL = 28;
	ONBOARDING_EVENT_IDS_TOS_DECLINED = 29;
	ONBOARDING_EVENT_IDS_SEE_PRIVACY_MODAL = 30;
	ONBOARDING_EVENT_IDS_INTRO_DIALOG_COMPLETE = 31;
	ONBOARDING_EVENT_IDS_CATCH_DIALOG_COMPLETE = 32;
	ONBOARDING_EVENT_IDS_USERNAME_DIALOG_COMPLETE = 33;
	ONBOARDING_EVENT_IDS_POKESTOP_DIALOG_COMPLETE = 34;
	ONBOARDING_EVENT_IDS_ACCEPTED_TOS = 35;
}

enum OnboardingPathIds {
	ONBOARDING_PATH_IDS_V1 = 0;
	ONBOARDING_PATH_IDS_V2 = 1;
	ONBOARDING_PATH_IDS_VERSION_1 = 2;
}

enum PermissionContextTelemetryIds {
	PERMISSION_CONTEXT_TELEMETRY_IDS_UNDEFINED_PERMISSION_CONTEXT = 0;
	PERMISSION_CONTEXT_TELEMETRY_IDS_EGG_HATCH = 1;
	PERMISSION_CONTEXT_TELEMETRY_IDS_BUDDY_CANDY_FOUND = 2;
	PERMISSION_CONTEXT_TELEMETRY_IDS_PLAYER_PROFILE_CLICKED = 3;
	PERMISSION_CONTEXT_TELEMETRY_IDS_SMART_WATCH_INSTALLED = 4;
	PERMISSION_CONTEXT_TELEMETRY_IDS_SFIDA_SESSION_STARTED = 5;
	PERMISSION_CONTEXT_TELEMETRY_IDS_SETTINGS_TOGGLE = 6;
	PERMISSION_CONTEXT_TELEMETRY_IDS_NEARBY_PANEL_OPENED = 7;
	PERMISSION_CONTEXT_TELEMETRY_IDS_FTUE_PROMPT = 8;
	PERMISSION_CONTEXT_TELEMETRY_IDS_LEVEL_UP_PROMPT = 9;
}

enum PermissionFlowStepTelemetryIds {
	PERMISSION_FLOW_STEP_TELEMETRY_IDS_UNDEFINED_PERMISSION_FLOW_STEP = 0;
	PERMISSION_FLOW_STEP_TELEMETRY_IDS_INITIAL_PROMPT = 1;
	PERMISSION_FLOW_STEP_TELEMETRY_IDS_FITNESS_PERMISSION = 2;
	PERMISSION_FLOW_STEP_TELEMETRY_IDS_LOCATION_PERMISSION = 3;
	PERMISSION_FLOW_STEP_TELEMETRY_IDS_ACTIVITY_PERMISSIONS = 4;
}

enum PermissionStatus {
	PERMISSION_STATUS_granted = 0;
	PERMISSION_STATUS_denied = 1;
}

enum PermissionType {
	PERMISSION_TYPE_UNSET = 0;
	PERMISSION_TYPE_READ_CONTACTS = 1;
}

enum Platform {
	PLATFORM_UNSET = 0;
	PLATFORM_IOS = 1;
	PLATFORM_ANDROID = 2;
	PLATFORM_OSX = 3;
	PLATFORM_WINDOWS = 4;
	PLATFORM_APPLE_WATCH = 5;
}

enum PlayerAvatarType {
	PLAYER_AVATAR_MALE = 0;
	PLAYER_AVATAR_FEMALE = 1;
}

enum PlayerSubmissionAction {
	PLAYER_SUBMISSION_ACTION_UNKNOWN_GAME_POI_ACTION = 0;
	PLAYER_SUBMISSION_ACTION_ADD_NEW_POI = 620000;
	PLAYER_SUBMISSION_ACTION_GET_AVAILABLE_SUBMISSIONS = 620001;
	PLAYER_SUBMISSION_ACTION_GET_SIGNED_URL_FOR_PHOTO_UPLOAD = 620002;
	PLAYER_SUBMISSION_ACTION_GET_PLAYER_SUBMISSION_VALIDATION_SETTINGS = 620003;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_IMAGE = 620100;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE = 620101;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_LOCATION_UPDATE = 620102;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST = 620103;
	PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_REPORT = 620104;
	PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_LOCATION_UPDATE = 620105;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_CATEGORY_VOTE = 620106;
	PLAYER_SUBMISSION_ACTION_ADD_NEW_ROUTE = 620200;
	PLAYER_SUBMISSION_ACTION_GENERATE_GMAP_SIGNED_URL = 620300;
	PLAYER_SUBMISSION_ACTION_GET_GMAP_SETTINGS = 620301;
	PLAYER_SUBMISSION_ACTION_SUBMIT_POI_AR_VIDEO_METADATA = 620400;
	PLAYER_SUBMISSION_ACTION_GET_GRAPESHOT_FILE_UPLOAD_URL = 620401;
	PLAYER_SUBMISSION_ACTION_ASYNC_FILE_UPLOAD_COMPLETE = 620402;
	PLAYER_SUBMISSION_ACTION_GET_AR_MAPPING_SETTINGS = 620403;
	PLAYER_SUBMISSION_ACTION_GET_IMAGES_FOR_POI = 620500;
	PLAYER_SUBMISSION_ACTION_SUBMIT_PLAYER_IMAGE_VOTE_FOR_POI = 620501;
	PLAYER_SUBMISSION_ACTION_GET_IMAGE_GALLERY_SETTINGS = 620502;
	PLAYER_SUBMISSION_ACTION_GET_MAP_DATA = 620600;
	PLAYER_SUBMISSION_ACTION_GET_POIS_IN_RADIUS = 620601;
}

enum PlayerSubmissionTypeProto {
	PLAYER_SUBMISSION_TYPE_PROTO_TYPE_UNSPECIFIED = 0;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_SUBMISSION = 1;
	PLAYER_SUBMISSION_TYPE_PROTO_ROUTE_SUBMISSION = 2;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_IMAGE_SUBMISSION = 3;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_TEXT_METADATA_UPDATE = 4;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_LOCATION_UPDATE = 5;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_TAKEDOWN_REQUEST = 6;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_AR_VIDEO_SUBMISSION = 7;
	PLAYER_SUBMISSION_TYPE_PROTO_SPONSOR_POI_REPORT = 8;
	PLAYER_SUBMISSION_TYPE_PROTO_SPONSOR_POI_LOCATION_UPDATE = 9;
	PLAYER_SUBMISSION_TYPE_PROTO_POI_CATEGORY_VOTE_SUBMISSION = 10;
}

enum PoiImageType {
	POI_IMAGE_TYPE_UNSET = 0;
	POI_IMAGE_TYPE_MAIN = 1;
	POI_IMAGE_TYPE_SURROUNDING = 2;
}

enum PoiInvalidReason {
	POI_INVALID_REASON_INVALID_REASON_UNSPECIFIED = 0;
	POI_INVALID_REASON_NO_PEDESTRIAN_ACCESS = 1;
	POI_INVALID_REASON_OBSTRUCTS_EMERGENCY_SERVICES = 2;
	POI_INVALID_REASON_PRIVATE_RESIDENTIAL_PROPERTY = 3;
	POI_INVALID_REASON_SCHOOL = 4;
	POI_INVALID_REASON_PERMANENTLY_REMOVED = 5;
	POI_INVALID_REASON_DUPLICATE = 6;
}

enum PokedexCategory {
	POKEDEX_CATEGORY_UNSET = 0;
	POKEDEX_CATEGORY_ALL = 1;
	POKEDEX_CATEGORY_MEGA = 2;
	POKEDEX_CATEGORY_SHINY = 11;
	POKEDEX_CATEGORY_LUCKY = 12;
	POKEDEX_CATEGORY_THREE_STAR = 13;
	POKEDEX_CATEGORY_FOUR_STAR = 14;
	POKEDEX_CATEGORY_SHADOW = 15;
	POKEDEX_CATEGORY_PURIFIED = 16;
	POKEDEX_CATEGORY_COSTUME = 17;
	POKEDEX_CATEGORY_SHINY_THREE_STAR = 101;
	POKEDEX_CATEGORY_SHINY_FOUR_STAR = 102;
}

enum PokemonBadge {
	POKEMON_BADGE_UNSET = 0;
	POKEMON_BADGE_BEST_BUDDY = 1;
}

enum PokemonCreateContext {
	CREATE_CONTEXT_WILD = 0 [deprecated = true];
	CREATE_CONTEXT_EGG = 1 [deprecated = true];
	CREATE_CONTEXT_EVOLVE = 2 [deprecated = true];
}

enum PokemonGoPlusIds {
	POKEMON_GO_PLUS_IDS_UNDEFINED_POKEMON_GO_PLUS_EVENT = 0;
	POKEMON_GO_PLUS_IDS_CANNOT_CONNECT_TO_PGP = 1;
	POKEMON_GO_PLUS_IDS_REGISTERING_PGP_FAILED = 2;
	POKEMON_GO_PLUS_IDS_REGISTERING_RETRY = 3;
	POKEMON_GO_PLUS_IDS_CONNECTION_SUCCESS = 4;
	POKEMON_GO_PLUS_IDS_PGP_DISCONNECTED_BY_USER = 5;
	POKEMON_GO_PLUS_IDS_PGP_DISCONNECTED_BY_TIMEOUT = 6;
	POKEMON_GO_PLUS_IDS_PGP_DISCONNECTED_BY_ERROR = 7;
	POKEMON_GO_PLUS_IDS_PGP_LOW_BATTERY = 8;
	POKEMON_GO_PLUS_IDS_BLUETOOTH_SENT_ERROR = 9;
	POKEMON_GO_PLUS_IDS_PGP_SEEN_BY_DEVICE = 10;
	POKEMON_GO_PLUS_IDS_POKEMON_CAUGHT = 11;
	POKEMON_GO_PLUS_IDS_POKEMON_NOT_CAUGHT = 12;
	POKEMON_GO_PLUS_IDS_POKEMON_NOT_CAUGHT_DUE_ERROR = 13;
	POKEMON_GO_PLUS_IDS_POKESTOP_SPUN = 14;
	POKEMON_GO_PLUS_IDS_POKESTOP_NOT_SPUN_DUE_ERROR = 15;
}

enum PokemonHomeTelemetryIds {
	POKEMON_HOME_TELEMETRY_IDS_UNDEFINED_POKEMON_HOME_EVENT = 0;
	POKEMON_HOME_TELEMETRY_IDS_OPEN_SETTINGS = 1;
	POKEMON_HOME_TELEMETRY_IDS_SIGN_IN = 2;
	POKEMON_HOME_TELEMETRY_IDS_SELECTED_POKEMON = 3;
}

enum PokemonInventoryTelemetryIds {
	POKEMON_INVENTORY_TELEMETRY_IDS_UNDEFINED_POKEMON_INVENTORY_EVENT = 0;
	POKEMON_INVENTORY_TELEMETRY_IDS_OPEN = 1;
	POKEMON_INVENTORY_TELEMETRY_IDS_SORTING_CHANGE = 2;
	POKEMON_INVENTORY_TELEMETRY_IDS_FILTER = 3;
}

enum PokemonTagColor {
	POKEMON_TAG_COLOR_UNSET = 0;
	POKEMON_TAG_COLOR_BLUE = 1;
	POKEMON_TAG_COLOR_GREEN = 2;
	POKEMON_TAG_COLOR_PURPLE = 3;
	POKEMON_TAG_COLOR_YELLOW = 4;
	POKEMON_TAG_COLOR_RED = 5;
	POKEMON_TAG_COLOR_ORANGE = 6;
	POKEMON_TAG_COLOR_GREY = 7;
	POKEMON_TAG_COLOR_BLACK = 8;
}

enum PostcardSource {
	POSTCARD_SOURCE_UNKNOWN = 0;
	POSTCARD_SOURCE_SELF = 1;
	POSTCARD_SOURCE_FRIEND = 2;
	POSTCARD_SOURCE_FRIEND_ANONYMIZED = 3;
	POSTCARD_SOURCE_FRIEND_ANONYMIZED_FROM_DELETION_OR_UNFRIEND = 4;
}

enum ProfilePageTelemetryIds {
	PROFILE_PAGE_TELEMETRY_IDS_UNDEFINED_PROFILE_PAGE = 0;
	PROFILE_PAGE_TELEMETRY_IDS_SHOP_FROM_PROFILE = 1;
	PROFILE_PAGE_TELEMETRY_IDS_LOG = 2;
	PROFILE_PAGE_TELEMETRY_IDS_SET_BUDDY = 3;
	PROFILE_PAGE_TELEMETRY_IDS_CUSTOMIZE_AVATAR = 4;
}

enum PushGatewayTelemetryIds {
	PUSH_GATEWAY_TELEMETRY_IDS_UNDEFINED_PUSH_GATEWAY_EVENT = 0;
	PUSH_GATEWAY_TELEMETRY_IDS_WEB_SOCKET_STARTED = 1;
	PUSH_GATEWAY_TELEMETRY_IDS_WEB_SOCKET_FAILED = 2;
	PUSH_GATEWAY_TELEMETRY_IDS_WEB_SOCKET_TIMEOUT = 3;
	PUSH_GATEWAY_TELEMETRY_IDS_NEW_INBOX_DOWNSTREAM = 4;
}

enum PushNotificationTelemetryIds {
	PUSH_NOTIFICATION_TELEMETRY_IDS_UNDEFINED_PUSH_NOTIFICATION_EVENT = 0;
	PUSH_NOTIFICATION_TELEMETRY_IDS_OPEN_APP = 1;
}

enum QuestType {
	QUEST_UNSET = 0;
	QUEST_FIRST_CATCH_OF_THE_DAY = 1;
	QUEST_FIRST_POKESTOP_OF_THE_DAY = 2;
	QUEST_MULTI_PART = 3;
	QUEST_CATCH_POKEMON = 4;
	QUEST_SPIN_POKESTOP = 5;
	QUEST_HATCH_EGG = 6;
	QUEST_COMPLETE_GYM_BATTLE = 7;
	QUEST_COMPLETE_RAID_BATTLE = 8;
	QUEST_COMPLETE_QUEST = 9;
	QUEST_TRANSFER_POKEMON = 10;
	QUEST_FAVORITE_POKEMON = 11;
	QUEST_AUTOCOMPLETE = 12;
	QUEST_USE_BERRY_IN_ENCOUNTER = 13;
	QUEST_UPGRADE_POKEMON = 14;
	QUEST_EVOLVE_POKEMON = 15;
	QUEST_LAND_THROW = 16;
	QUEST_GET_BUDDY_CANDY = 17;
	QUEST_BADGE_RANK = 18;
	QUEST_PLAYER_LEVEL = 19;
	QUEST_JOIN_RAID = 20;
	QUEST_COMPLETE_BATTLE = 21;
	QUEST_ADD_FRIEND = 22;
	QUEST_TRADE_POKEMON = 23;
	QUEST_SEND_GIFT = 24;
	QUEST_EVOLVE_INTO_POKEMON = 25;
	QUEST_COMPLETE_COMBAT = 27;
	QUEST_TAKE_SNAPSHOT = 28;
	QUEST_BATTLE_TEAM_ROCKET = 29;
	QUEST_PURIFY_POKEMON = 30;
	QUEST_FIND_TEAM_ROCKET = 31;
	QUEST_FIRST_GRUNT_OF_THE_DAY = 32;
	QUEST_BUDDY_FEED = 33;
	QUEST_BUDDY_EARN_AFFECTION_POINTS = 34;
	QUEST_BUDDY_PET = 35;
	QUEST_BUDDY_LEVEL = 36;
	QUEST_BUDDY_WALK = 37;
	QUEST_BUDDY_YATTA = 38;
	QUEST_USE_INCENSE = 39;
	QUEST_BUDDY_FIND_SOUVENIR = 40;
	QUEST_COLLECT_AS_REWARDS = 41;
	QUEST_WALK = 42;
	QUEST_MEGA_EVOLVE_POKEMON = 43;
	QUEST_GET_STARDUST = 44;
	QUEST_MINI_COLLECTION = 45;
	QUEST_GEOTARGETED_AR_SCAN = 46;
	QUEST_BUDDY_EVOLUTION_WALK = 50;
	QUEST_GBL_RANK = 51;
	QUEST_CHARGE_ATTACK = 53;
	QUEST_CHANGE_POKEMON_FORM = 54;
	QUEST_BATTLE_EVENT_NPC = 55;
	QUEST_EARN_FORT_POWER_UP_POINTS = 56;
	QUEST_TAKE_WILD_SNAPSHOT = 57;
	QUEST_USE_POKEMON_ITEM = 58;
	QUEST_OPEN_GIFT = 59;
	QUEST_EARN_XP = 60;
	QUEST_BATTLE_PLAYER_TEAM_LEADER = 61;
}

enum RaidLevel {
	RAID_LEVEL_UNSET = 0;
	RAID_LEVEL_1 = 1;
	RAID_LEVEL_2 = 2;
	RAID_LEVEL_3 = 3;
	RAID_LEVEL_4 = 4;
	RAID_LEVEL_5 = 5;
	RAID_LEVEL_MEGA = 6;
	RAID_LEVEL_MEGA_5 = 7;
	RAID_LEVEL_ULTRA_BEAST = 8;
}

enum RaidLocationRequirement {
	RAID_LOCATION_REQUERIMENT_BOTH = 0;
	RAID_LOCATION_REQUERIMENT_IN_PERSON = 1;
	RAID_LOCATION_REQUERIMENT_REMOTE = 2;
}

enum RaidTelemetryIds {
	RAID_TELEMETRY_IDS_UNDEFINED_RAID_EVENT = 0;
	RAID_TELEMETRY_IDS_APPROACH_ENTER = 1;
	RAID_TELEMETRY_IDS_APPROACH_CLICK_SPINNER = 2;
	RAID_TELEMETRY_IDS_APPROACH_JOIN = 3;
	RAID_TELEMETRY_IDS_APPROACH_TICKET_CONFIRMATION = 4;
	RAID_TELEMETRY_IDS_APPROACH_CLICK_TUTORIAL = 5;
	RAID_TELEMETRY_IDS_APPROACH_CLICK_SHOP = 6;
	RAID_TELEMETRY_IDS_APPROACH_CLICK_INSPECT = 7;
	RAID_TELEMETRY_IDS_LOBBY_ENTER = 8;
	RAID_TELEMETRY_IDS_LOBBY_CLICK_INVENTORY = 9;
	RAID_TELEMETRY_IDS_LOBBY_CLICK_EXIT = 10;
	RAID_TELEMETRY_IDS_LOBBY_TAP_AVATAR = 11;
	RAID_TELEMETRY_IDS_LOBBY_CLICK_REJOIN_BATTLE = 12;
	RAID_TELEMETRY_IDS_LOBBY_CLICK_LOBBY_PUBLIC = 13;
	RAID_TELEMETRY_IDS_MVT_CLICK_SHARE = 14;
}

enum ReferralRole {
	REFERRAL_ROLE_UNDEFINED = 0;
	REFERRAL_ROLE_REFERRER = 1;
	REFERRAL_ROLE_NEW_REFEREE = 2;
	REFERRAL_ROLE_LAPSED_REFEREE = 3;
}

enum ReferralTelemetryIds {
	REFERRAL_TELEMETRY_IDS_UNDEFINED_REFERRAL_EVENT = 0;
	REFERRAL_TELEMETRY_IDS_OPEN_INVITE_PAGE = 1;
	REFERRAL_TELEMETRY_IDS_TAP_SHARE_CODE = 2;
	REFERRAL_TELEMETRY_IDS_TAP_COPY_CODE = 3;
	REFERRAL_TELEMETRY_IDS_TAP_HAVE_REFERRAL_CODE = 4;
	REFERRAL_TELEMETRY_IDS_INPUT_CODE = 5;
	REFERRAL_TELEMETRY_IDS_INPUT_CODE_SUCCESS = 6;
	REFERRAL_TELEMETRY_IDS_MILESTONE_REWARD_CLAIMED = 7;
	REFERRAL_TELEMETRY_IDS_OPEN_APP_THROUGH_DEEP_LINK = 8;
}

enum ReferralTelemetrySource {
	REFERRAL_TELEMETRY_SOURCE_UNDEFINED_SOURCE = 0;
	REFERRAL_TELEMETRY_SOURCE_INVITE_PAGE = 1;
	REFERRAL_TELEMETRY_SOURCE_ADDRESS_BOOK = 2;
}

enum RemoteRaidInviteAcceptSource {
	REMOTE_RAID_INVITE_ACCEPT_SOURCE_UNDEFINED_REMOTE_RAID_INVITE_ACCEPT_SOURCE = 0;
	REMOTE_RAID_INVITE_ACCEPT_SOURCE_REMOTE_RAID_IN_APP = 1;
	REMOTE_RAID_INVITE_ACCEPT_SOURCE_REMOTE_RAID_PUSH_NOTIFICATION = 2;
	REMOTE_RAID_INVITE_ACCEPT_SOURCE_REMOTE_RAID_NEARBY_WINDOW = 3;
}

enum RemoteRaidJoinSource {
	REMOTE_RAID_JOIN_SOURCE_UNDEFINED_REMOTE_RAID_JOIN_SOURCE = 0;
	REMOTE_RAID_JOIN_SOURCE_REMOTE_RAID_USED_MAP = 1;
	REMOTE_RAID_JOIN_SOURCE_REMOTE_RAID_NEARBY_GUI = 2;
	REMOTE_RAID_JOIN_SOURCE_REMOTE_RAID_INVITED_BY_FRIEND = 3;
}

enum RemoteRaidTelemetryIds {
	REMOTE_RAID_TELEMETRY_IDS_UNDEFINED_REMOTE_RAID_EVENT = 0;
	REMOTE_RAID_TELEMETRY_IDS_REMOTE_RAID_LOBBY_ENTER = 1;
	REMOTE_RAID_TELEMETRY_IDS_REMOTE_RAID_INVITE_SENT = 2;
	REMOTE_RAID_TELEMETRY_IDS_REMOTE_RAID_INVITE_ACCEPTED = 3;
	REMOTE_RAID_TELEMETRY_IDS_REMOTE_RAID_INVITE_REJECTED = 4;
}

enum RouteType {
	ROUTE_TYPE_ORGANIC = 0;
	ROUTE_TYPE_OFFICIAL = 1;
}

enum ShareExRaidPassResult {
	SHARE_EX_RAID_PASS_RESULT_SHARE_EX_RAID_PASS_UNSET = 0;
	SHARE_EX_RAID_PASS_RESULT_SHARE_EX_RAID_PASS_SUCCESS = 1;
	SHARE_EX_RAID_PASS_RESULT_ERROR_FRIEND_ALREADY_INVITED_TO_SAME_RAID = 2;
	SHARE_EX_RAID_PASS_RESULT_ERROR_EX_RAID_PASS_ALREADY_SHARED = 3;
	SHARE_EX_RAID_PASS_RESULT_ERROR_FRIEND_ALREADY_HAS_SHARED_EX_PASS_IN_INVENTORY = 4;
	SHARE_EX_RAID_PASS_RESULT_ERROR_TOO_LOW_FRIENDSHIP_LEVEL = 5;
	SHARE_EX_RAID_PASS_RESULT_ERROR_FRIEND_NOT_FOUND = 6;
	SHARE_EX_RAID_PASS_RESULT_ERROR_EX_RAID_ALREADY_STARTED = 7;
	SHARE_EX_RAID_PASS_RESULT_ERROR_EX_RAID_INVALID = 8;
	SHARE_EX_RAID_PASS_RESULT_ERROR_EX_RAID_PASS_NOT_FOUND = 9;
	SHARE_EX_RAID_PASS_RESULT_ERROR_UNKNOWN = 10;
	SHARE_EX_RAID_PASS_RESULT_ERROR_FRIEND_NOT_ELIGIBLE = 11;
}

enum ShoppingPageScrollIds {
	SHOPPING_PAGE_SCROLL_IDS_UNDEFINED_SHOPPING_PAGE_SCROLL_TYPE = 0;
	SHOPPING_PAGE_SCROLL_IDS_LAST_SCROLL = 1;
	SHOPPING_PAGE_SCROLL_IDS_MAX_SCROLL = 2;
}

enum ShoppingPageTelemetryIds {
	SHOPPING_PAGE_TELEMETRY_IDS_UNDEFINED_SHOPPING_PAGE_EVENT = 0;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_CUSTOMIZE_AVATAR = 1;
	SHOPPING_PAGE_TELEMETRY_IDS_QUICK_SHOP_MORE = 2;
	SHOPPING_PAGE_TELEMETRY_IDS_QUICK_SHOP_EXCHANGE = 3;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_SHOP = 4;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_SHOP = 5;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_SKU = 6;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_SKU = 7;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_SKU_EXCHANGE = 8;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_SHOP_AVATAR = 9;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_SHOP_AVATAR = 10;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_AVATAR_TYPE = 11;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_AVATAR_TYPE = 12;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_AVATAR_ITEM = 13;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_AVATAR_ITEM = 14;
	SHOPPING_PAGE_TELEMETRY_IDS_CONFIRM_AVATAR_ITEM = 15;
	SHOPPING_PAGE_TELEMETRY_IDS_CLICK_AVATAR_ITEM_COLOR = 16;
	SHOPPING_PAGE_TELEMETRY_IDS_QUIT_AVATAR_ITEM_COLOR = 17;
	SHOPPING_PAGE_TELEMETRY_IDS_CONFIRM_AVATAR_ITEM_COLOR = 18;
}

enum ShoppingPageTelemetrySource {
	SHOPPING_PAGE_TELEMETRY_SOURCE_UNDEFINED_SHOPPING_PAGE_SOURCE = 0;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_MAIN_MENU = 1;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_POKEMON_BAG_FULL = 2;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_INCUBATOR_SELECTOR = 3;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_POKESTOP_DISK_INTERACTION = 4;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_OPEN_GIFT_BAG_FULL = 5;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BAG_FULL_ENCOUNTER = 6;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BAG_FULL_RAID = 7;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_MORE = 8;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_AVATAR_ITEM = 9;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_POKEMON_ENCOUNTER = 10;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_PLAYER_PROFILE_PAGE = 11;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_STORE_FRONT = 12;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_AVATAR_CUSTOMIZATION_AWARD = 13;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_FIRST_TIME_USER_FLOW = 14;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_BADGE_DETAIL_AVATAR_REWARD = 15;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_DEEP_LINK = 16;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BAG_MISSING_RAID_PASS = 17;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BAG_MISSING_REMOTE_RAID_PASS = 18;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BUDDY_INTERACTION_POFFIN = 100;
	SHOPPING_PAGE_TELEMETRY_SOURCE_SOURCE_QUICK_SHOP_BUDDY_QUICK_FEED_POFFIN = 101;
}

enum SocialAction {
	SOCIAL_ACTION_UNKNOWN_SOCIAL_ACTION = 0;
	SOCIAL_ACTION_SEARCH_PLAYER = 10000;
	SOCIAL_ACTION_SEND_FRIEND_INVITE = 10002;
	SOCIAL_ACTION_CANCEL_FRIEND_INVITE = 10003;
	SOCIAL_ACTION_ACCEPT_FRIEND_INVITE = 10004;
	SOCIAL_ACTION_DECLINE_FRIEND_INVITE = 10005;
	SOCIAL_ACTION_LIST_FRIENDS = 10006;
	SOCIAL_ACTION_LIST_OUTGOING_FRIEND_INVITES = 10007;
	SOCIAL_ACTION_LIST_INCOMING_FRIEND_INVITES = 10008;
	SOCIAL_ACTION_REMOVE_FRIEND = 10009;
	SOCIAL_ACTION_LIST_FRIEND_STATUS = 10010;
	SOCIAL_ACTION_SEND_FACEBOOK_FRIEND_INVITE = 10011;
	SOCIAL_ACTION_IS_MY_FRIEND = 10012;
	SOCIAL_ACTION_CREATE_INVITE_CODE = 10013;
	SOCIAL_ACTION_GET_FACEBOOK_FRIEND_LIST = 10014;
	SOCIAL_ACTION_UPDATE_FACEBOOK_STATUS = 10015;
	SOCIAL_ACTION_SAVE_PLAYER_SETTINGS = 10016;
	SOCIAL_ACTION_GET_PLAYER_SETTINGS = 10017;
	SOCIAL_ACTION_GET_NIANTIC_FRIEND_LIST_DELETED = 10018;
	SOCIAL_ACTION_GET_NIANTIC_FRIEND_DETAILS_DELETED = 10019;
	SOCIAL_ACTION_SEND_NIANTIC_FRIEND_INVITE_DELETED = 10020;
	SOCIAL_ACTION_SET_ACCOUNT_SETTINGS = 10021;
	SOCIAL_ACTION_GET_ACCOUNT_SETTINGS = 10022;
	SOCIAL_ACTION_ADD_FAVORITE_FRIEND = 10023;
	SOCIAL_ACTION_REMOVE_FAVORITE_FRIEND = 10024;
	SOCIAL_ACTION_REGISTER_PUSH_NOTIFICATION = 10101;
	SOCIAL_ACTION_UNREGISTER_PUSH_NOTIFICATION = 10102;
	SOCIAL_ACTION_UPDATE_NOTIFICATION = 10103;
	SOCIAL_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY = 10104;
	SOCIAL_ACTION_GET_INBOX = 10105;
	SOCIAL_ACTION_GET_SIGNED_URL = 10201;
	SOCIAL_ACTION_SUBMIT_IMAGE = 10202;
	SOCIAL_ACTION_GET_PHOTOS = 10203;
	SOCIAL_ACTION_DELETE_PHOTO = 10204;
	SOCIAL_ACTION_FLAG_PHOTO = 10205;
	SOCIAL_ACTION_UPDATE_PROFILE_V2 = 20001;
	SOCIAL_ACTION_UPDATE_FRIENDSHIP_V2 = 20002;
	SOCIAL_ACTION_GET_PROFILE_V2 = 20003;
	SOCIAL_ACTION_INVITE_GAME_V2 = 20004;
	SOCIAL_ACTION_RESERVED_ACTION_2 = 20005;
	SOCIAL_ACTION_LIST_FRIENDS_V2 = 20006;
	SOCIAL_ACTION_GET_FRIEND_DETAILS_V2 = 20007;
	SOCIAL_ACTION_GET_CLIENT_FEATURE_FLAGS_V2 = 20008;
	SOCIAL_ACTION_RESERVED_ACTION_1 = 20009;
	SOCIAL_ACTION_GET_INCOMING_GAME_INVITES_V2 = 20010;
	SOCIAL_ACTION_UPDATE_INCOMING_GAME_INVITE_V2 = 20011;
	SOCIAL_ACTION_DISMISS_OUTGOING_GAME_INVITES_V2 = 20012;
	SOCIAL_ACTION_SYNC_CONTACT_LIST_V2 = 20013;
	SOCIAL_ACTION_SEND_CONTACT_LIST_FRIEND_INVITE_V2 = 20014;
	SOCIAL_ACTION_REFER_CONTACT_LIST_FRIEND_V2 = 20015;
	SOCIAL_ACTION_GET_CONTACT_LIST_INFO_V2 = 20016;
	SOCIAL_ACTION_DISMISS_CONTACT_LIST_UPDATE_V2 = 20017;
	SOCIAL_ACTION_NOTIFY_CONTACT_LIST_FRIENDS_V2 = 20018;
	SOCIAL_ACTION_RESERVED_ACTION_6 = 20019;
	SOCIAL_ACTION_RESERVED_ACTION_7 = 20020;
	SOCIAL_ACTION_RESERVED_ACTION_3 = 20400;
	SOCIAL_ACTION_RESERVED_ACTION_4 = 20401;
	SOCIAL_ACTION_RESERVED_ACTION_5 = 20402;
}

enum SocialTelemetryIds {
	SOCIAL_TELEMETRY_IDS_UNDEFINED_SOCIAL = 0;
	SOCIAL_TELEMETRY_IDS_FRIEND_TAB = 1;
	SOCIAL_TELEMETRY_IDS_NOTIFICATION_TAB = 2;
	SOCIAL_TELEMETRY_IDS_FRIEND_PROFILE = 3;
	SOCIAL_TELEMETRY_IDS_OPEN_FRIEND_SHIP_LEVEL_DETAIL = 4;
	SOCIAL_TELEMETRY_IDS_CLOSE_OPEN_GIFT_CONFIRMATION = 5;
	SOCIAL_TELEMETRY_IDS_FRIEND_LIST_SORT_CHANGED = 6;
	SOCIAL_TELEMETRY_IDS_FRIEND_LIST_CLOSED = 7;
}

enum SouvenirTypeId {
	SOUVENIR_UNSET = 0;
	SOUVENIR_LONE_EARRING = 1;
	SOUVENIR_SMALL_BOUQUET = 2;
	SOUVENIR_SKIPPING_STONE = 3;
	SOUVENIR_BEACH_GLASS = 4;
	SOUVENIR_TROPICAL_SHELL = 5;
	SOUVENIR_MUSHROOM = 6;
	SOUVENIR_CHALKY_STONE = 7;
	SOUVENIR_PINECONE = 8;
	SOUVENIR_TROPICAL_FLOWER = 9;
	SOUVENIR_FLOWER_FRUITS = 10;
	SOUVENIR_CACTUS_FLOWER = 11;
	SOUVENIR_STRETCHY_SPRING = 12;
	SOUVENIR_MARBLE = 13;
	SOUVENIR_TORN_TICKET = 14;
	SOUVENIR_PRETTY_LEAF = 15;
	SOUVENIR_CONFETTI = 16;
	SOUVENIR_PIKACHU_VISOR = 17;
}

enum SponsorPoiInvalidReason {
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_UNSPECIFIED = 0;
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_DOES_NOT_EXIST = 1;
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_NOT_SAFE = 2;
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_NOT_TRUTHFUL = 3;
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_NOT_FAMILY_FRIENDLY = 4;
	SPONSOR_POI_INVALID_REASON_SPONSOR_POI_REASON_OFFENSIVE_CONTENT = 5;
}

enum Store {
	STORE_UNSET = 0;
	STORE_APPLE = 1;
	STORE_GOOGLE = 2;
	STORE_SAMSUNG = 3;
}

enum SuggestionsEvents {
	UNDEFINED_USERNAME_SUGGESTION_EVENT = 0;
	REFRESHED_NAME_SUGGESTIONS = 1;
	TAPPED_SUGGESTED_NAME = 2;
	USED_SUGGESTED_NAME = 3;
}

enum Team {
	TEAM_UNSET = 0;
	TEAM_BLUE = 1;
	TEAM_RED = 2;
	TEAM_YELLOW = 3;
}

enum TutorialCompletion {
	LEGAL_SCREEN = 0;
	AVATAR_SELECTION = 1;
	ACCOUNT_CREATION = 2;
	POKEMON_CAPTURE = 3;
	NAME_SELECTION = 4;
	POKEMON_BERRY = 5;
	USE_ITEM = 6;
	FIRST_TIME_EXPERIENCE_COMPLETE = 7;
	POKESTOP_TUTORIAL = 8;
	GYM_TUTORIAL = 9;
	CHALLENGE_QUEST_TUTORIAL = 10;
	PRIVACY_POLICY_CONFIRMATION = 11;
	TRADING_TUTORIAL = 12;
	POI_SUBMISSION_TUTORIAL = 13;
	V1_START_TUTORIAL = 14;
	V2_START_TUTORIAL = 15;
	V2_CUSTOMIZED_AVATAR = 16;
	V2_CAUGHT_FIRST_WILD = 17;
	V2_FINISHED_TUTORIAL_CATCHES = 18;
	V2_NAME_SELECTION = 19;
	V2_EGG_GIVEN = 20;
	V2_START_EGG_TUTORIAL = 21;
	V2_COMPLETED_EGG_TUTORIAL = 22;
	AR_PHOTO_TUTORIAL = 23;
	STARTER_POKEMON_CAPTURED = 24;
	AR_PHOTO_FIRST_TIME_DIALOG = 25;
	AR_CLASSIC_PHOTO_TUTORIAL = 26;
	AR_PLUS_PHOTO_TUTORIAL = 27;
	INVASION_INTRODUCTION_DIALOG = 29;
	INVASION_ENCOUNTER_DIALOG = 30;
	INVASION_SHADOW_POKEMON_DIALOG = 31;
	ROUTES_CREATION = 32;
	INVASION_MAP_FRAGMENT_DIALOG = 33;
	INVASION_MAP_RECEIVED_DIALOG = 34;
	INVASION_MAP_2_RECEIVED_DIALOG = 35;
	BUDDY_WELCOME_PROMPT = 36;
	BUDDY_AR_PLUS_TUTORIAL = 37;
	BUDDY_FEED_TUTORIAL = 38;
	BUDDY_ON_MAP_PROMPT = 39;
	BATTLE_LEAGUE_HELP_TUTORIAL = 40;
	ARMP_TOS_CONFIRMATION = 41;
	BUDDY_REMOTE_GIFT_TUTORIAL = 42;
	XL_CANDY_TUTORIAL = 43;
	LEVEL_UP_PAGE_TUTORIAL = 44;
	DAILY_BONUS_ENCOUNTER_TUTORIAL = 45;
	SPONSORED_GIFT_TUTORIAL = 46;
	XGS_ONLINE_CONSENT_NOTE = 47;
	APP_TRACKING_OPTIN_REQUIRED_TUTORIAL = 48;
	APP_TRACKING_OPTIN_DIALOG = 49;
	ADDRESS_BOOK_IMPORT_PROMPT = 50;
	POKEMON_TAGS_INTRODUCTION = 51;
	GYM_TUTORIAL_BUTTON_PROMPT_SHOWN = 52;
	RAID_TUTORIAL_BUTTON_PROMPT_SHOWN = 53;
	POTION_AND_REVIVE_TUTORIAL_INTRODUCED = 54;
	POTION_AND_REVIVE_TUTORIAL_VIEWED = 55;
	POSTCARD_COLLECTION_TUTORIAL_VIEWED = 56;
	SHOULD_SHOW_POTION_AND_REVIVE_TUTORIAL = 57;
	RECEIVED_GIFT = 58;
	FRIEND_TUTORIAL_BUTTON_PROMPT_SHOWN = 59;
	SHOULD_SHOW_GIFT_TUTORIAL = 60;
	GIFT_TUTORIAL_INTRODUCED = 61;
	GIFT_TUTORIAL_COMPLETE = 62;
	CHALLENGE_CATCH_RAZZBERRY = 63;
	SHOULD_SHOW_LURE_TUTORIAL = 64;
	LURE_TUTORIAL_INTRODUCED = 65;
	LURE_BUTTON_PROMPT_SHOWN = 66;
	LURE_BUTTON_DIALOG_SHOWN = 67;
	REMOTE_RAID_TUTORIAL = 68;
	TRADE_TUTORIAL_INTRODUCED = 69;
	TRADE_TUTORIAL_COMPLETE = 70;
	LUCKY_FRIEND_TUTORIAL = 71;
	LUCKY_TRADE_TUTORIAL = 72;
	MEGA_LEVELS_TUTORIAL = 73;
	SPONSORED_WEB_AR_TUTORIAL = 74;
}

enum TweenAction {
	TWEEN_ACTION_MOVE_X = 0;
	TWEEN_ACTION_MOVE_Y = 1;
	TWEEN_ACTION_MOVE_Z = 2;
	TWEEN_ACTION_MOVE_LOCAL_X = 3;
	TWEEN_ACTION_MOVE_LOCAL_Y = 4;
	TWEEN_ACTION_MOVE_LOCAL_Z = 5;
	TWEEN_ACTION_MOVE_CURVED = 6;
	TWEEN_ACTION_MOVE_CURVED_LOCAL = 7;
	TWEEN_ACTION_MOVE_SPLINE = 8;
	TWEEN_ACTION_MOVE_SPLINE_LOCAL = 9;
	TWEEN_ACTION_SCALE_X = 10;
	TWEEN_ACTION_SCALE_Y = 11;
	TWEEN_ACTION_SCALE_Z = 12;
	TWEEN_ACTION_ROTATE_X = 13;
	TWEEN_ACTION_ROTATE_Y = 14;
	TWEEN_ACTION_ROTATE_Z = 15;
	TWEEN_ACTION_ROTATE_AROUND = 16;
	TWEEN_ACTION_ROTATE_AROUND_LOCAL = 17;
	TWEEN_ACTION_CANVAS_ROTATEAROUND = 18;
	TWEEN_ACTION_CANVAS_ROTATEAROUND_LOCAL = 19;
	TWEEN_ACTION_CANVAS_PLAYSPRITE = 20;
	TWEEN_ACTION_ALPHA = 21;
	TWEEN_ACTION_TEXT_ALPHA = 22;
	TWEEN_ACTION_CANVAS_ALPHA = 23;
	TWEEN_ACTION_ALPHA_VERTEX = 24;
	TWEEN_ACTION_COLOR = 25;
	TWEEN_ACTION_CALLBACK_COLOR = 26;
	TWEEN_ACTION_TEXT_COLOR = 27;
	TWEEN_ACTION_CANVAS_COLOR = 28;
	TWEEN_ACTION_CALLBACK = 29;
	TWEEN_ACTION_MOVE = 30;
	TWEEN_ACTION_MOVE_LOCAL = 31;
	TWEEN_ACTION_ROTATE = 32;
	TWEEN_ACTION_ROTATE_LOCAL = 33;
	TWEEN_ACTION_SCALE = 34;
	TWEEN_ACTION_VALUE3 = 35;
	TWEEN_ACTION_GUI_MOVE = 36;
	TWEEN_ACTION_GUI_MOVE_MARGIN = 37;
	TWEEN_ACTION_GUI_SCALE = 38;
	TWEEN_ACTION_GUI_ALPHA = 39;
	TWEEN_ACTION_GUI_ROTATE = 40;
	TWEEN_ACTION_DELAYED_SOUND = 41;
	TWEEN_ACTION_CANVAS_MOVE = 42;
	TWEEN_ACTION_CANVAS_SCALE = 43;
}

enum VsSeekerRewardTrack {
	VS_SEEKER_REWARD_TRACK_FREE = 0;
	VS_SEEKER_REWARD_TRACK_PREMIUM = 1;
}

enum WebTelemetryIds {
	WEB_TELEMETRY_IDS_UNDEFINED_WEB_EVENT = 0;
	WEB_TELEMETRY_IDS_POINT_OF_INTEREST_DESCRIPTION_WEB_CLICK = 1;
}

message ARBuddyMultiplayerSessionTelemetry {
	optional bool camera_permission_granted = 1;
	optional int64 host_time_to_publish_first_map = 2;
	optional int32 host_number_of_maps_published = 3;
	optional bool host_mapping_successful = 4;
	optional bool lobby_connection_successful = 5;
	optional int64 time_from_start_of_session_to_sync = 6;
	optional bool sync_successful = 7;
	optional int64 session_length = 8;
	optional int32 crash_count = 9;
	optional int64 duration_spent_in_lobby = 10;
	optional int64 time_from_invite_to_lobby = 11;
	optional int64 time_from_lobby_to_session = 12;
	optional int64 length_of_ar_session = 13;
	optional int32 players_connected = 14;
	optional int32 players_dropped = 15;
	optional int32 num_photos_taken = 16;
	optional bool is_host = 17;
}

message ARPlusEncounterValuesProto {
	optional float proximity = 1;
	optional float awareness = 2;
	optional bool pokemon_frightened = 3;
}

message ASPermissionFlowTelemetry {
	optional bool initial_prompt = 1;
	repeated ASServiceTelemetryIds service_telemetry = 2;
	optional ASPermissionTelemetryIds permission_telemetry = 3;
	optional ASPermissionStatusTelemetryIds permission_status_telemetry = 4;
	optional bool success = 5;
}

message AcceptCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_list_int32 = 2;
}

message AcceptCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
		ERROR_POKEMON_NOT_IN_INVENTORY = 4;
		ERROR_NOT_ELIGIBLE_LEAGUE = 5;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 6;
		ERROR_OPPONENT_NOT_IN_RANGE = 7;
		ERROR_ALREADY_TIMEDOUT = 8;
		ERROR_ALREADY_CANCELLED = 9;
		ERROR_ACCESS_DENIED = 10;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
}

message AcceptCombatChallengeProto {
	optional string challenge_id = 1;
	repeated fixed64 attacking_pokemon_id = 6;
}

message AcceptCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional AcceptCombatChallengeOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message AcceptFriendInviteOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVITE_DOES_NOT_EXIST = 3;
		ERROR_MAX_FRIENDS_LIMIT_REACHED_DELETED = 4;
		ERROR_INVITE_HAS_BEEN_CANCELLED = 5;
		ERROR_SENDER_HAS_MAX_FRIENDS = 6;
		ERROR_RECEIVER_HAS_MAX_FRIENDS = 7;
	}

	optional Result result = 1;
	optional PlayerSummaryProto friend = 2;
}

message AcceptFriendInviteProto {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message AccountDeletionInitiatedTelemetry {
	optional string account_deletion_status = 1;
}

message AccountSettingsProto {
	optional bool opt_out_social_graph_import = 1;
	optional SocialSettings.ConsentStatus online_status_consent = 2;
	optional SocialSettings.ConsentStatus last_played_date_consent = 3;
	optional SocialSettings.ConsentStatus codename_consent = 4;
	optional SocialSettings.ConsentStatus contact_list_consent = 5;
	optional string full_name = 6;
}

message AcknowledgePunishmentOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message AcknowledgePunishmentProto {
	optional bool is_warn = 1;
	optional bool is_suspended = 2;
}

message ActionLogEntry {
	optional CatchPokemonLogEntry catch_pokemon = 3;
	optional FortSearchLogEntry fort_search = 4;
	optional BuddyPokemonLogEntry buddy_pokemon = 5;
	optional RaidRewardsLogEntry raid_rewards = 6;
	optional PasscodeRewardsLogEntry passcode_rewards = 7;
	optional CompleteQuestLogEntry complete_quest = 8;
	optional CompleteQuestStampCardLogEntry complete_quest_stamp_card = 9;
	optional CompleteQuestPokemonEncounterLogEntry complete_quest_pokemon_encounter = 10;
	optional BelugaDailyTransferLogEntry beluga_transfer = 11;
	optional OpenGiftLogEntry open_gift = 12;
	optional SendGiftLogEntry send_gift = 13;
	optional TradingLogEntry trading = 14;
	optional ShareExRaidPassLogEntry share_ex_raid_pass = 15;
	optional DeclineExRaidPassLogEntry decline_ex_raid_pass = 16;
	optional FitnessRewardsLogEntry fitness_rewards = 17;
	optional CombatLogEntry combat = 18;
	optional PurifyPokemonLogEntry purify_pokemon = 19;
	optional InvasionVictoryLogEntry invasion_victory = 20;
	optional VsSeekerSetLogEntry vs_seeker_set = 21;
	optional VsSeekerCompleteSeasonLogEntry vs_seeker_complete_season = 22;
	optional VsSeekerWinRewardsLogEntry vs_seeker_win_rewards = 23;
	optional BuddyConsumablesLogEntry buddy_consumables = 24;
	optional CompleteReferralMilestoneLogEntry complete_referral_milestone = 25;
	optional DailyAdventureIncenseLogEntry daily_adventure_incense = 26;

	optional int64 timestamp_ms = 1;
	optional bool sfida = 2;
}

message ActivateVsSeekerOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS_ACTIVATED = 1;
		ERROR_NO_PREMIUM_BATTLE_PASS = 2;
		ERROR_VS_SEEKER_NOT_CHARGED = 3;
		ERROR_VS_SEEKER_ALREADY_ACTIVATED = 4;
		ERROR_EXCEEDED_LIMIT = 5;
		ERROR_TEMPORARILY_UNAVAILABLE = 6;
	}

	optional Result result = 1;
	optional VsSeekerAttributesProto vs_seeker = 2;
}

message ActivateVsSeekerProto {
	optional VsSeekerRewardTrack reward_track = 1;
}

message ActivityPostcardData {
	message BuddyData {
		optional HoloPokemonId pokemon_id = 1;
		optional PokemonDisplayProto buddy_display = 2;
		optional string nickname = 3;
		optional int32 buddy_candy_awarded = 4;
	}

	message FortData {
		optional string id = 1;
		optional string name = 2;
		optional string description = 3;
		optional string image_url = 4;
		optional double lat_degrees = 5;
		optional double lng_degrees = 6;
	}

	optional PlayerPublicProfileProto sender_public_profile = 1;
	optional BuddyData sender_buddy_data = 3;
	optional FortData sender_fort_data = 4;
}

message AdDetails {
	optional ImageTextCreativeProto image_text_creative = 1;
	optional bytes encrypted_ad_token = 2;
	repeated ImpressionTrackingTag impression_tracking_tag = 3;
	optional GamDetails gam_details = 4;
}

message AdFeedbackSettingsProto {
	optional bool enabled = 1;
	optional bool enable_report_ad = 2;
	optional bool enable_not_interested = 3;
	optional bool enable_see_more = 4;
}

message AdProto {
	optional AdDetails ad_details = 1;
	optional AdResponseStatus ad_response_status = 2;
}

message AdRequestDeviceInfo {
	enum OperatingSystem {
		PLATFORM_UNKNOWN = 0;
		PLATFORM_ANDROID = 1;
		PLATFORM_IOS = 2;
	}

	optional OperatingSystem operating_system = 1;
	optional string device_model = 2;
	optional string carrier = 3;
	optional string operating_system_version = 4;
	optional int32 system_memory_size_mb = 5;
	optional int32 graphics_memory_size_mb = 6;
	optional bool camera_permission_granted = 7;
}

message AdTargetingInfoProto {
	optional AdRequestDeviceInfo device_info = 1;
	optional AvatarGender avatar_gender = 2;
}

message AddFortModifierOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		FORT_ALREADY_HAS_MODIFIER = 2;
		TOO_FAR_AWAY = 3;
		NO_ITEM_IN_INVENTORY = 4;
		POI_INACCESSIBLE = 5;
	}

	optional Result result = 1;
	optional FortDetailsOutProto fort_details_out_proto = 2;
}

message AddFortModifierProto {
	optional Item modifier_type = 1;
	optional string fort_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
}

message AddFriendQuestProto {
	repeated string added_friend_ids = 1;
}

message AddLoginActionOutProto {
	enum Status {
		UNSET = 0;
		AUTH_FAILURE = 1;
		LOGIN_TAKEN = 2;
		ERROR_UNKNOWN = 3;
	}

	optional bool success = 1;
	repeated LoginDetail login_detail = 2;
	optional Status status = 3;
}

message AddLoginActionProto {
	optional IdentityProvider identity_provider = 1;
	optional bytes inner_message = 2;
	optional string auth_provider_id = 3;
}

message AddReferrerOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
		ERROR_INVALID_REFERRAL_CODE = 3;
		ERROR_ALREADY_ADDED = 4;
		ERROR_PASSED_GRACE_PERIOD = 5;
		ERROR_ALREADY_SKIPPED_ENTERING_REFERRAL_CODE = 6;
	}

	optional Status status = 1;
}

message AddReferrerProto {
	optional string referrer_code = 1;
}

message AddressBookImportSettingsProto {
	optional bool is_enabled = 1;
	optional int32 onboarding_screen_level = 2;
	optional bool show_opt_out_checkbox = 3;
}

message AddressBookImportTelemetry {
	enum AddressBookImportTelemetryId {
		UNDEFINED = 0;
		SEE_PGO_NEW_PLAYER_ONBOARDING_SCREEN = 1;
		CLICK_IMPORT_CONTACTS_BUTTON = 2;
		OPEN_ADDRESS_BOOK_IMPORT_FROM_PGO_ONBOARDING = 3;
		DISMISS_PGO_ONBOARDING = 4;
	}

	optional AddressBookImportTelemetryId abi_telemetry_id = 1;
}

message AddressablePokemonSettings {
	optional int32 ob_addressable_int = 1;
	repeated HoloPokemonId pokemon_id = 2;
}

message AdvancedPerformanceTelemetry {
	enum PerformanceLevels {
		UNSET = 0;
		LOW = 1;
		MEDIUM = 2;
		HIGH = 3;
	}

	enum PerformancePresetLevels {
		UNSET_PRESET = 0;
		LOW_PRESET = 1;
		MEDIUM_PRESET = 2;
		HIGH_PRESET = 3;
		MAX_PRESET = 4;
		CUSTOM_PRESET = 5;
	}

	optional PerformancePresetLevels performance_preset_level = 1;
	optional bool native_refresh_rate_fps = 2;
	optional bool special_framerate = 3;
	optional bool improved_sky = 4;
	optional bool dynamic_gyms = 5;
	optional bool normal_map_drawing_distance = 6;
	optional bool normal_fog_distance = 7;
	optional PerformanceLevels buildings_on_map = 8;
	optional bool friends_icons_in_list = 9;
	optional PerformanceLevels avatars_render_texture_size_high = 10;
	optional bool avatars_render_texture_size_low = 11;
	optional bool ar_prompt = 12;
	optional PerformanceLevels render_level = 13;
	optional PerformanceLevels texture_quality = 14;
	optional PerformanceLevels download_image_ram_cache = 15;
	optional bool map_details = 16;
	optional bool avatar_details = 17;
	optional PerformanceLevels render_and_texture = 18;
}

message AdventureSyncProgress {
	optional int32 notification_selector = 1;
	repeated string parameters = 2;
	optional bytes serialized_data = 3;
}

message AdventureSyncSettingsProto {
	optional bool fitness_service_enabled = 1;
	optional bool awareness_service_enabled = 2;
	optional bool persistent_breadcrumb_service_enabled = 3;
	optional bool sensor_service_enabled = 4;
}

message AdventureSyncV2GmtProto {
	optional bool feature_enabled = 1;
}

message AllTypesAndMessagesResponsesProto {
	enum AllResquestTypesProto {
		REQUEST_TYPE_UNSET = 0;
		REQUEST_TYPE_METHOD_GET_PLAYER = 2;
		REQUEST_TYPE_METHOD_GET_HOLOHOLO_INVENTORY = 4;
		REQUEST_TYPE_METHOD_DOWNLOAD_SETTINGS = 5;
		REQUEST_TYPE_METHOD_DOWNLOAD_ITEM_TEMPLATES = 6;
		REQUEST_TYPE_METHOD_DOWNLOAD_REMOTE_CONFIG_VERSION = 7;
		REQUEST_TYPE_METHOD_REGISTER_BACKGROUND_DEVICE = 8;
		REQUEST_TYPE_METHOD_GET_PLAYER_DAY = 9;
		REQUEST_TYPE_METHOD_ACKNOWLEDGE_PUNISHMENT = 10;
		REQUEST_TYPE_METHOD_GET_SERVER_TIME = 11;
		REQUEST_TYPE_METHOD_GET_LOCAL_TIME = 12;
		REQUEST_TYPE_METHOD_FORT_SEARCH = 101;
		REQUEST_TYPE_METHOD_ENCOUNTER = 102;
		REQUEST_TYPE_METHOD_CATCH_POKEMON = 103;
		REQUEST_TYPE_METHOD_FORT_DETAILS = 104;
		REQUEST_TYPE_METHOD_GET_MAP_OBJECTS = 106;
		REQUEST_TYPE_METHOD_FORT_DEPLOY_POKEMON = 110;
		REQUEST_TYPE_METHOD_FORT_RECALL_POKEMON = 111;
		REQUEST_TYPE_METHOD_RELEASE_POKEMON = 112;
		REQUEST_TYPE_METHOD_USE_ITEM_POTION = 113;
		REQUEST_TYPE_METHOD_USE_ITEM_CAPTURE = 114;
		REQUEST_TYPE_METHOD_USE_ITEM_FLEE = 115;
		REQUEST_TYPE_METHOD_USE_ITEM_REVIVE = 116;
		REQUEST_TYPE_METHOD_GET_PLAYER_PROFILE = 121;
		REQUEST_TYPE_METHOD_EVOLVE_POKEMON = 125;
		REQUEST_TYPE_METHOD_GET_HATCHED_EGGS = 126;
		REQUEST_TYPE_METHOD_ENCOUNTER_TUTORIAL_COMPLETE = 127;
		REQUEST_TYPE_METHOD_LEVEL_UP_REWARDS = 128;
		REQUEST_TYPE_METHOD_CHECK_AWARDED_BADGES = 129;
		REQUEST_TYPE_METHOD_RECYCLE_INVENTORY_ITEM = 137;
		REQUEST_TYPE_METHOD_COLLECT_DAILY_BONUS = 138;
		REQUEST_TYPE_METHOD_USE_ITEM_XP_BOOST = 139;
		REQUEST_TYPE_METHOD_USE_ITEM_EGG_INCUBATOR = 140;
		REQUEST_TYPE_METHOD_USE_INCENSE = 141;
		REQUEST_TYPE_METHOD_GET_INCENSE_POKEMON = 142;
		REQUEST_TYPE_METHOD_INCENSE_ENCOUNTER = 143;
		REQUEST_TYPE_METHOD_ADD_FORT_MODIFIER = 144;
		REQUEST_TYPE_METHOD_DISK_ENCOUNTER = 145;
		REQUEST_TYPE_METHOD_UPGRADE_POKEMON = 147;
		REQUEST_TYPE_METHOD_SET_FAVORITE_POKEMON = 148;
		REQUEST_TYPE_METHOD_NICKNAME_POKEMON = 149;
		REQUEST_TYPE_METHOD_EQUIP_BADGE = 150;
		REQUEST_TYPE_METHOD_SET_CONTACT_SETTINGS = 151;
		REQUEST_TYPE_METHOD_SET_BUDDY_POKEMON = 152;
		REQUEST_TYPE_METHOD_GET_BUDDY_WALKED = 153;
		REQUEST_TYPE_METHOD_USE_ITEM_ENCOUNTER = 154;
		REQUEST_TYPE_METHOD_GYM_DEPLOY = 155;
		REQUEST_TYPE_METHOD_GYM_GET_INFO = 156;
		REQUEST_TYPE_METHOD_GYM_START_SESSION = 157;
		REQUEST_TYPE_METHOD_GYM_BATTLE_ATTACK = 158;
		REQUEST_TYPE_METHOD_JOIN_LOBBY = 159;
		REQUEST_TYPE_METHOD_LEAVE_LOBBY = 160;
		REQUEST_TYPE_METHOD_SET_LOBBY_VISIBILITY = 161;
		REQUEST_TYPE_METHOD_SET_LOBBY_POKEMON = 162;
		REQUEST_TYPE_METHOD_GET_RAID_DETAILS = 163;
		REQUEST_TYPE_METHOD_GYM_FEED_POKEMON = 164;
		REQUEST_TYPE_METHOD_START_RAID_BATTLE = 165;
		REQUEST_TYPE_METHOD_ATTACK_RAID = 166;
		REQUEST_TYPE_METHOD_AWARD_POKECOIN = 167;
		REQUEST_TYPE_METHOD_USE_ITEM_STARDUST_BOOST = 168;
		REQUEST_TYPE_METHOD_REASSIGN_PLAYER = 169;
		REQUEST_TYPE_METHOD_REDEEM_POI_PASSCODE = 170;
		REQUEST_TYPE_METHOD_CONVERT_CANDY_TO_XL_CANDY = 171;
		REQUEST_TYPE_METHOD_IS_SKU_AVAILABLE = 172;
		REQUEST_TYPE_METHOD_GET_ASSET_DIGEST = 300;
		REQUEST_TYPE_METHOD_GET_DOWNLOAD_URLS = 301;
		REQUEST_TYPE_METHOD_GET_ASSET_VERSION = 302;
		REQUEST_TYPE_METHOD_CLAIM_CODENAME = 403;
		REQUEST_TYPE_METHOD_SET_AVATAR = 404;
		REQUEST_TYPE_METHOD_SET_PLAYER_TEAM = 405;
		REQUEST_TYPE_METHOD_MARK_TUTORIAL_COMPLETE = 406;
		REQUEST_TYPE_METHOD_UPDATE_PERFORMANCE_METRICS = 407;
		REQUEST_TYPE_METHOD_CHECK_CHALLENGE = 600;
		REQUEST_TYPE_METHOD_VERIFY_CHALLENGE = 601;
		REQUEST_TYPE_METHOD_ECHO = 666;
		REQUEST_TYPE_METHOD_SFIDA_REGISTRATION = 800;
		REQUEST_TYPE_METHOD_SFIDA_ACTION_LOG = 801;
		REQUEST_TYPE_METHOD_SFIDA_CERTIFICATION = 802;
		REQUEST_TYPE_METHOD_SFIDA_UPDATE = 803;
		REQUEST_TYPE_METHOD_SFIDA_ACTION = 804;
		REQUEST_TYPE_METHOD_SFIDA_DOWSER = 805;
		REQUEST_TYPE_METHOD_SFIDA_CAPTURE = 806;
		REQUEST_TYPE_METHOD_LIST_AVATAR_CUSTOMIZATIONS = 807;
		REQUEST_TYPE_METHOD_SET_AVATAR_ITEM_AS_VIEWED = 808;
		REQUEST_TYPE_METHOD_GET_INBOX = 809;
		REQUEST_TYPE_METHOD_LIST_GYM_BADGES = 811;
		REQUEST_TYPE_METHOD_GET_GYM_BADGE_DETAILS = 812;
		REQUEST_TYPE_METHOD_USE_ITEM_MOVE_REROLL = 813;
		REQUEST_TYPE_METHOD_USE_ITEM_RARE_CANDY = 814;
		REQUEST_TYPE_METHOD_AWARD_FREE_RAID_TICKET = 815;
		REQUEST_TYPE_METHOD_FETCH_ALL_NEWS = 816;
		REQUEST_TYPE_METHOD_MARK_READ_NEWS_ARTICLE = 817;
		REQUEST_TYPE_METHOD_GET_PLAYER_DISPLAY_INFO = 818;
		REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_START = 819;
		REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_COMPLETE = 820;
		REQUEST_TYPE_METHOD_SFIDA_ASSOCIATE = 822;
		REQUEST_TYPE_METHOD_SFIDA_CHECK_PAIRING = 823;
		REQUEST_TYPE_METHOD_SFIDA_DISASSOCIATE = 824;
		REQUEST_TYPE_METHOD_WAINA_SUBMIT_SLEEP_DATA = 826;
		REQUEST_TYPE_METHOD_GET_NEW_QUESTS = 900;
		REQUEST_TYPE_METHOD_GET_QUEST_DETAILS = 901;
		REQUEST_TYPE_METHOD_COMPLETE_QUEST = 902;
		REQUEST_TYPE_METHOD_REMOVE_QUEST = 903;
		REQUEST_TYPE_METHOD_QUEST_ENCOUNTER = 904;
		REQUEST_TYPE_METHOD_COMPLETE_QUEST_STAMP_CARD = 905;
		REQUEST_TYPE_METHOD_PROGRESS_QUEST = 906;
		REQUEST_TYPE_METHOD_START_QUEST_INCIDENT = 907;
		REQUEST_TYPE_METHOD_READ_QUEST_DIALOG = 908;
		REQUEST_TYPE_METHOD_SEND_GIFT = 950;
		REQUEST_TYPE_METHOD_OPEN_GIFT = 951;
		REQUEST_TYPE_METHOD_GIFT_DETAILS = 952;
		REQUEST_TYPE_METHOD_DELETE_GIFT = 953;
		REQUEST_TYPE_METHOD_SAVE_PLAYER_SNAPSHOT = 954;
		REQUEST_TYPE_METHOD_GET_FRIENDSHIP_MILESTONE_REWARDS = 955;
		REQUEST_TYPE_METHOD_CHECK_SEND_GIFT = 956;
		REQUEST_TYPE_METHOD_SET_FRIEND_NICKNAME = 957;
		REQUEST_TYPE_METHOD_DELETE_GIFT_FROM_INVENTORY = 958;
		REQUEST_TYPE_METHOD_SAVE_SOCIAL_PLAYER_SETTINGS = 959;
		REQUEST_TYPE_METHOD_SHARE_EX_RAID_PASS = 960;
		REQUEST_TYPE_METHOD_CHECK_SHARE_EX_RAID_PASS = 961;
		REQUEST_TYPE_METHOD_DECLINE_SHARED_EX_RAID_PASS = 962;
		REQUEST_TYPE_METHOD_OPEN_TRADING = 970;
		REQUEST_TYPE_METHOD_UPDATE_TRADING = 971;
		REQUEST_TYPE_METHOD_CONFIRM_TRADING = 972;
		REQUEST_TYPE_METHOD_CANCEL_TRADING = 973;
		REQUEST_TYPE_METHOD_GET_TRADING = 974;
		REQUEST_TYPE_METHOD_GET_FITNESS_REWARDS = 980;
		REQUEST_TYPE_METHOD_GET_COMBAT_PLAYER_PROFILE = 990;
		REQUEST_TYPE_METHOD_GENERATE_COMBAT_CHALLENGE_ID = 991;
		REQUEST_TYPE_METHOD_CREATE_COMBAT_CHALLENGE = 992;
		REQUEST_TYPE_METHOD_OPEN_COMBAT_CHALLENGE = 993;
		REQUEST_TYPE_METHOD_GET_COMBAT_CHALLENGE = 994;
		REQUEST_TYPE_METHOD_ACCEPT_COMBAT_CHALLENGE = 995;
		REQUEST_TYPE_METHOD_DECLINE_COMBAT_CHALLENGE = 996;
		REQUEST_TYPE_METHOD_CANCEL_COMBAT_CHALLENGE = 997;
		REQUEST_TYPE_METHOD_SUBMIT_COMBAT_CHALLENGE_POKEMONS = 998;
		REQUEST_TYPE_METHOD_SAVE_COMBAT_PLAYER_PREFERENCES = 999;
		REQUEST_TYPE_METHOD_OPEN_COMBAT_SESSION = 1000;
		REQUEST_TYPE_METHOD_UPDATE_COMBAT = 1001;
		REQUEST_TYPE_METHOD_QUIT_COMBAT = 1002;
		REQUEST_TYPE_METHOD_GET_COMBAT_RESULTS = 1003;
		REQUEST_TYPE_METHOD_UNLOCK_SPECIAL_MOVE = 1004;
		REQUEST_TYPE_METHOD_GET_NPC_COMBAT_REWARDS = 1005;
		REQUEST_TYPE_METHOD_COMBAT_FRIEND_REQUEST = 1006;
		REQUEST_TYPE_METHOD_OPEN_NPC_COMBAT_SESSION = 1007;
		REQUEST_TYPE_METHOD_START_TUTORIAL_ACTION = 1008;
		REQUEST_TYPE_METHOD_GET_TUTORIAL_EGG_ACTION = 1009;
		REQUEST_TYPE_METHOD_SEND_PROBE = 1020;
		REQUEST_TYPE_METHOD_PROBE_DATA = 1021;
		REQUEST_TYPE_METHOD_COMBAT_DATA = 1022;
		REQUEST_TYPE_METHOD_COMBAT_CHALLENGE_DATA = 1023;
		REQUEST_TYPE_METHOD_CHECK_PHOTOBOMB = 1101;
		REQUEST_TYPE_METHOD_CONFIRM_PHOTOBOMB = 1102;
		REQUEST_TYPE_METHOD_GET_PHOTOBOMB = 1103;
		REQUEST_TYPE_METHOD_ENCOUNTER_PHOTOBOMB = 1104;
		REQUEST_TYPE_METHOD_GET_SIGNED_GMAP_URL_DEPRECATED = 1105;
		REQUEST_TYPE_METHOD_CHANGE_TEAM = 1106;
		REQUEST_TYPE_METHOD_GET_WEB_TOKEN = 1107;
		REQUEST_TYPE_METHOD_COMPLETE_SNAPSHOT_SESSION = 1110;
		REQUEST_TYPE_METHOD_COMPLETE_WILD_SNAPSHOT_SESSION = 1111;
		REQUEST_TYPE_METHOD_START_INCIDENT = 1200;
		REQUEST_TYPE_METHOD_INVASION_COMPLETE_DIALOGUE = 1201;
		REQUEST_TYPE_METHOD_INVASION_OPEN_COMBAT_SESSION = 1202;
		REQUEST_TYPE_METHOD_INVASION_BATTLE_UPDATE = 1203;
		REQUEST_TYPE_METHOD_INVASION_ENCOUNTER = 1204;
		REQUEST_TYPE_METHOD_PURIFY_POKEMON = 1205;
		REQUEST_TYPE_METHOD_GET_ROCKET_BALLOON = 1206;
		REQUEST_TYPE_METHOD_START_ROCKET_BALLOON_INCIDENT = 1207;
		REQUEST_TYPE_METHOD_VS_SEEKER_START_MATCHMAKING = 1300;
		REQUEST_TYPE_METHOD_CANCEL_MATCHMAKING = 1301;
		REQUEST_TYPE_METHOD_GET_MATCHMAKING_STATUS = 1302;
		REQUEST_TYPE_METHOD_COMPLETE_VS_SEEKER_AND_RESTART_CHARGING = 1303;
		REQUEST_TYPE_METHOD_GET_VS_SEEKER_STATUS = 1304;
		REQUEST_TYPE_METHOD_COMPLETE_COMBAT_COMPETITIVE_SEASON_ACTION = 1305;
		REQUEST_TYPE_METHOD_CLAIM_VS_SEEKER_REWARDS = 1306;
		REQUEST_TYPE_METHOD_VS_SEEKER_REWARD_ENCOUNTER = 1307;
		REQUEST_TYPE_METHOD_ACTIVATE_VS_SEEKER = 1308;
		REQUEST_TYPE_METHOD_GET_BUDDY_MAP = 1350;
		REQUEST_TYPE_METHOD_GET_BUDDY_STATS = 1351;
		REQUEST_TYPE_METHOD_FEED_BUDDY = 1352;
		REQUEST_TYPE_METHOD_OPEN_BUDDY_GIFT = 1353;
		REQUEST_TYPE_METHOD_PET_BUDDY = 1354;
		REQUEST_TYPE_METHOD_GET_BUDDY_HISTORY = 1355;
		REQUEST_TYPE_METHOD_UPDATE_ROUTE_DRAFT = 1400;
		REQUEST_TYPE_METHOD_GET_MAP_FORTS = 1401;
		REQUEST_TYPE_METHOD_SUBMIT_ROUTE_DRAFT = 1402;
		REQUEST_TYPE_METHOD_GET_PUBLISHED_ROUTES = 1403;
		REQUEST_TYPE_METHOD_START_ROUTE = 1404;
		REQUEST_TYPE_METHOD_GET_ROUTES = 1405;
		REQUEST_TYPE_METHOD_PROGRESS_ROUTE = 1406;
		REQUEST_TYPE_METHOD_PROCESS_ROUTE_WAYPOINT_INTERACTION = 1407;
		REQUEST_TYPE_METHOD_PROCESS_ROUTE_TAPPABLE = 1408;
		REQUEST_TYPE_METHOD_LIST_ROUTE_BADGES = 1409;
		REQUEST_TYPE_METHOD_CANCEL_ROUTE = 1410;
		REQUEST_TYPE_METHOD_LIST_ROUTE_STAMPS = 1411;
		REQUEST_TYPE_METHOD_CREATE_BUDDY_MUTLIPLAYER_SESSION = 1456;
		REQUEST_TYPE_METHOD_JOIN_BUDDY_MULTIPLAYER_SESSION = 1457;
		REQUEST_TYPE_METHOD_LEAVE_BUDDY_MULTIPLAYER_SESSION = 1458;
		REQUEST_TYPE_METHOD_GET_TODAY_VIEW = 1501;
		REQUEST_TYPE_METHOD_MEGA_EVOLVE_POKEMON = 1502;
		REQUEST_TYPE_METHOD_REMOTE_GIFT_PING = 1503;
		REQUEST_TYPE_METHOD_SEND_RAID_INVITATION = 1504;
		REQUEST_TYPE_METHOD_GET_DAILY_ENCOUNTER = 1601;
		REQUEST_TYPE_METHOD_DAILY_ENCOUNTER = 1602;
		REQUEST_TYPE_METHOD_OPEN_SPONSORED_GIFT = 1650;
		REQUEST_TYPE_METHOD_SPONSORED_GIFT_REPORT_INTERACTION = 1651;
		REQUEST_TYPE_METHOD_SAVE_PLAYER_PREFERENCES = 1652;
		REQUEST_TYPE_METHOD_PROFANITY_CHECK = 1653;
		REQUEST_TYPE_METHOD_GET_TIMED_GROUP_CHALLENGE = 1700;
		REQUEST_TYPE_METHOD_GET_NINTENDO_ACCOUNT = 1710;
		REQUEST_TYPE_METHOD_UNLINK_NINTENDO_ACCOUNT = 1711;
		REQUEST_TYPE_METHOD_GET_NINTENDO_OAUTH2_URL = 1712;
		REQUEST_TYPE_METHOD_TRANSFER_TO_POKEMON_HOME = 1713;
		REQUEST_TYPE_METHOD_REPORT_AD_FEEDBACK = 1716;
		REQUEST_TYPE_METHOD_CREATE_POKEMON_TAG = 1717;
		REQUEST_TYPE_METHOD_DELETE_POKEMON_TAG = 1718;
		REQUEST_TYPE_METHOD_EDIT_POKEMON_TAG = 1719;
		REQUEST_TYPE_METHOD_SET_POKEMON_TAGS_FOR_POKEMON = 1720;
		REQUEST_TYPE_METHOD_GET_POKEMON_TAGS = 1721;
		REQUEST_TYPE_METHOD_CHANGE_POKEMON_FORM = 1722;
		REQUEST_TYPE_METHOD_CHOOSE_EVENT_VARIANT = 1723;
		REQUEST_TYPE_METHOD_GET_REFERRAL_CODE = 1800;
		REQUEST_TYPE_METHOD_ADD_REFERRER = 1801;
		REQUEST_TYPE_METHOD_SEND_FRIEND_INVITE_VIA_REFERRAL_CODE = 1802;
		REQUEST_TYPE_METHOD_GET_MILESTONES = 1803;
		REQUEST_TYPE_METHOD_MARK_MILESTONES_AS_VIEWED = 1804;
		REQUEST_TYPE_METHOD_GET_MILESTONES_PREVIEW = 1805;
		REQUEST_TYPE_METHOD_COMPLETE_MILESTONE = 1806;
		REQUEST_TYPE_METHOD_GET_GEOFENCED_AD = 1820;
		REQUEST_TYPE_METHOD_POWER_UP_POKESTOP_ENCOUNTER = 1900;
		REQUEST_TYPE_METHOD_CREATE_POSTCARD = 1910;
		REQUEST_TYPE_METHOD_UPDATE_POSTCARD = 1911;
		REQUEST_TYPE_METHOD_DELETE_POSTCARD = 1912;
		REQUEST_TYPE_METHOD_GET_MEMENTO_LIST = 1913;
		REQUEST_TYPE_METHOD_UPLOAD_RAID_CLIENT_LOG = 1914;
		REQUEST_TYPE_METHOD_SKIP_ENTER_REFERRAL_CODE = 1915;
		REQUEST_TYPE_METHOD_UPLOAD_COMBAT_CLIENT_LOG = 1916;
		REQUEST_TYPE_METHOD_COMBAT_SYNC_SERVER_OFFSET = 1917;
		REQUEST_TYPE_METHOD_CHECK_GIFTING_ELIGIBILITY = 2000;
		REQUEST_TYPE_METHOD_REDEEM_TICKET_GIFT_FOR_FRIEND = 2001;
		REQUEST_TYPE_CLIENT_ACTION_REGISTER_PUSH_NOTIFICATION = 5000;
		REQUEST_TYPE_CLIENT_ACTION_UNREGISTER_PUSH_NOTIFICATION = 5001;
		REQUEST_TYPE_CLIENT_ACTION_UPDATE_NOTIFICATION_STATUS = 5002;
		REQUEST_TYPE_CLIENT_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY = 5003;
		REQUEST_TYPE_CLIENT_ACTION_DOWNLOAD_GAME_MASTER_TEMPLATES = 5004;
		REQUEST_TYPE_CLIENT_ACTION_GET_INVENTORY = 5005;
		REQUEST_TYPE_CLIENT_ACTION_REDEEM_PASSCODE = 5006;
		REQUEST_TYPE_CLIENT_ACTION_PING = 5007;
		REQUEST_TYPE_CLIENT_ACTION_ADD_LOGIN_ACTION = 5008;
		REQUEST_TYPE_CLIENT_ACTION_REMOVE_LOGIN_ACTION = 5009;
		REQUEST_TYPE_CLIENT_ACTION_LIST_LOGIN_ACTION = 5010;
		REQUEST_TYPE_CLIENT_ACTION_ADD_NEW_POI = 5011;
		REQUEST_TYPE_CLIENT_ACTION_PROXY_SOCIAL_ACTION = 5012;
		REQUEST_TYPE_CLIENT_ACTION_DEPRECATED_CLIENT_TELEMETRY = 5013;
		REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SUBMISSIONS = 5014;
		REQUEST_TYPE_CLIENT_ACTION_GET_SIGNED_URL_FOR_PHOTO_UPLOAD = 5015;
		REQUEST_TYPE_CLIENT_ACTION_REPLACE_LOGIN_ACTION = 5016;
		REQUEST_TYPE_CLIENT_ACTION_PROXY_SOCIAL_SIDE_CHANNEL_ACTION = 5017;
		REQUEST_TYPE_CLIENT_ACTION_COLLECT_CLIENT_TELEMETRY = 5018;
		REQUEST_TYPE_CLIENT_ACTION_PURCHASE_SKU = 5019;
		REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SKUS_AND_BALANCES = 5020;
		REQUEST_TYPE_CLIENT_ACTION_REDEEM_GOOGLE_RECEIPT = 5021;
		REQUEST_TYPE_CLIENT_ACTION_REDEEM_APPLE_RECEIPT = 5022;
		REQUEST_TYPE_CLIENT_ACTION_REDEEM_DESKTOP_RECEIPT = 5023;
		REQUEST_TYPE_CLIENT_ACTION_UPDATE_FITNESS_METRICS = 5024;
		REQUEST_TYPE_CLIENT_ACTION_GET_FITNESS_REPORT = 5025;
		REQUEST_TYPE_CLIENT_ACTION_GET_CLIENT_TELEMETRY_SETTINGS = 5026;
		REQUEST_TYPE_CLIENT_ACTION_PING_ASYNC = 5027;
		REQUEST_TYPE_CLIENT_ACTION_REGISTER_BACKGROUND_SERVICE = 5028;
		REQUEST_TYPE_CLIENT_ACTION_GET_CLIENT_BGMODE_SETTINGS = 5029;
		REQUEST_TYPE_CLIENT_ACTION_PING_DOWNSTREAM = 5030;
		REQUEST_TYPE_CLIENT_ACTION_SET_IN_GAME_CURRENCY_EXCHANGE_RATE = 5032;
		REQUEST_TYPE_CLIENT_ACTION_REQUEST_GEOFENCE_UPDATES = 5033;
		REQUEST_TYPE_CLIENT_ACTION_UPDATE_PLAYER_LOCATION = 5034;
		REQUEST_TYPE_CLIENT_ACTION_GENERATE_GMAP_SIGNED_URL = 5035;
		REQUEST_TYPE_CLIENT_ACTION_GET_GMAP_SETTINGS = 5036;
		REQUEST_TYPE_CLIENT_ACTION_REDEEM_SAMSUNG_RECEIPT = 5037;
		REQUEST_TYPE_CLIENT_ACTION_ADD_NEW_ROUTE = 5038;
		REQUEST_TYPE_CLIENT_ACTION_GET_OUTSTANDING_WARNINGS = 5039;
		REQUEST_TYPE_CLIENT_ACTION_ACKNOWLEDGE_WARNINGS = 5040;
		REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_IMAGE = 5041;
		REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE = 5042;
		REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_LOCATION_UPDATE = 5043;
		REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST = 5044;
		REQUEST_TYPE_CLIENT_ACTION_GET_WEB_TOKEN_ACTION = 5045;
		REQUEST_TYPE_CLIENT_ACTION_GET_ADVENTURE_SYNC_SETTINGS = 5046;
		REQUEST_TYPE_CLIENT_ACTION_UPDATE_ADVENTURE_SYNC_SETTINGS = 5047;
		REQUEST_TYPE_CLIENT_ACTION_SET_BIRTHDAY = 5048;
		REQUEST_TYPE_SOCIAL_ACTION_SEARCH_PLAYER = 10000;
		REQUEST_TYPE_SOCIAL_ACTION_SEND_FRIEND_INVITE = 10002;
		REQUEST_TYPE_SOCIAL_ACTION_CANCEL_FRIEND_INVITE = 10003;
		REQUEST_TYPE_SOCIAL_ACTION_ACCEPT_FRIEND_INVITE = 10004;
		REQUEST_TYPE_SOCIAL_ACTION_DECLINE_FRIEND_INVITE = 10005;
		REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS = 10006;
		REQUEST_TYPE_SOCIAL_ACTION_LIST_OUTGOING_FRIEND_INVITES = 10007;
		REQUEST_TYPE_SOCIAL_ACTION_LIST_INCOMING_FRIEND_INVITES = 10008;
		REQUEST_TYPE_SOCIAL_ACTION_REMOVE_FRIEND = 10009;
		REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIEND_STATUS = 10010;
		REQUEST_TYPE_SOCIAL_ACTION_SEND_FACEBOOK_FRIEND_INVITE = 10011;
		REQUEST_TYPE_SOCIAL_ACTION_IS_MY_FRIEND = 10012;
		REQUEST_TYPE_SOCIAL_ACTION_CREATE_INVITE_CODE = 10013;
		REQUEST_TYPE_SOCIAL_ACTION_GET_FACEBOOK_FRIEND_LIST = 10014;
		REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FACEBOOK_STATUS = 10015;
		REQUEST_TYPE_SOCIAL_ACTION_SAVE_PLAYER_SETTINGS = 10016;
		REQUEST_TYPE_SOCIAL_ACTION_GET_PLAYER_SETTINGS = 10017;
		REQUEST_TYPE_SOCIAL_ACTION_GET_NIANTIC_FRIEND_LIST_DELETED = 10018;
		REQUEST_TYPE_SOCIAL_ACTION_GET_NIANTIC_FRIEND_DETAILS_DELETED = 10019;
		REQUEST_TYPE_SOCIAL_ACTION_SEND_NIANTIC_FRIEND_INVITE_DELETED = 10020;
		REQUEST_TYPE_SOCIAL_ACTION_SET_ACCOUNT_SETTINGS = 10021;
		REQUEST_TYPE_SOCIAL_ACTION_GET_ACCOUNT_SETTINGS = 10022;
		REQUEST_TYPE_SOCIAL_ACTION_ADD_FAVORITE_FRIEND = 10023;
		REQUEST_TYPE_SOCIAL_ACTION_REMOVE_FAVORITE_FRIEND = 10024;
		REQUEST_TYPE_SOCIAL_ACTION_REGISTER_PUSH_NOTIFICATION = 10101;
		REQUEST_TYPE_SOCIAL_ACTION_UNREGISTER_PUSH_NOTIFICATION = 10102;
		REQUEST_TYPE_SOCIAL_ACTION_UPDATE_NOTIFICATION = 10103;
		REQUEST_TYPE_SOCIAL_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY = 10104;
		REQUEST_TYPE_SOCIAL_ACTION_GET_INBOX = 10105;
		REQUEST_TYPE_SOCIAL_ACTION_GET_SIGNED_URL = 10201;
		REQUEST_TYPE_SOCIAL_ACTION_SUBMIT_IMAGE = 10202;
		REQUEST_TYPE_SOCIAL_ACTION_GET_PHOTOS = 10203;
		REQUEST_TYPE_SOCIAL_ACTION_DELETE_PHOTO = 10204;
		REQUEST_TYPE_SOCIAL_ACTION_FLAG_PHOTO = 10205;
		REQUEST_TYPE_SOCIAL_ACTION_UPDATE_PROFILE_V2 = 20001;
		REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FRIENDSHIP_V2 = 20002;
		REQUEST_TYPE_SOCIAL_ACTION_GET_PROFILE_V2 = 20003;
		REQUEST_TYPE_SOCIAL_ACTION_INVITE_GAME_V2 = 20004;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_2 = 20005;
		REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS_V2 = 20006;
		REQUEST_TYPE_SOCIAL_ACTION_GET_FRIEND_DETAILS_V2 = 20007;
		REQUEST_TYPE_SOCIAL_ACTION_GET_CLIENT_FEATURE_FLAGS_V2 = 20008;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_1 = 20009;
		REQUEST_TYPE_SOCIAL_ACTION_GET_INCOMING_GAME_INVITES_V2 = 20010;
		REQUEST_TYPE_SOCIAL_ACTION_UPDATE_INCOMING_GAME_INVITE_V2 = 20011;
		REQUEST_TYPE_SOCIAL_ACTION_DISMISS_OUTGOING_GAME_INVITES_V2 = 20012;
		REQUEST_TYPE_SOCIAL_ACTION_SYNC_CONTACT_LIST_V2 = 20013;
		REQUEST_TYPE_SOCIAL_ACTION_SEND_CONTACT_LIST_FRIEND_INVITE_V2 = 20014;
		REQUEST_TYPE_SOCIAL_ACTION_REFER_CONTACT_LIST_FRIEND_V2 = 20015;
		REQUEST_TYPE_SOCIAL_ACTION_GET_CONTACT_LIST_INFO_V2 = 20016;
		REQUEST_TYPE_SOCIAL_ACTION_DISMISS_CONTACT_LIST_UPDATE_V2 = 20017;
		REQUEST_TYPE_SOCIAL_ACTION_NOTIFY_CONTACT_LIST_FRIENDS_V2 = 20018;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_6 = 20019;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_7 = 20020;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_3 = 20400;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_4 = 20401;
		REQUEST_TYPE_SOCIAL_ACTION_RESERVED_ACTION_5 = 20402;
		REQUEST_TYPE_REQUEST_GEOFENCE_UPDATES_1 = 360000;
		REQUEST_TYPE_UPDATE_PLAYER_LOCATION_1 = 360001;
		REQUEST_TYPE_UPDATE_BREADCRUMB_HISTORY = 361000;
		REQUEST_TYPE_REFRESH_PROXIMITY_TOKENS = 362000;
		REQUEST_TYPE_REPORT_PROXIMITY_CONTACTS = 362001;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ADD_NEW_POI = 620000;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AVAILABLE_SUBMISSIONS = 620001;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_SIGNED_URL_FOR_PHOTO_UPLOAD = 620002;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_PLAYER_SUBMISSION_VALIDATION_SETTINGS = 620003;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_IMAGE = 620100;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE = 620101;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_LOCATION_UPDATE = 620102;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST = 620103;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_REPORT = 620104;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_LOCATION_UPDATE = 620105;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_CATEGORY_VOTE = 620106;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ADD_NEW_ROUTE = 620200;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GENERATE_GMAP_SIGNED_URL = 620300;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_GMAP_SETTINGS = 620301;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_AR_VIDEO_METADATA = 620400;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_GRAPESHOT_FILE_UPLOAD_URL = 620401;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ASYNC_FILE_UPLOAD_COMPLETE = 620402;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AR_MAPPING_SETTINGS = 620403;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGES_FOR_POI = 620500;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_PLAYER_IMAGE_VOTE_FOR_POI = 620501;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGE_GALLERY_SETTINGS = 620502;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_MAP_DATA = 620600;
		REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_POIS_IN_RADIUS = 620601;
		REQUEST_TYPE_UPDATE_FITNESS_METRICS_1 = 640000;
		REQUEST_TYPE_GET_FITNESS_REPORT_1 = 640001;
		REQUEST_TYPE_GET_ADVENTURE_SYNC_SETTINGS_1 = 640002;
		REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_SETTINGS_1 = 640003;
		REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_FITNESS = 640004;
		REQUEST_TYPE_GET_ADVENTURE_SYNC_FITNESS_REPORT = 640005;
	}

	message AllMessagesProto {
		optional GetPlayerProto get_player_proto_2 = 2;
		optional GetHoloholoInventoryProto get_holoholo_inventory_proto_4 = 4;
		optional DownloadSettingsActionProto download_settings_action_proto_5 = 5;
		optional GetGameMasterClientTemplatesProto getgame_master_client_templates_proto_6 = 6;
		optional GetRemoteConfigVersionsProto get_remote_config_versions_proto_7 = 7;
		optional RegisterBackgroundDeviceActionProto register_background_device_action_proto_8 = 8;
		optional GetPlayerDayProto get_player_day_proto_9 = 9;
		optional AcknowledgePunishmentProto acknowledge_punishment_proto_10 = 10;
		optional GetServerTimeProto get_server_time_proto_11 = 11;
		optional GetLocalTimeProto get_local_time_proto_12 = 12;
		optional FortSearchProto fort_search_proto_101 = 101;
		optional EncounterProto encounter_proto_102 = 102;
		optional CatchPokemonProto catch_pokemon_proto_103 = 103;
		optional FortDetailsProto fort_details_proto_104 = 104;
		optional GetMapObjectsProto get_map_objects_proto_106 = 106;
		optional FortDeployProto fort_deploy_proto_110 = 110;
		optional FortRecallProto fort_recall_proto_111 = 111;
		optional ReleasePokemonProto release_pokemon_proto_112 = 112;
		optional UseItemPotionProto use_item_potion_proto_113 = 113;
		optional UseItemCaptureProto use_item_capture_proto_114 = 114;
		optional UseItemReviveProto use_item_revive_proto_116 = 116;
		optional PlayerProfileProto playerprofileproto_121 = 121;
		optional EvolvePokemonProto evolve_pokemon_proto_125 = 125;
		optional GetHatchedEggsProto get_hatched_eggs_proto_126 = 126;
		optional EncounterTutorialCompleteProto encounter_tutorial_complete_proto_127 = 127;
		optional LevelUpRewardsProto level_up_rewards_proto_128 = 128;
		optional CheckAwardedBadgesProto check_awarded_badges_proto_129 = 129;
		optional RecycleItemProto recycle_item_proto_137 = 137;
		optional CollectDailyBonusProto collect_daily_bonus_proto_138 = 138;
		optional UseItemXpBoostProto use_item_xp_boost_proto_139 = 139;
		optional UseItemEggIncubatorProto use_item_egg_incubator_proto_140 = 140;
		optional UseIncenseActionProto use_incense_action_proto_141 = 141;
		optional GetIncensePokemonProto get_incense_pokemon_proto_142 = 142;
		optional IncenseEncounterProto incense_encounter_proto_143 = 143;
		optional AddFortModifierProto add_fort_modifier_proto_144 = 144;
		optional DiskEncounterProto disk_encounter_proto_145 = 145;
		optional UpgradePokemonProto upgrade_pokemon_proto_147 = 147;
		optional SetFavoritePokemonProto set_favorite_pokemon_proto_148 = 148;
		optional NicknamePokemonProto nickname_pokemon_proto_149 = 149;
		optional EquipBadgeProto equip_badge_proto_150 = 150;
		optional SetContactSettingsProto set_contactsettings_proto_151 = 151;
		optional SetBuddyPokemonProto set_buddy_pokemon_proto_152 = 152;
		optional GetBuddyWalkedProto get_buddy_walked_proto_153 = 153;
		optional UseItemEncounterProto use_item_encounter_proto_154 = 154;
		optional GymDeployProto gym_deploy_proto_155 = 155;
		optional GymGetInfoProto gymget_info_proto_156 = 156;
		optional GymStartSessionProto gym_start_session_proto_157 = 157;
		optional GymBattleAttackProto gym_battle_attack_proto_158 = 158;
		optional JoinLobbyProto join_lobby_proto_159 = 159;
		optional LeaveLobbyProto leavelobby_proto_160 = 160;
		optional SetLobbyVisibilityProto set_lobby_visibility_proto_161 = 161;
		optional SetLobbyPokemonProto set_lobby_pokemon_proto_162 = 162;
		optional GetRaidDetailsProto get_raid_details_proto_163 = 163;
		optional GymFeedPokemonProto gym_feed_pokemon_proto_164 = 164;
		optional StartRaidBattleProto start_raid_battle_proto_165 = 165;
		optional AttackRaidBattleProto attack_raid_battle_proto_166 = 166;
		optional UseItemStardustBoostProto use_item_stardust_boost_proto_168 = 168;
		optional ReassignPlayerProto reassign_player_proto_169 = 169;
		optional ConvertCandyToXlCandyProto convertcandy_to_xlcandy_proto_171 = 171;
		optional IsSkuAvailableProto is_sku_available_proto_172 = 172;
		optional AssetDigestRequestProto asset_digest_request_proto_300 = 300;
		optional DownloadUrlRequestProto download_url_request_proto_301 = 301;
		optional AssetVersionProto asset_version_proto_302 = 302;
		optional ClaimCodenameRequestProto claimcodename_request_proto_403 = 403;
		optional SetAvatarProto set_avatar_proto_404 = 404;
		optional SetPlayerTeamProto set_player_team_proto_405 = 405;
		optional MarkTutorialCompleteProto mark_tutorial_complete_proto_406 = 406;
		optional CheckChallengeProto checkchallenge_proto_600 = 600;
		optional VerifyChallengeProto verify_challenge_proto_601 = 601;
		optional EchoProto echo_proto_666 = 666;
		optional RegisterSfidaRequest register_sfidarequest_800 = 800;
		optional SfidaCertificationRequest sfida_certification_request_802 = 802;
		optional SfidaUpdateRequest sfida_update_request_803 = 803;
		optional SfidaDowserRequest sfida_dowser_request_805 = 805;
		optional SfidaCaptureRequest sfida_capture_request_806 = 806;
		optional ListAvatarCustomizationsProto list_avatar_customizations_proto_807 = 807;
		optional SetAvatarItemAsViewedProto set_avatar_item_as_viewed_proto_808 = 808;
		optional GetInboxV2Proto get_inbox_v2_proto_809 = 809;
		optional ListGymBadgesProto list_gym_badges_proto_811 = 811;
		optional GetGymBadgeDetailsProto getgym_badge_details_proto_812 = 812;
		optional UseItemMoveRerollProto use_item_move_reroll_proto_813 = 813;
		optional UseItemRareCandyProto use_item_rare_candy_proto_814 = 814;
		optional AwardFreeRaidTicketProto award_free_raid_ticket_proto_815 = 815;
		optional FetchAllNewsProto fetch_all_news_proto_816 = 816;
		optional MarkReadNewsArticleProto mark_read_news_article_proto_817 = 817;
		optional GetPlayerSettingsProto get_player_settings_proto_818 = 818;
		optional BelugaTransactionStartProto beluga_transaction_start_proto_819 = 819;
		optional BelugaTransactionCompleteProto beluga_transaction_complete_proto_820 = 820;
		optional SfidaAssociateRequest sfida_associate_request_822 = 822;
		optional SfidaCheckPairingRequest sfida_check_pairing_request_823 = 823;
		optional SfidaDisassociateRequest sfida_disassociate_request_824 = 824;
		optional WainaSubmitSleepDataRequest waina_submit_sleep_data_request_826 = 826;
		optional GetNewQuestsProto get_new_quests_proto_900 = 900;
		optional GetQuestDetailsProto get_quest_details_proto_901 = 901;
		optional RemoveQuestProto remove_quest_proto_903 = 903;
		optional QuestEncounterProto quest_encounter_proto_904 = 904;
		optional ProgressQuestProto progress_questproto_906 = 906;
		optional SendGiftProto send_gift_proto_950 = 950;
		optional OpenGiftProto open_gift_proto_951 = 951;
		optional DeleteGiftProto delete_gift_proto_953 = 953;
		optional SavePlayerSnapshotProto save_playersnapshot_proto_954 = 954;
		optional CheckSendGiftProto check_send_gift_proto_956 = 956;
		optional SetFriendNicknameProto set_friend_nickname_proto_957 = 957;
		optional DeleteGiftFromInventoryProto delete_gift_from_inventory_proto_958 = 958;
		optional SaveSocialPlayerSettingsProto savesocial_playersettings_proto_959 = 959;
		optional ShareExRaidPassProto share_ex_raid_pass_proto_960 = 960;
		optional CheckShareExRaidPassProto check_share_ex_raid_pass_proto_961 = 961;
		optional DeclineExRaidPassProto decline_ex_raid_pass_proto_962 = 962;
		optional OpenTradingProto open_trading_proto_970 = 970;
		optional UpdateTradingProto update_trading_proto_971 = 971;
		optional ConfirmTradingProto confirm_trading_proto_972 = 972;
		optional CancelTradingProto cancel_trading_proto_973 = 973;
		optional GetTradingProto get_trading_proto_974 = 974;
		optional GetFitnessRewardsProto get_fitness_rewards_proto_980 = 980;
		optional GetCombatPlayerProfileProto get_combat_player_profile_proto_990 = 990;
		optional GenerateCombatChallengeIdProto generate_combat_challenge_id_proto_991 = 991;
		optional CreateCombatChallengeProto createcombatchallenge_proto_992 = 992;
		optional OpenCombatChallengeProto open_combat_challenge_proto_993 = 993;
		optional GetCombatChallengeProto get_combat_challenge_proto_994 = 994;
		optional AcceptCombatChallengeProto accept_combat_challenge_proto_995 = 995;
		optional DeclineCombatChallengeProto decline_combat_challenge_proto_996 = 996;
		optional CancelCombatChallengeProto cancelcombatchallenge_proto_997 = 997;
		optional SubmitCombatChallengePokemonsProto submit_combat_challenge_pokemons_proto_998 = 998;
		optional SaveCombatPlayerPreferencesProto save_combat_player_preferences_proto_999 = 999;
		optional OpenCombatSessionProto open_combat_session_proto_1000 = 1000;
		optional UpdateCombatProto update_combat_proto_1001 = 1001;
		optional QuitCombatProto quit_combat_proto_1002 = 1002;
		optional GetCombatResultsProto get_combat_results_proto_1003 = 1003;
		optional UnlockPokemonMoveProto unlock_pokemon_move_proto_1004 = 1004;
		optional GetNpcCombatRewardsProto get_npc_combat_rewards_proto_1005 = 1005;
		optional CombatFriendRequestProto combat_friend_request_proto_1006 = 1006;
		optional OpenNpcCombatSessionProto open_npc_combat_session_proto_1007 = 1007;
		optional StartTutorialProto start_tutorial_proto_1008 = 1008;
		optional GetTutorialEggProto get_tutorial_egg_proto_1009 = 1009;
		optional SendProbeProto send_probe_proto_1020 = 1020;
		optional CheckPhotobombProto check_photobomb_proto_1101 = 1101;
		optional ConfirmPhotobombProto confirm_photobomb_proto_1102 = 1102;
		optional GetPhotobombProto get_photobomb_proto_1103 = 1103;
		optional EncounterPhotobombProto encounter_photobomb_proto_1104 = 1104;
		optional GetGmapSettingsProto getgmap_settings_proto_1105 = 1105;
		optional ChangeTeamProto change_team_proto_1106 = 1106;
		optional GetWebTokenProto get_web_token_proto_1107 = 1107;
		optional CompleteSnapshotSessionProto complete_snapshot_session_proto_1110 = 1110;
		optional CompleteWildSnapshotSessionProto complete_wild_snapshot_session_proto_1111 = 1111;
		optional StartIncidentProto start_incident_proto_1200 = 1200;
		optional CompleteInvasionDialogueProto complete_invasion_dialogue_proto_1201 = 1201;
		optional OpenInvasionCombatSessionProto open_invasion_combat_session_proto_1202 = 1202;
		optional UpdateInvasionBattleProto update_invasion_battle_proto_1203 = 1203;
		optional InvasionEncounterProto invasion_encounter_proto_1204 = 1204;
		optional PurifyPokemonProto purifypokemonproto_1205 = 1205;
		optional GetRocketBalloonProto get_rocket_balloon_proto_1206 = 1206;
		optional StartRocketBalloonIncidentProto start_rocket_balloon_incident_proto_1207 = 1207;
		optional VsSeekerStartMatchmakingProto vs_seeker_start_matchmaking_proto_1300 = 1300;
		optional CancelMatchmakingProto cancel_matchmaking_proto_1301 = 1301;
		optional GetMatchmakingStatusProto get_matchmaking_status_proto_1302 = 1302;
		optional CompleteVsSeekerAndRestartChargingProto complete_vs_seeker_and_restartcharging_proto_1303 = 1303;
		optional GetVsSeekerStatusProto get_vs_seeker_status_proto_1304 = 1304;
		optional CompleteCompetitiveSeasonProto completecompetitive_season_proto_1305 = 1305;
		optional ClaimVsSeekerRewardsProto claim_vs_seeker_rewards_proto_1306 = 1306;
		optional VsSeekerRewardEncounterProto vs_seeker_reward_encounter_proto_1307 = 1307;
		optional ActivateVsSeekerProto activate_vs_seeker_proto_1308 = 1308;
		optional BuddyMapProto buddy_map_proto_1350 = 1350;
		optional BuddyStatsProto buddy_stats_proto_1351 = 1351;
		optional BuddyFeedingProto buddy_feeding_proto_1352 = 1352;
		optional OpenBuddyGiftProto open_buddy_gift_proto_1353 = 1353;
		optional BuddyPettingProto buddy_petting_proto_1354 = 1354;
		optional GetBuddyHistoryProto get_buddy_history_proto_1355 = 1355;
		optional UpdateRouteDraftProto update_route_draft_proto_1400 = 1400;
		optional GetMapFortsProto get_map_forts_proto_1401 = 1401;
		optional SubmitRouteDraftProto submit_route_draft_proto_1402 = 1402;
		optional GetPublishedRoutesProto get_published_routes_proto_1403 = 1403;
		optional StartRouteProto start_route_proto_1404 = 1404;
		optional GetRoutesProto get_routes_proto_1405 = 1405;
		optional ProgressRouteProto progress_routeproto_1406 = 1406;
		optional ProcessRouteWaypointInteractionProto process_route_waypoint_interactionproto_1407 = 1407;
		optional ProcessRouteTappableProto process_route_tappableproto_1408 = 1408;
		optional ListRouteBadgesProto list_route_badges_proto_1409 = 1409;
		optional CancelRouteProto cancel_route_proto_1410 = 1410;
		optional CreateBuddyMultiplayerSessionProto create_buddy_multiplayer_session_proto_1456 = 1456;
		optional JoinBuddyMultiplayerSessionProto join_buddy_multiplayer_session_proto_1457 = 1457;
		optional LeaveBuddyMultiplayerSessionProto leave_buddy_multiplayer_session_proto_1458 = 1458;
		optional GetTodayViewProto get_today_view_proto_1501 = 1501;
		optional MegaEvolvePokemonProto mega_evolve_pokemon_proto_1502 = 1502;
		optional RemoteGiftPingRequestProto remote_gift_pingrequest_proto_1503 = 1503;
		optional SendRaidInvitationProto send_raid_invitation_proto_1504 = 1504;
		optional GetDailyEncounterProto get_daily_encounter_proto_1601 = 1601;
		optional DailyEncounterProto daily_encounter_proto_1602 = 1602;
		optional OpenSponsoredGiftProto open_sponsored_gift_proto_1650 = 1650;
		optional SavePlayerPreferencesProto save_player_preferences_proto_1652 = 1652;
		optional ProfanityCheckProto profanity_checkproto_1653 = 1653;
		optional GetTimedGroupChallengeProto get_timedgroup_challenge_proto_1700 = 1700;
		optional GetNintendoAccountProto get_nintendo_account_proto_1710 = 1710;
		optional UnlinkNintendoAccountProto unlink_nintendo_account_proto_1711 = 1711;
		optional GetNintendoOAuth2UrlProto get_nintendo_o_auth2_url_proto_1712 = 1712;
		optional TransferPokemonToPokemonHomeProto transfer_pokemonto_pokemon_home_proto_1713 = 1713;
		optional ReportAdFeedbackRequest report_ad_feedbackrequest_1716 = 1716;
		optional CreatePokemonTagProto create_pokemon_tag_proto_1717 = 1717;
		optional DeletePokemonTagProto delete_pokemon_tag_proto_1718 = 1718;
		optional EditPokemonTagProto edit_pokemon_tag_proto_1719 = 1719;
		optional SetPokemonTagsForPokemonProto set_pokemon_tags_for_pokemon_proto_1720 = 1720;
		optional GetPokemonTagsProto get_pokemon_tags_proto_1721 = 1721;
		optional ChangePokemonFormProto change_pokemon_form_proto_1722 = 1722;
		optional ChooseGlobalTicketedEventVariantProto choose_global_ticketed_event_variant_proto_1723 = 1723;
		optional GetReferralCodeProto get_referral_code_proto_1800 = 1800;
		optional AddReferrerProto add_referrer_proto_1801 = 1801;
		optional SendFriendInviteViaReferralCodeProto send_friend_invite_via_referral_code_proto_1802 = 1802;
		optional GetMilestonesProto get_milestones_proto_1803 = 1803;
		optional MarkMilestoneAsViewedProto markmilestone_as_viewed_proto_1804 = 1804;
		optional GetMilestonesPreviewProto get_milestones_preview_proto_1805 = 1805;
		optional CompleteMilestoneProto complete_milestone_proto_1806 = 1806;
		optional GetGeofencedAdProto getgeofenced_ad_proto_1820 = 1820;
		optional CreatePostcardProto create_postcard_proto_1910 = 1910;
		optional UpdatePostcardProto update_postcard_proto_1911 = 1911;
		optional DeletePostcardProto delete_postcard_proto_1912 = 1912;
		optional GetMementoListProto get_memento_list_proto_1913 = 1913;
		optional UploadRaidClientLogProto upload_raid_client_log_proto_1914 = 1914;
		optional CheckGiftingEligibilityProto check_gifting_eligibility_proto_2000 = 2000;
		optional RedeemTicketGiftForFriendProto redeem_ticket_gift_for_friend_proto_2001 = 2001;
		optional PushNotificationRegistryProto push_notification_registryproto_5000 = 5000;
		optional UpdateNotificationProto update_notification_proto_5002 = 5002;
		optional DownloadGmTemplatesRequestProto download_gm_templates_request_proto_5004 = 5004;
		optional GetInventoryProto get_inventory_proto_5005 = 5005;
		optional RedeemPasscodeRequestProto redeem_passcoderequest_proto_5006 = 5006;
		optional PingRequestProto ping_requestproto_5007 = 5007;
		optional AddLoginActionProto add_loginaction_proto_5008 = 5008;
		optional RemoveLoginActionProto remove_login_action_proto_5009 = 5009;
		optional SubmitNewPoiProto submit_new_poi_proto_5011 = 5011;
		optional ProxyRequestProto proxy_requestproto_5012 = 5012;
		optional GetAvailableSubmissionsProto get_available_submissions_proto_5014 = 5014;
		optional PurchaseSkuProto purchase_skuproto_5019 = 5019;
		optional GetAvailableSkusAndBalancesProto get_available_skus_and_balances_proto_5020 = 5020;
		optional RedeemGoogleReceiptProto redeem_googlereceipt_proto_5021 = 5021;
		optional RedeemAppleReceiptProto redeem_applereceipt_proto_5022 = 5022;
		optional FitnessUpdateProto fitness_update_proto_5024 = 5024;
		optional GetFitnessReportProto get_fitness_report_proto_5025 = 5025;
		optional ClientTelemetrySettingsRequestProto client_telemetry_settings_request_proto_5026 = 5026;
		optional SetInGameCurrencyExchangeRateProto set_in_game_currency_exchange_rate_proto_5032 = 5032;
		optional GeofenceUpdateProto geofence_update_proto_5033 = 5033;
		optional LocationPingProto location_ping_proto_5034 = 5034;
		optional GenerateGmapSignedUrlProto generategmap_signed_url_proto_5035 = 5035;
		optional GetGmapSettingsProto getgmap_settings_proto_5036 = 5036;
		optional RedeemSamsungReceiptProto redeem_samsungreceipt_proto_5037 = 5037;
		optional SubmitPoiImageProto submit_poi_image_proto_5041 = 5041;
		optional SubmitPoiTextMetadataUpdateProto submit_poi_text_metadata_update_proto_5042 = 5042;
		optional SubmitPoiLocationUpdateProto submit_poi_location_update_proto_5043 = 5043;
		optional SubmitPoiTakedownRequestProto submit_poi_takedown_request_proto_5044 = 5044;
		optional GetWebTokenProto get_web_token_proto_5045 = 5045;
		optional GetAdventureSyncSettingsRequestProto get_adventure_sync_settings_request_proto_5046 = 5046;
		optional UpdateAdventureSyncSettingsRequestProto update_adventure_sync_settings_request_proto_5047 = 5047;
		optional UpdateAdventureSyncSettingsRequestProto update_adventure_sync_settings_request_proto_5048 = 5048;
		optional SearchPlayerProto search_player_proto_10000 = 10000;
		optional SendFriendInviteProto send_friend_invite_proto_10002 = 10002;
		optional CancelFriendInviteProto cancel_friend_invite_proto_10003 = 10003;
		optional AcceptFriendInviteProto accept_friend_invite_proto_10004 = 10004;
		optional DeclineFriendInviteProto decline_friend_invite_proto_10005 = 10005;
		optional ListFriendsRequest list_friends_request_10006 = 10006;
		optional GetOutgoingFriendInvitesProto get_outgoing_friend_invites_proto_10007 = 10007;
		optional GetIncomingFriendInvitesProto get_incoming_friend_invites_proto_10008 = 10008;
		optional RemoveFriendProto remove_friend_proto_10009 = 10009;
		optional GetFriendDetailsProto get_friend_details_proto_10010 = 10010;
		optional InviteFacebookFriendProto invite_facebook_friend_proto_10011 = 10011;
		optional IsMyFriendProto is_my_friend_proto_10012 = 10012;
		optional GetFriendCodeProto get_friend_code_proto_10013 = 10013;
		optional GetFacebookFriendListProto get_facebook_friend_list_proto_10014 = 10014;
		optional UpdateFacebookStatusProto update_facebook_status_proto_10015 = 10015;
		optional SaveSocialPlayerSettingsProto savesocial_playersettings_proto_10016 = 10016;
		optional GetPlayerSettingsProto get_player_settings_proto_10017 = 10017;
		optional SetAccountSettingsProto set_accountsettings_proto_10021 = 10021;
		optional GetAccountSettingsProto get_account_settings_proto_10022 = 10022;
		optional PushNotificationRegistryProto push_notification_registryproto_10101 = 10101;
		optional UpdateNotificationProto update_notification_proto_10103 = 10103;
		optional GetInboxV2Proto get_inbox_v2_proto_10105 = 10105;
		optional UpdateProfileRequest update_profile_request_20001 = 20001;
		optional UpdateFriendshipRequest update_friendship_request_20002 = 20002;
		optional GetProfileRequest get_profile_request_20003 = 20003;
		optional InviteGameRequest invite_game_request_20004 = 20004;
		optional ListFriendsRequest list_friends_request_20006 = 20006;
		optional GetFriendDetailsProto get_friend_details_proto_20007 = 20007;
		optional GetClientFeatureFlagsRequest get_client_feature_flags_request_20008 = 20008;
		optional GetIncomingGameInvitesRequest get_incominggame_invites_request_20010 = 20010;
		optional UpdateIncomingGameInviteRequest update_incoming_game_invite_request_20011 = 20011;
		optional DismissOutgoingGameInvitesRequest dismiss_outgoing_game_invites_request_20012 = 20012;
		optional SyncContactListRequest sync_contact_list_request_20013 = 20013;
		optional SendContactListFriendInviteRequest send_contact_list_friend_invite_request_20014 = 20014;
		optional ReferContactListFriendRequest refer_contact_list_friendrequest_20015 = 20015;
		optional GetContactListInfoRequest get_contact_list_info_request_20016 = 20016;
		optional DismissContactListUpdateRequest dismiss_contact_list_update_request_20017 = 20017;
		optional NotifyContactListFriendsRequest notify_contact_list_friends_request_20018 = 20018;
		optional GeofenceUpdateProto geofence_update_proto_360000 = 360000;
		optional LocationPingProto location_ping_proto_360001 = 360001;
		optional UpdateBreadcrumbHistoryRequestProto update_breadcrumb_history_request_proto_361000 = 361000;
		optional SubmitNewPoiProto submit_new_poi_proto_620000 = 620000;
		optional GetAvailableSubmissionsProto get_available_submissions_proto_620001 = 620001;
		optional GetPlayerSubmissionValidationSettingsProto get_player_submission_validation_settings_proto_620003 = 620003;
		optional SubmitPoiImageProto submit_poi_image_proto_620100 = 620100;
		optional SubmitPoiTextMetadataUpdateProto submit_poi_text_metadata_update_proto_620101 = 620101;
		optional SubmitPoiLocationUpdateProto submit_poi_location_update_proto_620102 = 620102;
		optional SubmitPoiTakedownRequestProto submit_poi_takedown_request_proto_620103 = 620103;
		optional SubmitSponsorPoiReportProto submitsponsor_poi_report_proto_620104 = 620104;
		optional SubmitSponsorPoiLocationUpdateProto submitsponsor_poi_location_update_proto_620105 = 620105;
		optional SubmitPoiCategoryVoteRecordProto submit_poi_category_vote_record_proto_620106 = 620106;
		optional GenerateGmapSignedUrlProto generategmap_signed_url_proto_620300 = 620300;
		optional GetGmapSettingsProto getgmap_settings_proto_620301 = 620301;
		optional PoiVideoSubmissionMetadataProto poi_video_submission_metadataproto_620400 = 620400;
		optional GetGrapeshotUploadUrlProto getgrapeshot_upload_url_proto_620401 = 620401;
		optional AsyncFileUploadCompleteProto async_file_upload_complete_proto_620402 = 620402;
		optional GetARMappingSettingsProto get_a_r_mapping_settings_proto_620403 = 620403;
		optional GetImagesForPoiProto get_images_for_poi_proto_620500 = 620500;
		optional SubmitPlayerImageVoteForPoiProto submit_player_image_vote_for_poi_proto_620501 = 620501;
		optional GetImageGallerySettingsProto get_imagegallery_settings_proto_620502 = 620502;
		optional GetPoisInRadiusProto get_pois_in_radius_proto_620601 = 620601;
		optional FitnessUpdateProto fitness_update_proto_640000 = 640000;
		optional GetFitnessReportProto get_fitness_report_proto_640001 = 640001;
		optional GetAdventureSyncSettingsRequestProto get_adventure_sync_settings_request_proto_640002 = 640002;
		optional UpdateAdventureSyncSettingsRequestProto update_adventure_sync_settings_request_proto_640003 = 640003;
		optional UpdateAdventureSyncFitnessRequestProto update_adventure_sync_fitness_request_proto_640004 = 640004;
		optional GetAdventureSyncFitnessReportRequestProto get_adventure_sync_fitness_report_request_proto_640005 = 640005;
	}

	message AllResponsesProto {
		optional GetPlayerOutProto get_player_out_proto_2 = 2;
		optional GetHoloholoInventoryOutProto get_holoholo_inventory_out_proto_4 = 4;
		optional DownloadSettingsResponseProto download_settings_response_proto_5 = 5;
		optional GetGameMasterClientTemplatesOutProto getgame_master_client_templates_out_proto_6 = 6;
		optional GetRemoteConfigVersionsOutProto get_remote_config_versions_out_proto_7 = 7;
		optional RegisterBackgroundDeviceResponseProto register_background_deviceresponse_proto_8 = 8;
		optional GetPlayerDayOutProto get_player_day_out_proto_9 = 9;
		optional AcknowledgePunishmentOutProto acknowledge_punishment_out_proto_10 = 10;
		optional GetServerTimeOutProto get_server_time_out_proto_11 = 11;
		optional GetLocalTimeOutProto get_local_time_out_proto_12 = 12;
		optional FortSearchOutProto fort_search_out_proto_101 = 101;
		optional EncounterOutProto encounter_out_proto_102 = 102;
		optional CatchPokemonOutProto catch_pokemon_out_proto_103 = 103;
		optional FortDetailsOutProto fort_details_out_proto_104 = 104;
		optional GetMapObjectsOutProto get_map_objects_out_proto_106 = 106;
		optional FortDeployOutProto fort_deploy_out_proto_110 = 110;
		optional FortRecallOutProto fort_recall_out_proto_111 = 111;
		optional ReleasePokemonOutProto release_pokemon_out_proto_112 = 112;
		optional UseItemPotionOutProto use_item_potion_out_proto_113 = 113;
		optional UseItemCaptureOutProto use_item_capture_out_proto_114 = 114;
		optional UseItemReviveOutProto use_item_revive_out_proto_116 = 116;
		optional PlayerProfileOutProto playerprofile_outproto_121 = 121;
		optional EvolvePokemonOutProto evolve_pokemon_out_proto_125 = 125;
		optional GetHatchedEggsOutProto get_hatched_eggs_out_proto_126 = 126;
		optional EncounterTutorialCompleteOutProto encounter_tutorial_complete_out_proto_127 = 127;
		optional LevelUpRewardsOutProto level_up_rewards_out_proto_128 = 128;
		optional CheckAwardedBadgesOutProto check_awarded_badges_out_proto_129 = 129;
		optional RecycleItemOutProto recycle_item_out_proto_137 = 137;
		optional CollectDailyBonusOutProto collect_daily_bonus_out_proto_138 = 138;
		optional UseItemXpBoostOutProto use_item_xp_boost_out_proto_139 = 139;
		optional UseItemEggIncubatorOutProto use_item_egg_incubator_out_proto_140 = 140;
		optional UseIncenseActionOutProto use_incense_action_out_proto_141 = 141;
		optional GetIncensePokemonOutProto get_incense_pokemon_out_proto_142 = 142;
		optional IncenseEncounterOutProto incense_encounter_out_proto_143 = 143;
		optional AddFortModifierOutProto add_fort_modifier_out_proto_144 = 144;
		optional DiskEncounterOutProto disk_encounter_out_proto_145 = 145;
		optional UpgradePokemonOutProto upgrade_pokemon_out_proto_147 = 147;
		optional SetFavoritePokemonOutProto set_favorite_pokemon_out_proto_148 = 148;
		optional NicknamePokemonOutProto nickname_pokemon_out_proto_149 = 149;
		optional EquipBadgeOutProto equip_badge_out_proto_150 = 150;
		optional SetContactSettingsOutProto set_contactsettings_out_proto_151 = 151;
		optional SetBuddyPokemonOutProto set_buddy_pokemon_out_proto_152 = 152;
		optional GetBuddyWalkedOutProto get_buddy_walked_out_proto_153 = 153;
		optional UseItemEncounterOutProto use_item_encounter_out_proto_154 = 154;
		optional GymDeployOutProto gym_deploy_out_proto_155 = 155;
		optional GymGetInfoOutProto gymget_info_out_proto_156 = 156;
		optional GymStartSessionOutProto gym_start_session_out_proto_157 = 157;
		optional GymBattleAttackOutProto gym_battle_attack_out_proto_158 = 158;
		optional JoinLobbyOutProto join_lobby_out_proto_159 = 159;
		optional LeaveLobbyOutProto leavelobby_out_proto_160 = 160;
		optional SetLobbyVisibilityOutProto set_lobby_visibility_out_proto_161 = 161;
		optional SetLobbyPokemonOutProto set_lobby_pokemon_out_proto_162 = 162;
		optional GetRaidDetailsOutProto get_raid_details_out_proto_163 = 163;
		optional GymFeedPokemonOutProto gym_feed_pokemon_out_proto_164 = 164;
		optional StartRaidBattleOutProto start_raid_battle_out_proto_165 = 165;
		optional AttackRaidBattleOutProto attack_raid_battle_out_proto_166 = 166;
		optional UseItemStardustBoostOutProto use_item_stardust_boost_out_proto_168 = 168;
		optional ReassignPlayerOutProto reassign_player_out_proto_169 = 169;
		optional ConvertCandyToXlCandyOutProto convertcandy_to_xlcandy_out_proto_171 = 171;
		optional IsSkuAvailableOutProto is_sku_available_out_proto_172 = 172;
		optional AssetDigestOutProto asset_digest_out_proto_300 = 300;
		optional DownloadUrlOutProto download_url_out_proto_301 = 301;
		optional AssetVersionOutProto asset_version_out_proto_302 = 302;
		optional SetAvatarOutProto set_avatar_out_proto_404 = 404;
		optional SetPlayerTeamOutProto set_player_team_out_proto_405 = 405;
		optional MarkTutorialCompleteOutProto mark_tutorial_complete_out_proto_406 = 406;
		optional CheckChallengeOutProto checkchallenge_out_proto_600 = 600;
		optional VerifyChallengeOutProto verify_challenge_out_proto_601 = 601;
		optional EchoOutProto echo_out_proto_666 = 666;
		optional RegisterSfidaResponse register_sfidaresponse_800 = 800;
		optional SfidaCertificationResponse sfida_certification_response_802 = 802;
		optional SfidaUpdateResponse sfida_update_response_803 = 803;
		optional SfidaDowserResponse sfida_dowser_response_805 = 805;
		optional SfidaCaptureResponse sfida_capture_response_806 = 806;
		optional ListAvatarCustomizationsOutProto list_avatar_customizations_out_proto_807 = 807;
		optional SetAvatarItemAsViewedOutProto set_avatar_item_as_viewed_out_proto_808 = 808;
		optional GetInboxOutProto get_inbox_out_proto_809 = 809;
		optional ListGymBadgesOutProto list_gym_badges_out_proto_811 = 811;
		optional GetGymBadgeDetailsOutProto getgym_badge_details_out_proto_812 = 812;
		optional UseItemMoveRerollOutProto use_item_move_reroll_out_proto_813 = 813;
		optional UseItemRareCandyOutProto use_item_rare_candy_out_proto_814 = 814;
		optional AwardFreeRaidTicketOutProto award_free_raid_ticket_out_proto_815 = 815;
		optional FetchAllNewsOutProto fetch_all_news_out_proto_816 = 816;
		optional MarkReadNewsArticleOutProto mark_read_news_article_out_proto_817 = 817;
		optional GetPlayerSettingsOutProto get_player_settings_out_proto_818 = 818;
		optional BelugaTransactionStartOutProto beluga_transaction_start_out_proto_819 = 819;
		optional BelugaTransactionCompleteOutProto beluga_transaction_complete_out_proto_820 = 820;
		optional SfidaAssociateResponse sfida_associate_response_822 = 822;
		optional SfidaCheckPairingResponse sfida_check_pairing_response_823 = 823;
		optional SfidaDisassociateResponse sfida_disassociate_response_824 = 824;
		optional WainaSubmitSleepDataResponse waina_submit_sleep_data_response_826 = 826;
		optional GetNewQuestsOutProto get_new_quests_out_proto_900 = 900;
		optional GetQuestDetailsOutProto get_quest_details_out_proto_901 = 901;
		optional RemoveQuestOutProto remove_quest_out_proto_903 = 903;
		optional QuestEncounterOutProto quest_encounter_out_proto_904 = 904;
		optional ProgressQuestOutProto progress_quest_outproto_906 = 906;
		optional SendGiftOutProto send_gift_out_proto_950 = 950;
		optional OpenGiftOutProto open_giftout_proto_951 = 951;
		optional DeleteGiftOutProto delete_gift_out_proto_953 = 953;
		optional SavePlayerSnapshotOutProto save_playersnapshot_out_proto_954 = 954;
		optional CheckSendGiftOutProto check_send_gift_out_proto_956 = 956;
		optional SetFriendNicknameOutProto set_friend_nickname_out_proto_957 = 957;
		optional DeleteGiftFromInventoryOutProto delete_gift_from_inventory_out_proto_958 = 958;
		optional SaveSocialPlayerSettingsOutProto savesocial_playersettings_out_proto_959 = 959;
		optional ShareExRaidPassOutProto share_ex_raid_pass_out_proto_960 = 960;
		optional CheckShareExRaidPassOutProto check_share_ex_raid_pass_out_proto_961 = 961;
		optional DeclineExRaidPassOutProto decline_ex_raid_pass_out_proto_962 = 962;
		optional OpenTradingOutProto open_tradingout_proto_970 = 970;
		optional UpdateTradingOutProto update_trading_out_proto_971 = 971;
		optional ConfirmTradingOutProto confirm_trading_out_proto_972 = 972;
		optional CancelTradingOutProto cancel_trading_out_proto_973 = 973;
		optional GetTradingOutProto get_trading_out_proto_974 = 974;
		optional GetFitnessRewardsOutProto get_fitness_rewards_out_proto_980 = 980;
		optional GetCombatPlayerProfileOutProto get_combat_player_profile_out_proto_990 = 990;
		optional GenerateCombatChallengeIdOutProto generate_combat_challenge_id_out_proto_991 = 991;
		optional CreateCombatChallengeOutProto createcombatchallenge_out_proto_992 = 992;
		optional OpenCombatChallengeOutProto open_combat_challengeout_proto_993 = 993;
		optional GetCombatChallengeOutProto get_combat_challenge_out_proto_994 = 994;
		optional AcceptCombatChallengeOutProto accept_combat_challenge_out_proto_995 = 995;
		optional DeclineCombatChallengeOutProto decline_combat_challenge_out_proto_996 = 996;
		optional CancelCombatChallengeOutProto cancelcombatchallenge_out_proto_997 = 997;
		optional SubmitCombatChallengePokemonsOutProto submit_combat_challenge_pokemons_out_proto_998 = 998;
		optional SaveCombatPlayerPreferencesOutProto save_combat_player_preferences_out_proto_999 = 999;
		optional OpenCombatSessionOutProto open_combat_sessionout_proto_1000 = 1000;
		optional UpdateCombatOutProto update_combat_out_proto_1001 = 1001;
		optional QuitCombatOutProto quit_combat_out_proto_1002 = 1002;
		optional GetCombatResultsOutProto get_combat_results_out_proto_1003 = 1003;
		optional UnlockPokemonMoveOutProto unlock_pokemon_move_out_proto_1004 = 1004;
		optional GetNpcCombatRewardsOutProto get_npc_combat_rewards_out_proto_1005 = 1005;
		optional CombatFriendRequestOutProto combat_friend_request_out_proto_1006 = 1006;
		optional OpenNpcCombatSessionOutProto open_npc_combat_sessionout_proto_1007 = 1007;
		optional StartTutorialOutProto start_tutorial_out_proto_1008 = 1008;
		optional GetTutorialEggOutProto get_tutorial_egg_out_proto_1009 = 1009;
		optional SendProbeOutProto send_probe_out_proto_1020 = 1020;
		optional CheckPhotobombOutProto check_photobomb_out_proto_1101 = 1101;
		optional ConfirmPhotobombOutProto confirm_photobomb_out_proto_1102 = 1102;
		optional GetPhotobombOutProto get_photobomb_out_proto_1103 = 1103;
		optional EncounterPhotobombOutProto encounter_photobomb_out_proto_1104 = 1104;
		optional GetGmapSettingsOutProto getgmap_settings_out_proto_1105 = 1105;
		optional ChangeTeamOutProto change_team_out_proto_1106 = 1106;
		optional GetWebTokenOutProto get_web_token_out_proto_1107 = 1107;
		optional CompleteSnapshotSessionOutProto complete_snapshot_session_out_proto_1110 = 1110;
		optional CompleteWildSnapshotSessionOutProto complete_wild_snapshot_session_out_proto_1111 = 1111;
		optional StartIncidentOutProto start_incident_out_proto_1200 = 1200;
		optional CompleteInvasionDialogueOutProto complete_invasion_dialogue_out_proto_1201 = 1201;
		optional OpenInvasionCombatSessionOutProto open_invasion_combat_sessionout_proto_1202 = 1202;
		optional UpdateInvasionBattleOutProto update_invasion_battle_out_proto_1203 = 1203;
		optional InvasionEncounterOutProto invasion_encounter_out_proto_1204 = 1204;
		optional PurifyPokemonOutProto purifypokemon_outproto_1205 = 1205;
		optional GetRocketBalloonOutProto get_rocket_balloon_out_proto_1206 = 1206;
		optional VsSeekerStartMatchmakingOutProto vs_seeker_start_matchmaking_out_proto_1300 = 1300;
		optional CancelMatchmakingOutProto cancel_matchmaking_out_proto_1301 = 1301;
		optional GetMatchmakingStatusOutProto get_matchmaking_status_out_proto_1302 = 1302;
		optional CompleteVsSeekerAndRestartChargingOutProto complete_vs_seeker_and_restartcharging_out_proto_1303 = 1303;
		optional GetVsSeekerStatusOutProto get_vs_seeker_status_out_proto_1304 = 1304;
		optional CompleteCompetitiveSeasonOutProto completecompetitive_season_out_proto_1305 = 1305;
		optional ClaimVsSeekerRewardsOutProto claim_vs_seeker_rewards_out_proto_1306 = 1306;
		optional VsSeekerRewardEncounterOutProto vs_seeker_reward_encounter_out_proto_1307 = 1307;
		optional ActivateVsSeekerOutProto activate_vs_seeker_out_proto_1308 = 1308;
		optional BuddyMapOutProto buddy_map_out_proto_1350 = 1350;
		optional BuddyStatsOutProto buddy_stats_out_proto_1351 = 1351;
		optional BuddyFeedingOutProto buddy_feeding_out_proto_1352 = 1352;
		optional OpenBuddyGiftOutProto open_buddy_giftout_proto_1353 = 1353;
		optional BuddyPettingOutProto buddy_petting_out_proto_1354 = 1354;
		optional GetBuddyHistoryOutProto get_buddy_history_out_proto_1355 = 1355;
		optional UpdateRouteDraftOutProto update_route_draft_out_proto_1400 = 1400;
		optional GetMapFortsOutProto get_map_forts_out_proto_1401 = 1401;
		optional SubmitRouteDraftOutProto submit_route_draft_out_proto_1402 = 1402;
		optional GetPublishedRoutesOutProto get_published_routes_out_proto_1403 = 1403;
		optional StartRouteOutProto start_route_out_proto_1404 = 1404;
		optional GetRoutesOutProto get_routes_out_proto_1405 = 1405;
		optional ProgressRouteOutProto progress_route_outproto_1406 = 1406;
		optional ProcessRouteWaypointInteractionOutProto process_route_waypoint_interaction_outproto_1407 = 1407;
		optional ProcessRouteTappableOutProto process_route_tappable_outproto_1408 = 1408;
		optional ListRouteBadgesOutProto list_route_badges_out_proto_1409 = 1409;
		optional CancelRouteOutProto cancel_route_out_proto_1410 = 1410;
		optional CreateBuddyMultiplayerSessionOutProto create_buddy_multiplayer_session_out_proto_1456 = 1456;
		optional JoinBuddyMultiplayerSessionOutProto join_buddy_multiplayer_session_out_proto_1457 = 1457;
		optional LeaveBuddyMultiplayerSessionOutProto leave_buddy_multiplayer_session_out_proto_1458 = 1458;
		optional GetTodayViewOutProto get_today_view_out_proto_1501 = 1501;
		optional MegaEvolvePokemonOutProto mega_evolve_pokemon_out_proto_1502 = 1502;
		optional RemoteGiftPingResponseProto remote_gift_pingresponse_proto_1503 = 1503;
		optional SendRaidInvitationOutProto send_raid_invitation_out_proto_1504 = 1504;
		optional GetDailyEncounterOutProto get_daily_encounter_out_proto_1601 = 1601;
		optional DailyEncounterOutProto daily_encounter_out_proto_1602 = 1602;
		optional OpenSponsoredGiftOutProto open_sponsored_giftout_proto_1650 = 1650;
		optional SavePlayerPreferencesOutProto save_player_preferences_out_proto_1652 = 1652;
		optional ProfanityCheckOutProto profanity_check_outproto_1653 = 1653;
		optional GetTimedGroupChallengeOutProto get_timedgroup_challenge_out_proto_1700 = 1700;
		optional GetNintendoAccountOutProto get_nintendo_account_out_proto_1710 = 1710;
		optional UnlinkNintendoAccountOutProto unlink_nintendo_account_out_proto_1711 = 1711;
		optional GetNintendoOAuth2UrlOutProto get_nintendo_o_auth2_url_out_proto_1712 = 1712;
		optional TransferPokemonToPokemonHomeOutProto transfer_pokemonto_pokemon_home_out_proto_1713 = 1713;
		optional ReportAdFeedbackResponse report_ad_feedbackresponse_1716 = 1716;
		optional CreatePokemonTagOutProto create_pokemon_tag_out_proto_1717 = 1717;
		optional DeletePokemonTagOutProto delete_pokemon_tag_out_proto_1718 = 1718;
		optional EditPokemonTagOutProto edit_pokemon_tag_out_proto_1719 = 1719;
		optional SetPokemonTagsForPokemonOutProto set_pokemon_tags_for_pokemon_out_proto_1720 = 1720;
		optional GetPokemonTagsOutProto get_pokemon_tags_out_proto_1721 = 1721;
		optional ChangePokemonFormOutProto change_pokemon_form_out_proto_1722 = 1722;
		optional ChooseGlobalTicketedEventVariantOutProto choose_global_ticketed_event_variant_out_proto_1723 = 1723;
		optional GetReferralCodeOutProto get_referral_code_out_proto_1800 = 1800;
		optional AddReferrerOutProto add_referrer_out_proto_1801 = 1801;
		optional SendFriendInviteViaReferralCodeOutProto send_friend_invite_via_referral_code_out_proto_1802 = 1802;
		optional GetMilestonesOutProto get_milestones_out_proto_1803 = 1803;
		optional MarkMilestoneAsViewedOutProto markmilestone_as_viewed_out_proto_1804 = 1804;
		optional GetMilestonesPreviewOutProto get_milestones_preview_out_proto_1805 = 1805;
		optional CompleteMilestoneOutProto complete_milestone_out_proto_1806 = 1806;
		optional GetGeofencedAdOutProto getgeofenced_ad_out_proto_1820 = 1820;
		optional CreatePostcardOutProto create_postcard_out_proto_1910 = 1910;
		optional UpdatePostcardOutProto update_postcard_out_proto_1911 = 1911;
		optional DeletePostcardOutProto delete_postcard_out_proto_1912 = 1912;
		optional GetMementoListOutProto get_memento_list_out_proto_1913 = 1913;
		optional UploadRaidClientLogOutProto upload_raid_client_log_out_proto_1914 = 1914;
		optional CheckGiftingEligibilityOutProto check_gifting_eligibility_out_proto_2000 = 2000;
		optional RedeemTicketGiftForFriendOutProto redeem_ticket_gift_for_friend_out_proto_2001 = 2001;
		optional PushNotificationRegistryOutProto push_notification_registry_outproto_5000 = 5000;
		optional UpdateNotificationOutProto update_notification_out_proto_5002 = 5002;
		optional OptOutProto optout_proto_5003 = 5003;
		optional DownloadGmTemplatesResponseProto download_gm_templates_response_proto_5004 = 5004;
		optional GetInventoryResponseProto get_inventory_response_proto_5005 = 5005;
		optional RedeemPasscodeResponseProto redeem_passcoderesponse_proto_5006 = 5006;
		optional PingResponseProto ping_responseproto_5007 = 5007;
		optional AddLoginActionOutProto add_loginaction_out_proto_5008 = 5008;
		optional RemoveLoginActionOutProto remove_login_action_out_proto_5009 = 5009;
		optional ListLoginActionOutProto listlogin_action_out_proto_5010 = 5010;
		optional SubmitNewPoiOutProto submit_new_poi_out_proto_5011 = 5011;
		optional ProxyResponseProto proxy_responseproto_5012 = 5012;
		optional GetAvailableSubmissionsOutProto get_available_submissions_out_proto_5014 = 5014;
		optional PurchaseSkuOutProto purchase_sku_outproto_5019 = 5019;
		optional GetAvailableSkusAndBalancesOutProto get_available_skus_and_balances_out_proto_5020 = 5020;
		optional RedeemGoogleReceiptOutProto redeem_googlereceipt_out_proto_5021 = 5021;
		optional RedeemAppleReceiptOutProto redeem_applereceipt_out_proto_5022 = 5022;
		optional FitnessUpdateOutProto fitness_update_out_proto_5024 = 5024;
		optional GetFitnessReportOutProto get_fitness_report_out_proto_5025 = 5025;
		optional SetInGameCurrencyExchangeRateOutProto set_in_game_currency_exchange_rate_out_proto_5032 = 5032;
		optional GeofenceUpdateOutProto geofence_update_out_proto_5033 = 5033;
		optional LocationPingOutProto location_ping_out_proto_5034 = 5034;
		optional GenerateGmapSignedUrlOutProto generategmap_signed_url_out_proto_5035 = 5035;
		optional GetGmapSettingsOutProto getgmap_settings_out_proto_5036 = 5036;
		optional RedeemSamsungReceiptOutProto redeem_samsungreceipt_out_proto_5037 = 5037;
		optional GetWebTokenOutProto get_web_token_out_proto_5045 = 5045;
		optional GetAdventureSyncSettingsResponseProto get_adventure_sync_settings_response_proto_5046 = 5046;
		optional UpdateAdventureSyncSettingsResponseProto update_adventure_sync_settings_response_proto_5047 = 5047;
		optional UpdateAdventureSyncSettingsResponseProto update_adventure_sync_settings_response_proto_5048 = 5048;
		optional SearchPlayerOutProto search_player_out_proto_10000 = 10000;
		optional SendFriendInviteOutProto send_friend_invite_out_proto_10002 = 10002;
		optional CancelFriendInviteOutProto cancel_friend_invite_out_proto_10003 = 10003;
		optional AcceptFriendInviteOutProto accept_friend_invite_out_proto_10004 = 10004;
		optional DeclineFriendInviteOutProto decline_friend_invite_out_proto_10005 = 10005;
		optional ListFriendsResponse list_friends_response_10006 = 10006;
		optional GetOutgoingFriendInvitesOutProto get_outgoing_friend_invites_out_proto_10007 = 10007;
		optional GetIncomingFriendInvitesOutProto get_incoming_friend_invites_out_proto_10008 = 10008;
		optional RemoveFriendOutProto remove_friend_out_proto_10009 = 10009;
		optional GetFriendDetailsOutProto get_friend_details_out_proto_10010 = 10010;
		optional InviteFacebookFriendOutProto invite_facebook_friend_out_proto_10011 = 10011;
		optional IsMyFriendOutProto is_my_friend_out_proto_10012 = 10012;
		optional GetFriendCodeOutProto get_friend_code_out_proto_10013 = 10013;
		optional GetFacebookFriendListOutProto get_facebook_friend_list_out_proto_10014 = 10014;
		optional UpdateFacebookStatusOutProto update_facebook_status_out_proto_10015 = 10015;
		optional SaveSocialPlayerSettingsOutProto savesocial_playersettings_out_proto_10016 = 10016;
		optional GetPlayerSettingsOutProto get_player_settings_out_proto_10017 = 10017;
		optional SetAccountSettingsOutProto set_accountsettings_out_proto_10021 = 10021;
		optional GetAccountSettingsOutProto get_account_settings_out_proto_10022 = 10022;
		optional PushNotificationRegistryOutProto push_notification_registry_outproto_10101 = 10101;
		optional UpdateNotificationOutProto update_notification_out_proto_10103 = 10103;
		optional OptOutProto optout_proto_10104 = 10104;
		optional GetInboxOutProto get_inbox_out_proto_10105 = 10105;
		optional UpdateProfileResponse update_profile_response_20001 = 20001;
		optional UpdateFriendshipResponse update_friendship_response_20002 = 20002;
		optional GetProfileResponse get_profile_response_20003 = 20003;
		optional InviteGameResponse invite_game_response_20004 = 20004;
		optional ListFriendsResponse list_friends_response_20006 = 20006;
		optional GetFriendDetailsOutProto get_friend_details_out_proto_20007 = 20007;
		optional GetClientFeatureFlagsResponse get_client_feature_flags_response_20008 = 20008;
		optional GetIncomingGameInvitesResponse get_incominggame_invites_response_20010 = 20010;
		optional UpdateIncomingGameInviteResponse update_incoming_game_invite_response_20011 = 20011;
		optional DismissOutgoingGameInvitesResponse dismiss_outgoing_game_invites_response_20012 = 20012;
		optional SyncContactListResponse sync_contact_list_response_20013 = 20013;
		optional SendContactListFriendInviteResponse send_contact_list_friend_invite_response_20014 = 20014;
		optional ReferContactListFriendResponse refer_contact_list_friendresponse_20015 = 20015;
		optional GetContactListInfoResponse get_contact_list_info_response_20016 = 20016;
		optional DismissContactListUpdateResponse dismiss_contact_list_update_response_20017 = 20017;
		optional NotifyContactListFriendsResponse notify_contact_list_friends_response_20018 = 20018;
		optional GeofenceUpdateOutProto geofence_update_out_proto_360000 = 360000;
		optional LocationPingOutProto location_ping_out_proto_360001 = 360001;
		optional UpdateBreadcrumbHistoryResponseProto update_breadcrumb_history_response_proto_361000 = 361000;
		optional SubmitNewPoiOutProto submit_new_poi_out_proto_620000 = 620000;
		optional GetAvailableSubmissionsOutProto get_available_submissions_out_proto_620001 = 620001;
		optional GetPlayerSubmissionValidationSettingsOutProto get_player_submission_validation_settings_out_proto_620003 = 620003;
		optional GenerateGmapSignedUrlOutProto generategmap_signed_url_out_proto_620300 = 620300;
		optional GetGmapSettingsOutProto getgmap_settings_out_proto_620301 = 620301;
		optional GetGrapeshotUploadUrlOutProto getgrapeshot_upload_url_out_proto_620401 = 620401;
		optional AsyncFileUploadCompleteOutProto async_file_upload_complete_out_proto_620402 = 620402;
		optional GetARMappingSettingsOutProto get_a_r_mapping_settings_out_proto_620403 = 620403;
		optional GetImagesForPoiOutProto get_images_for_poi_out_proto_620500 = 620500;
		optional SubmitPlayerImageVoteForPoiOutProto submit_player_image_vote_for_poi_out_proto_620501 = 620501;
		optional GetImageGallerySettingsOutProto get_imagegallery_settings_out_proto_620502 = 620502;
		optional GetPoisInRadiusOutProto get_pois_in_radius_out_proto_620601 = 620601;
		optional FitnessUpdateOutProto fitness_update_out_proto_640000 = 640000;
		optional GetFitnessReportOutProto get_fitness_report_out_proto_640001 = 640001;
		optional GetAdventureSyncSettingsResponseProto get_adventure_sync_settings_response_proto_640002 = 640002;
		optional UpdateAdventureSyncSettingsResponseProto update_adventure_sync_settings_response_proto_640003 = 640003;
		optional UpdateAdventureSyncFitnessResponseProto update_adventure_sync_fitness_response_proto_640004 = 640004;
		optional GetAdventureSyncFitnessReportResponseProto get_adventure_sync_fitness_report_response_proto_640005 = 640005;
	}
}

message AndroidDataSource {
	optional bool is_raw = 1;
	optional string app_package_name = 2;
	optional string stream_identifier = 3;
	optional string stream_name = 4;
	optional AndroidDevice device = 5;
	optional string data_type = 6;
}

message AndroidDevice {
	enum DeviceType {
		UNKNOWN = 0;
		PHONE = 1;
		TABLET = 2;
		WATCH = 3;
		CHEST_STRAP = 4;
		SCALE = 5;
		HEAD_MOUNTED = 6;
	}

	optional string manufacturer = 1;
	optional string model = 2;
	optional DeviceType type = 3;
	optional string uid = 4;
}

message AnimationOverrideProto {
	enum PokemonAnim {
		NONE = 0;
		IDLE_01 = 1;
		IDLE_02 = 2;
		LAND = 3;
		ATTACK_01 = 4;
		ATTACK_02 = 5;
		DAMAGED = 6;
		STUNNED = 7;
		LOOP = 8;
	}

	optional PokemonAnim animation = 1;
	optional bool blacklist = 2;
	optional float anim_min = 3;
	optional float anim_max = 4;
}

message ApnToken {
	optional string registration_id = 1;
	optional string bundle_identifier = 2;
	optional int32 payload_byte_size = 3;
}

message AppleToken {
	optional string id_token = 1;
}

message AppliedItemProto {
	optional Item item = 1;
	optional HoloItemType item_type = 2;
	optional int64 expiration_ms = 3;
	optional int64 applied_ms = 4;
}

message AppliedItemsProto {
	repeated AppliedItemProto item = 4;
}

message AppraisalStarThresholdSettings {
	optional int32 threshold_one_star = 1;
	optional int32 threshold_two_star = 2;
	optional int32 threshold_three_star = 3;
	optional int32 threshold_four_star = 4;
}

message ApprovedCommonTelemetryProto {
	optional CommonTelemetryBootTime boot_time = 1;
	optional CommonTelemetryShopClick shop_click = 2;
	optional CommonTelemetryShopView shop_view = 3;
	optional PoiSubmissionTelemetry poi_submission_telemetry = 4;
	optional PoiSubmissionPhotoUploadErrorTelemetry poi_submission_photo_upload_error_telemetry = 5;
	optional CommonTelemetryLogIn log_in = 6;
	optional CommonTelemetryOmniPushReceived omni_push_received = 7;
	optional CommonTelemetryOmniPushOpened omni_push_opened = 8;
	optional PoiCategorizationEntryTelemetry poi_categorization_entry_telemetry = 9;
	optional PoiCategorizationOperationTelemetry poi_categorization_operation_telemetry = 10;
	optional PoiCategorySelectedTelemetry poi_categorization_selected_telemetry = 11;
	optional PoiCategoryRemovedTelemetry poi_categorization_removed_telemetry = 12;
	optional WayfarerOnboardingFlowTelemetry wayfarer_onboarding_flow_telemetry = 13;
	optional ASPermissionFlowTelemetry as_permission_flow_telemetry = 14;

	optional ServerRecordMetadata server_data = 15;
	optional ClientTelemetryCommonFilterProto common_filters = 16;
}

message ArMappingSessionTelemetryProto {
	optional bool fulfilled_geotargeted_quest = 1;
}

message ArMappingSettingsProto {
	optional int32 min_hours_between_prompt = 1;
	optional int32 max_video_time_seconds = 2;
	optional int32 preview_video_bitrate_kbps = 3;
	optional int32 preview_video_deadline_ms = 4;
	optional int32 research_video_bitrate_kbps = 5;
	optional int32 research_video_deadline_ms = 6;
	optional int32 min_video_time_seconds = 7;
	optional int32 preview_frame_rate_fps = 8;
	optional int32 preview_frames_to_jump = 9;
	optional int32 max_upload_chunk_rejected_count = 10;
	optional int32 ardk_desired_accuracy_mm = 11;
	optional int32 ardk_update_distance_mm = 12;
	optional int32 max_pending_upload_kilobytes = 13;
	optional bool enable_sponsor_poi_scan = 14;
	optional int32 min_disk_space_needed_mb = 15;
	optional bool scan_validation_enabled = 16;
	optional float scan_validation_start_delay_s = 17;
	optional float scan_validation_lumens_min_threshold = 18;
	optional float scan_validation_lumens_smoothing_factor = 19;
	optional float scan_validation_average_pixel_threshold = 20;
	optional float scan_validation_average_pixel_smoothing_factor = 21;
	optional float scan_validation_speed_min_threshold_mper_s = 22;
	optional float scan_validation_speed_max_threshold_mper_s = 23;
	optional float scan_validation_speed_smoothing_factor = 24;
	optional float scan_validation_max_warning_time_s = 25;
	optional bool ar_recorder_v2_enabled = 26;
}

message ArMappingTelemetryProto {
	enum ArMappingEntryPoint {
		UNKNOWN_ENTRY = 0;
		POI_EDIT_MENU = 1;
		POI_EDIT_TITLE = 2;
		POI_EDIT_DESCRIPTION = 3;
		POI_ADD_PHOTO = 4;
		POI_EDIT_LOCATION = 5;
		POI_NOMINATION = 6;
		POI_FULLSCREEN_INSPECTION = 7;
		GEOTARGETED_QUESTS = 8;
	}

	enum ArMappingEventId {
		UNKNOWN = 0;
		ENTER_STATE = 1;
		OPT_IN_ACCEPT = 2;
		OPT_IN_DENY = 3;
		OPT_IN_SETTINGS = 4;
		OPT_OUT_SETTINGS = 5;
		EXIT_FROM_RECORDING = 6;
		START_RECORDING = 7;
		STOP_RECORDING = 8;
		CANCEL_ENCODING = 9;
		UPLOAD_NOW = 10;
		UPLOAD_LATER = 11;
		CANCEL_UPLOAD = 12;
		START_UPLOAD_SETTINGS = 13;
		UPLOAD_SUCCESS = 14;
		OPT_IN_LEARN_MORE = 15;
		EXIT_FROM_PREVIEW = 16;
		SUBMIT_POI_AR_VIDEO_METADATA_FAIL = 17;
		UPLOAD_FAILURE = 18;
		UPLOAD_LATER_WIFI_PROMPT = 19;
		CLEAR_SCANS = 20;
		OPEN_INFO_PANEL = 21;
		RESCAN_FROM_PREVIEW = 22;
		SCAN_VALIDATION_FAILURE = 23;
	}

	enum ArMappingValidationFailureReason {
		UNKNOWN_REASON = 0;
		TOO_FAST = 1;
		TOO_SLOW = 2;
		TOO_DARK = 3;
	}

	optional ArMappingEventId ar_mapping_telemetry_id = 1;
	optional ArMappingEntryPoint source = 2;
	optional float recording_length_seconds = 3;
	optional float time_elapsed_seconds = 4;
	optional float percent_encoded = 5;
	optional int64 data_size_bytes = 6;
	optional ArMappingValidationFailureReason validation_failure_reason = 7;
}

message ArPhotoGlobalSettings {
	optional int32 min_player_level = 1;
}

message ArPhotoSessionProto {
	enum ArContext {
		NONE = 0;
		AR_ENCOUNTER = 1;
		AR_SNAPSHOT = 2;
		SINGLEPLAYER_BUDDY = 3;
		MULTIPLAYER_BUDDY = 4;
	}

	enum ArType {
		UNSET = 0;
		PLUS = 1;
		CLASSIC = 2;
	}

	enum BatteryStatus {
		UNDETERMINED = 0;
		CHARGING = 1;
		DISCHARGING = 2;
		NOT_CHARGING = 3;
		FULL = 4;
	}

	enum Step {
		UNKNOWN = 0;
		CAMERA_PERMISSION_GRANTED = 1;
		ARPLUS_PLANE_FOUND = 2;
		ARPLUS_POKEMON_PLACED = 3;
		PHOTO_TAKEN = 4;
		PHOTO_SHARED = 5;
	}

	message ArConditions {
		optional int64 timestamp = 1;
		optional bool occlusions_enabled = 2;
		optional Step current_ar_step = 3;
	}

	message BatterySample {
		optional ArConditions conditions = 1;
		optional float battery_level = 2;
		optional BatteryStatus status = 3;
	}

	message FramerateSample {
		optional ArConditions conditions = 1;
		optional int32 framerate = 2;
	}

	message ProcessorSample {
		optional ArConditions conditions = 1;
		optional float cpu_usage = 2;
		optional float gpu_usage = 3;
	}

	optional ArType ar_type = 1;
	optional Step furthest_step_completed = 2;
	optional int32 num_photos_taken = 3;
	optional int32 num_photos_shared = 4;
	optional int32 num_photos_taken_occlusions = 5;
	optional int32 num_occlusions_enabled = 6;
	optional int32 num_occlusions_disabled = 7;
	optional ArContext ar_context = 8;
	optional int64 session_length = 9;
	optional int64 session_length_occlusions = 10;
	optional int32 num_photos_shared_occlusions = 11;
	optional string model_url = 12;
	optional string ardk_version = 13;
	optional int32 average_framerate = 14;
	optional float average_battery_per_min = 15;
	optional float average_cpu_usage = 16;
	optional float average_gpu_usage = 17;
	repeated FramerateSample framerate_samples = 18;
	repeated BatterySample battery_samples = 19;
	repeated ProcessorSample processor_samples = 20;
	optional int32 session_start_to_plane_detection_ms = 21;
	optional int32 plane_detection_to_user_interaction_ms = 22;
}

message ArTelemetrySettingsProto {
	optional bool measure_battery = 1;
	optional int32 battery_sampling_interval_ms = 2;
	optional bool measure_processor = 3;
	optional int32 processor_sampling_interval_ms = 4;
	optional bool measure_framerate = 5;
	optional int32 framerate_sampling_interval_ms = 6;
	optional float percentage_sessions_to_sample = 7;
}

message ArdkConfigSettingsProto {
	enum ArContext {
		UNSET = 0;
		AR_ENCOUNTER = 1;
		AR_SNAPSHOT = 2;
		SINGLEPLAYER_BUDDY = 3;
		MULTIPLAYER_BUDDY = 4;
	}

	optional string orb_vocab_url = 1;
	optional string monodpeth_model_url = 2;
	repeated string monodepth_devices = 3;
	repeated ArContext monodepth_contexts = 4;
	optional string ios_monodepth_model_url = 5;
	optional string android_monodepth_model_url = 6;
	optional string monodepth_model_url = 7;
}

message AssetBundleDownloadTelemetry {
	optional AssetTelemetryIds asset_event_id = 1;
	optional string bundle_name = 2;
	optional uint32 size = 3;
}

message AssetDigestEntryProto {
	optional string asset_id = 1;
	optional string bundle_name = 2;
	optional int64 version = 3;
	optional fixed32 checksum = 4;
	optional int32 size = 5;
	optional bytes key = 6;
}

message AssetDigestOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		PAGE = 2;
		RETRY = 3;
	}

	repeated AssetDigestEntryProto digest = 1;
	optional uint64 timestamp = 2;
	optional Result result = 3;
	optional int32 page_offset = 4;
}

message AssetDigestRequestProto {
	optional Platform platform = 1;
	optional string device_manufacturer = 2;
	optional string device_model = 3;
	optional string locale = 4;
	optional uint32 app_version = 5;
	optional bool paginate = 6;
	optional int32 page_offset = 7;
	optional uint64 page_timestamp = 8;
}

message AssetPoiDownloadTelemetry {
	optional AssetTelemetryIds asset_event_id = 1;
	optional string fort_id = 2;
	optional uint32 size = 3;
}

message AssetStreamCacheCulledTelemetry {
	optional AssetTelemetryIds asset_event_id = 1;
	optional uint32 space_released = 2;
}

message AssetStreamDownloadTelemetry {
	optional AssetTelemetryIds asset_event_id = 1;
	optional string url = 2;
	optional uint32 size = 3;
}

message AssetVersionOutProto {
	enum Result {
		UNSET = 0;
		ERROR = 1;
		VALID = 2;
		EXPIRED = 3;
	}

	message AssetVersionResponseProto {
		optional Result result = 1;
		optional AssetDigestEntryProto digest = 2;
		optional string url = 3;
	}

	repeated AssetVersionResponseProto response = 1;
}

message AssetVersionProto {
	message AssetVersionRequestProto {
		optional string asset_id = 1;
		optional fixed32 checksum = 2;
	}

	optional uint32 app_version = 1;
	repeated AssetVersionRequestProto request = 2;
}

message AsyncFileUploadCompleteOutProto {
	enum ErrorStatus {
		UNSET = 0;
		SERVER_UPDATE_FAILED = 1;
		MISSING_SUBMISSION_ID = 2;
		MISSING_SUBMISSION_TYPE = 3;
		MISSING_UPLOAD_STATUS = 4;
	}

	optional string poi_id = 1;
	optional bytes post_action_game_info = 2;
}

message AsyncFileUploadCompleteProto {
	enum Status {
		UNSET = 0;
		UPLOAD_DONE = 1;
		UPLOAD_FAILED = 2;
	}

	optional string submission_id = 1;
	optional Status upload_status = 2;
}

message AttackGymOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_ATTACK_ACTIONS = 2;
		ERROR_NOT_IN_RANGE = 3;
	}

	optional Result result = 1;
	optional BattleLogProto battle_log = 2;
	optional string battle_id = 3;
	optional PokemonInfo active_defender = 4;
	optional PokemonInfo active_attacker = 5;
	optional BattleUpdateProto battle_update = 6;
}

message AttackGymProto {
	optional string gym_id = 1;
	optional string battle_id = 2;
	repeated BattleActionProto attacker_actions = 3;
	optional BattleActionProto last_retrieved_action = 4;
	optional double player_lat_degrees = 5;
	optional double player_lng_degrees = 6;
}

message AttackRaidBattleOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_GYM_NOT_FOUND = 2;
		ERROR_BATTLE_NOT_FOUND = 3;
		ERROR_INVALID_ATTACK_ACTIONS = 4;
		ERROR_NOT_PART_OF_BATTLE = 5;
		ERROR_BATTLE_ID_NOT_RAID = 6;
	}

	optional Result result = 1;
	optional BattleUpdateProto battle_update = 2;
	optional AdDetails sponsored_gift = 3;
	optional AdProto ad = 4;
}

message AttackRaidBattleProto {
	optional string gym_id = 1;
	optional string battle_id = 2;
	repeated BattleActionProto attacker_actions = 3;
	optional BattleActionProto last_retrieved_action = 4;
	optional int64 timestamp_ms = 5;
	optional AdTargetingInfoProto ad_targeting_info = 6;
}

message AttackRaidDataLogDetails {
	optional BattleActionProto.ActionType ob_attack_raid_data_type = 1;
	optional uint32 ob_attack_raid_data_uint32_1 = 2;
	optional int32 ob_attack_raid_data_int32_1 = 3;
	optional int32 ob_attack_raid_data_int32_2 = 4;
	optional int32 ob_attack_raid_data_int32_3 = 5;
	optional int32 ob_attack_raid_data_int32_4 = 6;
	optional uint64 ob_attack_raid_data_uint64 = 7;
	optional uint32 ob_attack_raid_data_uint32_2 = 8;
	optional uint32 ob_attack_raid_data_uint32_3 = 9;
}

message AttackRaidDataProto {
	repeated AttackRaidDataLogDetails ob_details = 1;
	optional AttackRaidDataLogDetails ob_detail = 2;
	optional uint32 ob_attack_raid_data_uint32 = 3;
	optional int32 ob_attack_raid_data_int32 = 4;
}

message AttackRaidResponseDataProto {
	optional AttackRaidBattleOutProto.Result result = 1;
	optional BattleLogProto.State state = 2;
	optional uint32 ob_attack_raid_data_uint32_1 = 3;
	repeated AttackRaidDataLogDetails ob_details = 4;
	optional uint32 ob_attack_raid_data_uint32_2 = 5;
	optional uint32 ob_attack_raid_data_uint32_3 = 6;
	optional int32 ob_attack_raid_data_int32 = 7;
	optional uint32 ob_attack_raid_data_uint32_4 = 8;
}

message AvailableSkuProto {
	optional string id = 1;
	optional bool is_third_party_vendor_item = 2;
	repeated CurrencyQuantityProto price = 3;
	repeated CurrencyQuantityProto currency_granted = 4;
	repeated GameItemContentProto game_item_content = 5;
	repeated SkuPresentationProto presentation_data = 6;
	optional bool can_be_purchased = 7;
	optional string subscription_id = 8;
}

message AvailableSubmissionsPerSubmissionType {
	optional int32 submissions_left = 1;
	optional int32 min_player_level = 2;
	optional bool is_feature_enabled = 3;
	optional int64 time_window_for_submissions_limit_ms = 4;
	optional int32 max_poi_distance_in_meters = 5;
	repeated string blacklisted_os = 6;
	repeated string blacklisted_device_id = 7;
	optional bool is_whitelisted_user = 8;
	optional bool is_upload_later_enabled = 9;
	optional float daily_new_submissions = 10;
	optional int32 max_submissions = 11;
	optional bool is_wayfarer_onboarding_enabled = 12;
}

message AvatarCustomizationProto {
	enum AvatarCustomizationPromoType {
		UNSET_PROMO_TYPE = 0;
		SALE = 1;
		FEATURED = 2;
	}

	enum AvatarCustomizationUnlockType {
		UNSET_UNLOCK_TYPE = 0;
		DEFAULT = 1;
		MEDAL_REWARD = 2;
		IAP_CLOTHING = 3;
		LEVEL_REWARD = 4;
		COMBAT_RANK_REWARD = 5;
	}

	enum Slot {
		UNSET_SLOT = 0;
		HAIR = 1;
		SHIRT = 2;
		PANTS = 3;
		HAT = 4;
		SHOES = 5;
		EYES = 6;
		BACKPACK = 7;
		GLOVES = 8;
		SOCKS = 9;
		BELT = 10;
		GLASSES = 11;
		NECKLACE = 12;
		SKIN = 13;
		POSE = 14;
		FACE = 15;
		PROP = 16;
	}

	optional bool enabled = 1;
	optional PlayerAvatarType avatar_type = 2;
	repeated Slot slot = 3;
	optional string bundle_name = 4;
	optional string asset_name = 5;
	optional string group_name = 6;
	optional int32 sort_order = 7;
	optional AvatarCustomizationUnlockType unlock_type = 8;
	repeated AvatarCustomizationPromoType promo_type = 9;
	optional HoloBadgeType unlock_badge_type = 10;
	optional string iap_sku = 11;
	optional int32 unlock_badge_level = 12;
	optional string icon_name = 13;
	optional int32 unlock_player_level = 14;
	optional string set_name = 15;
	optional bool set_prime_item = 16;
	repeated string incompatible_bundle_names = 17;
}

message AvatarCustomizationTelemetry {
	optional AvatarCustomizationTelemetryIds avatar_customization_click_id = 1;
	optional string asset_name = 2;
	optional string sku = 3;
	optional bool has_enough_coins = 4;
	optional string group_name = 5;
	optional string color_choice_id = 6;
}

message AvatarGlobalSettingsProto {
	optional bool enable_pose = 1;
}

message AvatarGroupOrderSettingsProto {
	message AvatarGroupOrderProto {
		optional string name = 1;
		optional int32 order = 2;
		optional bool show_new_tag = 3;
	}

	repeated AvatarGroupOrderProto group = 1;
}

message AvatarItemProto {
	optional string avatar_template_id = 1;
	optional int64 new_timestamp_ms = 2;
	optional bool viewed = 3;
}

message AwardFreeRaidTicketOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_DOES_NOT_MEET_MIN_LEVEL = 2;
		ERROR_DAILY_TICKET_ALREADY_AWARDED = 3;
		ERROR_PLAYER_OUT_OF_RANGE = 4;
	}

	optional Result result = 1;
}

message AwardFreeRaidTicketProto {
	optional string gym_id = 1;
	optional double player_lat_degrees = 2;
	optional double player_lng_degrees = 3;
}

message AwardItemProto {
	optional Item item = 1;
	optional int32 item_count = 2;
	optional int32 bonus_count = 3;
}

message AwardedGymBadge {
	optional string fort_id = 1;
	optional GymBadgeType gym_badge_type = 2;
	optional uint32 score = 3;
	optional GymBadgeStats gym_badge_stats = 4;
	optional uint64 last_update_timestamp_ms = 5;
	optional string name = 6;
	optional string image_url = 7;
	optional string description = 8;
	optional double latitude = 9;
	optional double longitude = 10;
	optional uint64 last_check_timestamp_ms = 11;
	optional uint32 earned_points = 12;
	optional float progress = 13;
	optional bool level_up = 14;
	optional PlayerRaidInfoProto raids = 15;
}

message AwardedRouteBadge {
	message RouteBadgeWaypoint {
		optional string fort_name = 1;
		optional string image_url = 2;
		optional RouteStamp last_earned_stamp = 3;
	}

	optional string route_id = 1;
	optional RouteType route_type = 2;
	optional int32 num_completions = 3;
	optional int64 last_played_time = 4;
	repeated RouteStamp unique_route_stamp = 5;
	optional string route_name = 6;
	optional string route_description = 7;
	optional string route_creator_codename = 8;
	optional string route_image_url = 9;
	optional int64 route_duration_seconds = 10;
	repeated RouteBadgeWaypoint last_played_waypoints = 11;
}

message AwardedRouteStamp {
	optional RouteStamp route_stamp = 1;
	optional int64 acquire_time_ms = 2;
	optional string route_id = 3;
	optional string fort_id = 4;
}

message BackgroundModeClientSettingsProto {
	message ProximitySettingsProto {
		optional int64 maximum_contact_age_ms = 4;
	}

	optional int64 maximum_sample_age_ms = 1;
	optional bool accept_manual_fitness_samples = 2;
	optional double minimum_location_accuracy_meters = 3;
	optional int32 background_wake_up_interval_minutes = 4;
	optional int32 max_upload_size_in_bytes = 5;
	optional double min_enclosing_geofence_radius_m = 6;
	optional int64 background_token_refresh_interval_s = 7;
	optional int32 max_session_duration_m = 8;
	optional int32 min_distance_delta_m = 9;
	optional int32 min_update_interval_s = 10;
	optional int32 min_session_reporting_interval_s = 11;
	optional int32 min_persistent_reporting_interval_s = 12;
	optional bool enable_progress_request = 13;
	optional bool enable_foreground_notification = 14;
	optional ProximitySettingsProto proximity_settings = 15;
}

message BackgroundModeGlobalSettingsProto {
	optional uint32 min_player_level_fitness = 1;
	optional int64 service_prompt_timestamp_ms = 2;
}

message BackgroundModeSettingsProto {
	optional double weekly_fitness_goal_level1_distance_km = 1;
	optional double weekly_fitness_goal_level2_distance_km = 2;
	optional double weekly_fitness_goal_level3_distance_km = 3;
	optional double weekly_fitness_goal_level4_distance_km = 4;
}

message BackgroundToken {
	optional bytes token = 1;
	optional int64 expiration_time = 2;
	optional bytes iv = 3;
}

message BadgeCaptureReward {
	optional float capture_reward_multiplier = 1;
	repeated string avatar_template_ids = 2;
}

message BadgeData {
	optional MiniCollectionBadgeData mini_collection = 2;

	optional HoloBadgeType badge = 1;
}

message BadgeSettingsProto {
	optional HoloBadgeType badge_type = 1;
	optional int32 badge_rank = 2;
	repeated int32 targets = 3;
	repeated BadgeCaptureReward capture_reward = 4;
	optional bool event_badge = 5;
	optional EventBadgeSettingsProto event_badge_settings = 6;
	optional string combat_league_template_id = 7;
	optional bool use_stat_as_medal_level = 8;
}

message BattleActionProto {
	enum ActionType {
		UNSET = 0;
		ATTACK = 1;
		DODGE = 2;
		SPECIAL_ATTACK = 3;
		SWAP_POKEMON = 4;
		FAINT = 5;
		PLAYER_JOIN = 6;
		PLAYER_QUIT = 7;
		VICTORY = 8;
		DEFEAT = 9;
		TIMED_OUT = 10;
		SPECIAL_ATTACK_2 = 11;
	}

	optional ActionType type = 1;
	optional int64 action_start_ms = 2;
	optional int32 duration_ms = 3;
	optional int32 energy_delta = 5;
	optional int32 attacker_index = 6;
	optional int32 target_index = 7;
	optional fixed64 active_pokemon_id = 8;
	optional BattleParticipantProto joined_player = 9;
	optional BattleResultsProto battle_results = 10;
	optional int64 damage_window_start_ms = 11;
	optional int64 damage_window_end_ms = 12;
	optional BattleParticipantProto quit_player = 13;
	optional fixed64 target_pokemon_id = 14;
	optional LeveledUpFriendsProto leveled_up_friends = 15;
}

message BattleAttributesProto {
	optional float sta_percent = 1;
	optional float atk_percent = 2;
	optional float def_percent = 3;
	optional float duration_s = 4;
}

message BattleHubBadgeSettings {
	repeated HoloBadgeType combat_hub_displayed_badges = 1;
}

message BattleHubOrderSettings {
	message SectionGroup {
		repeated BattleHubSection section = 1;
	}

	message SectionSettings {
		optional BattleHubSection main_section = 1;
		repeated BattleHubSubsection subsection = 2;
	}

	repeated SectionSettings section = 1;
	repeated SectionGroup section_group = 2;
}

message BattleLogProto {
	enum BattleType {
		BATTLE_TYPE_UNSET = 0;
		NORMAL = 1;
		TRAINING = 2;
		RAID = 3;
	}

	enum State {
		STATE_UNSET = 0;
		ACTIVE = 1;
		VICTORY = 2;
		DEFEATED = 3;
		TIMED_OUT = 4;
	}

	optional State state = 1;
	optional BattleType battle_type = 2;
	optional int64 server_ms = 3;
	repeated BattleActionProto battle_actions = 4;
	optional int64 battle_start_ms = 5;
	optional int64 battle_end_ms = 6;
}

message BattleParticipantProto {
	optional PokemonInfo active_pokemon = 1;
	optional PlayerPublicProfileProto trainer_public_profile = 2;
	repeated PokemonInfo reserve_pokemon = 3;
	repeated PokemonInfo defeated_pokemon = 4;
	repeated LobbyPokemonProto lobby_pokemon = 5;
	optional int32 damage_dealt = 6;
	optional bool super_effective_charge_move = 7 [deprecated = true];
	optional bool weather_boosted = 8;
	optional FriendshipLevelMilestone highest_friendship_milestone = 9;
	repeated string friend_codename = 10;
	optional bool is_remote = 11;
	optional bool is_social_invite = 12;
	optional bool has_active_mega_evolved_pokemon = 13;
	optional int64 lobby_join_time_ms = 14;
	optional int32 super_effective_charge_attacks_used = 15;
	optional PokemonSurvivalTimeInfo pokemon_survival = 16;
	optional fixed64 battle_mega_pokemon_id = 17;
	optional fixed64 tall_pokemon_id = 18;
	optional int32 number_of_charge_attacks_used = 19;
	optional int64 last_player_join_time_ms = 20;
	optional int64 last_player_quit_time_ms = 21;
	optional string player_id = 22;
	repeated PokemonInfo referenced_pokemon = 23;
	optional fixed64 join_buddy_pokemon_id = 24;
	optional fixed64 battle_buddy_pokemon_id = 25;
	optional int32 remote_friends = 26;
	optional int32 local_friends = 27;
}

message BattlePartiesProto {
	repeated BattlePartyProto battle_parties = 1;
}

message BattlePartyProto {
	optional string name = 1;
	optional int32 team_number = 2;
	repeated fixed64 ids = 3;
	optional string combat_league_id = 4;
}

message BattlePartySettingsProto {
	optional bool enable_battle_party_saving = 1;
	optional int32 max_battle_parties = 2;
	optional int32 overall_parties_cap = 3;
	optional int32 ob_int32_battle_party_settings_1 = 4;
	optional int32 ob_int32_battle_party_settings_2 = 5;
}

message BattlePartyTelemetry {
	optional BattlePartyTelemetryIds battle_party_click_id = 1;
	optional int32 battle_party_count = 2;
	optional int32 battle_party_number = 3;
}

message BattleProto {
	optional int64 battle_start_ms = 1;
	optional int64 battle_end_ms = 2;
	optional string battle_id = 3;
	optional BattleParticipantProto defender = 4;
	optional BattleLogProto battle_log = 5;
	optional BattleParticipantProto attacker = 6;
	optional GameplayWeatherProto.WeatherCondition weather_condition = 7;
	optional FriendshipLevelMilestone highest_friendship_milestone = 8;
}

message BattleQuestProto {
	repeated string battle_id = 1;
}

message BattleResultsProto {
	optional GymStateProto gym_state = 1;
	repeated BattleParticipantProto attackers = 2;
	repeated int32 player_xp_awarded = 3;
	optional int64 next_defender_pokemon_id = 4;
	optional int32 gym_points_delta = 5;
	optional GymStatusAndDefendersProto gym_status = 6;
	repeated ParticipationProto participation = 7;
	repeated LootProto raid_item_rewards = 8;
	repeated RaidEncounterProto post_raid_encounter = 9;
	repeated AwardedGymBadge gym_badge = 10;
	repeated LootProto default_raid_item_rewards = 11;
	optional int64 battle_duration_ms = 12;
	optional RaidPlayerStatsProto raid_player_stats = 13;
}

message BattleUpdateProto {
	optional BattleLogProto battle_log = 1;
	optional string battle_id = 2;
	optional PokemonInfo active_defender = 3;
	optional PokemonInfo active_attacker = 4;
	optional FriendshipLevelMilestone highest_friendship_milestone = 5;
}

message BattleVisualSettings {
	optional bool battle_visual_stadium_enabled = 1;
	optional string stadium_crowd_asset = 2;
	optional string stadium_banner_asset = 4;
}

message BelugaBleCompleteTransferRequestProto {
	optional int64 transaction_id = 1;
	optional int32 beluga_requested_item_id = 2;
	optional string nonce = 3;
}

message BelugaBleFinalizeTransfer {
	optional BelugaBleTransferCompleteProto beluga_transfer_complete = 1;
	optional bytes server_signature = 2;
}

message BelugaBleTransferCompleteProto {
	optional string nonce = 1;
	optional string beluga_id = 2;
}

message BelugaBleTransferPrepProto {
	repeated BelugaPokemonProto pokemon_list = 1;
	optional bool eligble_for_item = 2;
	optional int64 transaction_id = 3;
	optional string beluga_id = 4;
	optional string nonce = 5;
}

message BelugaBleTransferProto {
	optional BelugaBleTransferPrepProto server_response = 1;
	optional bytes server_signature = 2;
	repeated string localized_origins = 3;
	optional string language = 4;
}

message BelugaDailyTransferLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional bool includes_weekly_bonus = 2;
	optional LootProto items_awarded = 3;
}

message BelugaGlobalSettingsProto {
	optional bool enable_beluga_transfer = 1;
	optional int32 max_num_pokemon_per_transfer = 2;
}

message BelugaIncenseBoxProto {
	optional bool is_usable = 1;
	optional int64 cool_down_finished_timestamp_ms = 2;
}

message BelugaPokemonProto {
	enum PokemonCostume {
		UNSET = 0;
		HOLIDAY_2016 = 1;
		ANNIVERSARY = 2;
		ONE_YEAR_ANNIVERSARY = 3;
		HALLOWEEN_2017 = 4;
	}

	enum PokemonForm {
		FORM_UNSET = 0;
		ALOLA = 1;
	}

	enum PokemonGender {
		GENDER_UNSET = 0;
		MALE = 1;
		FEMALE = 2;
		GENDERLESS = 3;
	}

	enum Team {
		NONE = 0;
		TEAM_BLUE = 1;
		TEAM_RED = 2;
		TEAM_YELLOW = 3;
	}

	enum TrainerGender {
		TRAINER_MALE = 0;
		TRAINER_FEMALE = 1;
	}

	optional string trainer_name = 1;
	optional TrainerGender trainer_gender = 2;
	optional Team trainer_team = 3;
	optional int32 trainer_level = 4;
	optional HoloPokemonId pokedex_id = 5;
	optional int32 cp = 6;
	optional float pokemon_level = 7;
	optional int32 max_hp = 8;
	optional double origin_lat = 9;
	optional double origin_lng = 10;
	optional float height = 11;
	optional float weight = 12;
	optional int32 individual_attack = 13;
	optional int32 individual_defense = 14;
	optional int32 individual_stamina = 15;
	optional int32 creation_day = 16;
	optional int32 creation_month = 17;
	optional int32 creation_year = 18;
	optional string nickname = 19;
	optional PokemonGender gender = 20;
	optional PokemonCostume costume = 21;
	optional PokemonForm form = 22;
	optional bool shiny = 23;
	optional HoloPokemonMove move1 = 24;
	optional HoloPokemonMove move2 = 25;
}

message BelugaPokemonWhitelist {
	optional int32 max_allowed_pokemon_pokedex_number = 1;
	repeated HoloPokemonId additional_pokemon_allowed = 2;
	repeated PokemonDisplayProto.Form forms_allowed = 3;
	repeated PokemonDisplayProto.Costume costumes_allowed = 4;
}

message BelugaTransactionCompleteOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILED = 2;
		ERROR_INVALID_POKEMON_ID = 3;
		ERROR_POKEMON_DEPLOYED = 4;
		ERROR_POKEMON_NOT_ALLOWED = 5;
		ERROR_POKEMON_IS_BUDDY = 6;
		ERROR_INVALID_TRANSACTION_ID = 7;
		ERROR_MISSING_TRANSACTION_ID = 8;
	}

	optional Status status = 1;
	optional int32 candy_awarded = 2;
	optional LootProto loot_awarded = 3;
	optional BelugaBleFinalizeTransfer beluga_finalize_response = 4;
	optional int32 buckets_until_weekly_award = 5;
	optional XlCandyAwArdedPerId xl_candy_awarded_per_id = 6;

	message XlCandyAwArdedPerId {
		optional int32 key = 1;
		optional int32 value = 2;
	}
}

message BelugaTransactionCompleteProto {
	optional BelugaBleCompleteTransferRequestProto beluga_transfer = 1;
	optional bytes app_signature = 2;
	optional bytes firmware_signature = 3;
}

message BelugaTransactionStartOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILED = 2;
		ERROR_INVALID_POKEMON_ID = 3;
		ERROR_POKEMON_DEPLOYED = 4;
		ERROR_POKEMON_IS_EGG = 5;
		ERROR_POKEMON_IS_BUDDY = 6;
		ERROR_POKEMON_NOT_ALLOWED = 7;
		ERROR_INVALID_NONCE = 8;
		ERROR_TOO_MANY_POKEMON = 9;
		ERROR_NO_POKEMON_SPECIFIED = 10;
	}

	optional Status status = 1;
	optional BelugaBleTransferPrepProto beluga_transfer_prep = 2;
	optional bytes server_signature = 3;
}

message BelugaTransactionStartProto {
	repeated int64 pokemon_id = 1;
	optional string nonce = 2;
	optional string beluga_id = 3;
}

message BootTelemetry {
	optional float nearest_poi_distance = 1;
	optional int32 poi_within_one_km_count = 2;
}

message BootTime {
	enum BootPhase {
		UNDEFINED = 0;
		TIME_TO_MAP = 1;
		LOGO_SCREEN_TIME = 2;
		MAIN_SCENE_LOAD_TIME = 3;
		WAIT_FOR_AUTH = 4;
		INIT_REMOTE_CONFIG_VERSIONS = 5;
		INIT_BUNDLE_DIGEST = 6;
		INIT_GMT = 7;
		DOWNLOAD_I18N = 8;
		DOWNLOAD_GLOBAL_ASSETS = 9;
		REGISTER_PUSH_NOTIFICATION = 10;
		INITIALIZE_UPSIGHT = 11;
		INITIALIZE_CRITTERCISM = 12;
		LOGIN_VERSION_CHECK = 13;
		LOGIN_GET_PLAYER = 14;
		LOGIN_AUTHENTICATION = 15;
		MODAL_TIME = 16;
		INITIALIZE_ADJUST = 17;
		INITIALIZE_FIREBASE = 20;
		INITIALIZE_CRASHLYTICS = 21;
		INITIALIZE_BRAZE = 22;
		DOWNLOAD_BOOT_ADDRESSABLES = 23;
	}

	optional MetricData duration = 1;
	optional BootPhase boot_phase = 2;
}

message BoundingRect {
	optional double north = 1;
	optional double south = 2;
	optional double east = 3;
	optional double west = 4;
}

message BreadcrumbRecordProto {
	optional int64 timestamp_ms = 1;
	optional double latitude_deg = 2;
	optional double longitude_deg = 3;
	optional bool app_is_foregrounded = 4;
}

message BuddyActivityCategorySettings {
	optional BuddyActivityCategory activity_category = 1;
	optional int32 max_points_per_day = 2;
}

message BuddyActivitySettings {
	optional BuddyActivity activity = 1;
	optional BuddyActivityCategory activity_category = 2;
	optional int32 max_times_per_day = 3;
	optional int32 num_points_per_action = 4;
	optional int32 num_emotion_points_per_action = 5;
	optional int64 emotion_cooldown_duration_ms = 6;
}

message BuddyConsumablesLogEntry {
	optional LootProto rewards = 1;
}

message BuddyDataProto {
	message BuddyStoredStats {
		optional int64 window = 1;
		optional BuddyStatS buddy_stats = 2;

		message BuddyStatS {
			optional int32 key = 1;
			optional float value = 2;
		}
	}

	optional fixed64 buddy_pokemon_id = 1;
	optional int32 current_points_earned = 2;
	optional int32 highest_points_earned = 3;
	optional int64 last_reached_full_ms = 4;
	optional int64 last_groomed_ms = 5;
	optional int64 map_expiration_ms = 7;
	optional float km_candy_pending = 12;
	optional BuddyGiftProto buddy_gift_picked_up = 15;
	optional int32 current_emotion_points = 18;
	optional DailyActivityCounters daily_activity_counters = 19;
	optional DailyCategoryCounters daily_category_counters = 20;
	optional BuddyStoredStats stats_today = 21;
	optional BuddyStoredStats stats_total = 22;
	optional SouvenirSColleCted souvenirs_collected = 23;
	optional int32 current_hunger_points = 24;
	optional int64 interaction_expiration_ms = 25;
	optional int64 poffin_feeding_expiration_ms = 26;
	optional float last_affection_or_emotion_awarded_km = 27;
	optional int64 last_set_timestamp_ms = 28;
	optional int64 last_unset_timestamp_ms = 29;
	optional bool ditched = 30;
	optional PokemonDisplayProto pokemon_display = 31;
	optional bool hatched_from_egg = 32;
	optional string nickname = 33;
	optional int64 captured_s2_cell_id = 34;
	optional HoloPokemonId pokedex_entry_number = 35;
	optional int64 creation_timestamp_ms = 36;
	optional Item pokeball = 37;
	optional int32 num_days_spent_with_buddy = 38;
	optional string original_owner_nickname = 39;
	optional int64 traded_time_ms = 40;
	optional string attractive_poi_id = 41;
	optional int64 attractive_poi_time_generated = 42;
	optional int64 attractive_poi_cooldown_ms = 43;
	optional bool attractive_poi_visited = 44;
	optional int64 berry_cooldown_ms = 45;
	optional ActivityEmotionLastIncrementMs activity_emotion_last_increment_ms = 46;
	optional int64 window = 47;
	optional int64 last_fed_ms = 48;
	optional int32 last_window_buddy_on_map = 49;
	optional int32 last_window_fed_poffin = 50;
	optional int64 yatta_expiration_ms = 51;
	optional float hunger_points = 52;

	message DailyActivityCounters {
		optional int32 key = 1;
		optional DailyCounterProto value = 2;
	}
	message DailyCategoryCounters {
		optional int32 key = 1;
		optional DailyCounterProto value = 2;
	}
	message SouvenirSColleCted {
		optional int32 key = 1;
		optional SouvenirProto value = 2;
	}
	message ActivityEmotionLastIncrementMs {
		optional int32 key = 1;
		optional int64 value = 2;
	}
}

message BuddyEmotionLevelSettings {
	optional BuddyEmotionLevel emotion_level = 1;
	optional int32 min_emotion_points_required = 2;
	optional BuddyAnimation emotion_animation = 3;
	optional int64 decay_prevention_duration_ms = 4;
}

message BuddyEncounterCameoSettings {
	optional float buddy_wild_encounter_cameo_chance_percent = 1;
	optional float buddy_quest_encounter_cameo_chance_percent = 2;
	optional float buddy_raid_encounter_cameo_chance_percent = 3;
	optional float buddy_invasion_encounter_cameo_chance_percent = 4;
	optional bool buddy_on_map_required = 5;
}

message BuddyEncounterHelpTelemetry {
	optional HoloPokemonId pokemon_id = 1;
	optional int32 cp = 2;
	optional string encounter_type = 3;
	optional bool ar_classic_enabled = 4;
	optional bool ar_plus_enabled = 5;
	optional EncounterType encounter = 6;
}

message BuddyEvolutionWalkQuestProto {
	optional float last_km_recorded = 1;
}

message BuddyFeedingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_BUDDY_NOT_VALID = 2;
		FAILED_INSUFFICIENT_RESOURCES = 3;
		FAILED_INVALID_ITEM_REQUIREMENT = 4;
		FAILED_BUDDY_STILL_FULL_FROM_POFFIN = 5;
	}

	optional Result result = 1;
	optional BuddyObservedData observed_data = 3;
	optional BuddyStatsShownHearts.BuddyShownHeartType shown_hearts = 4;
}

message BuddyFeedingProto {
	optional Item item = 1;
	optional int32 count = 2;
}

message BuddyGiftProto {
	optional SouvenirProto souvenir = 1;
	optional LootProto loot_proto = 2;
}

message BuddyGlobalSettingsProto {
	optional int32 buddy_v2_min_player_level = 1;
	optional int32 buddy_multiplayer_min_player_level = 2;
	optional bool enable_monodepth = 3;
	repeated string monodepth_devices = 4;
	optional int32 lobby_status_message_duration_ms = 5;
	optional int32 mapping_instruction_duration_ms = 6;
	optional int32 group_photo_leader_tracking_interval_ms = 7;
	optional int32 group_photo_countdown_ms = 8;
	optional int32 lobby_timeout_ms = 9;
	optional bool enable_wallaby_telemetry = 10;
	optional int32 mapping_hint_timeout_ms = 11;
	optional int32 group_photo_simultaneous_shots = 12;
	optional bool plfe_auth_tokens_enabled = 13;
	optional int32 group_photo_shot_interval_ms = 14;
	optional string arbe_endpoint_url = 15;
	optional bool buddy_on_map_required_to_open_gifts = 16;
}

message BuddyHistoryData {
	optional fixed64 pokemon_id = 1;
	optional HoloPokemonId pokedex_id = 2;
	optional PokemonDisplayProto pokemon_display = 3;
	optional bool hatched_from_egg = 4;
	optional string nickname = 5;
	optional int64 captured_s2_cell_id = 6;
	optional int64 creation_timestamp_ms = 7;
	optional Item pokeball = 8;
	optional BuddyStats total_stats = 9;
	optional int32 current_points_earned = 10;
	optional int64 last_set_timestamp_ms = 11;
	optional int64 last_unset_timestamp_ms = 12;
	optional int32 num_days_spent_with_buddy = 13;
	optional bool ditched = 14;
	optional string original_owner_nickname = 15;
	optional int64 traded_time_ms = 16;
	optional SouvenirSColleCted souvenirs_collected = 17;
	optional float km_candy_progress = 18;

	message SouvenirSColleCted {
		optional int32 key = 1;
		optional SouvenirProto value = 2;
	}
}

message BuddyHungerSettings {
	optional int32 num_hunger_points_required_for_full = 1;
	optional int32 decay_points_per_bucket = 2;
	optional int64 milliseconds_per_bucket = 3;
	optional int64 cooldown_duration_ms = 4;
	optional int64 decay_duration_after_full_ms = 5;
}

message BuddyInteractionSettings {
	repeated Item feed_item_whitelist = 1;
	repeated Item care_item_whitelist = 2;
}

message BuddyLevelSettings {
	enum BuddyTrait {
		UNSET = 0;
		MAP_DEPLOY = 1;
		ENCOUNTER_CAMEO = 2;
		EMOTION_INDICATOR = 3;
		PICK_UP_CONSUMABLES = 4;
		PICK_UP_SOUVENIRS = 5;
		FIND_ATTRACTIVE_POIS = 6;
		BEST_BUDDY_ASSET = 7;
		CP_BOOST = 8;
	}

	optional BuddyLevel level = 1;
	optional int32 min_non_cumulative_points_required = 2;
	repeated BuddyTrait unlocked_traits = 3;
}

message BuddyMapEmotionCheckTelemetry {
	optional HoloPokemonId pokemon_id = 1;
	optional int32 current_emotion_points = 2;
	optional int32 current_affection_points = 3;
}

message BuddyMapOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_BUDDY_NOT_VALID = 2;
	}

	optional Result result = 1;
	optional int64 expiration_ms = 2;
	optional int64 applied_ms = 3;
	optional BuddyObservedData observed_data = 4;
}

message BuddyMapProto {
}

message BuddyMultiplayerConnectionFailedProto {
	optional int32 test_number = 1;
	optional int64 response_time = 2;
}

message BuddyMultiplayerConnectionSucceededProto {
	optional int32 test_number = 1;
	optional int64 response_time = 2;
}

message BuddyMultiplayerTimeToGetSessionProto {
	optional int32 test_number = 1;
	optional int64 time_to_get_session = 2;
}

message BuddyNotificationClickTelemetry {
	optional int32 notification_category = 1;
}

message BuddyObservedData {
	enum BuddyValidationResult {
		UNSET = 0;
		SUCCESS = 1;
		FAILED_BUDDY_NOT_SET = 2;
		FAILED_BUDDY_NOT_FOUND = 3;
		FAILED_BAD_BUDDY = 4;
		FAILED_BUDDY_V2_NOT_ENABLED = 5;
		FAILED_PLAYER_LEVEL_TOO_LOW = 6;
	}

	message BuddyFeedStats {
		optional int64 map_expiration_ms = 1;
		optional float pre_map_fullness_percentage = 2;
		optional int64 fullness_expiration_ms = 3;
		optional int64 poffin_expiration_ms = 4;
	}

	optional int32 current_points_earned = 1;
	optional BuddyStats total_stats = 3;
	optional BuddyGiftProto buddy_gift_picked_up = 6;
	optional int32 current_emotion_points = 7;
	optional BuddyValidationResult buddy_validation_result = 8;
	optional SouvenirSColleCted souvenirs_collected = 9;
	optional BuddyStatsShownHearts today_stats_shown_hearts = 10;
	optional BuddyFeedStats buddy_feed_stats = 11;
	optional string attractive_poi_id = 12;
	optional int64 attractive_poi_expiration_time_ms = 13;
	optional int32 num_days_spent_with_buddy = 14;

	message SouvenirSColleCted {
		optional int32 key = 1;
		optional SouvenirProto value = 2;
	}
}

message BuddyPettingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_BUDDY_NOT_VALID = 2;
	}

	optional Result result = 1;
	optional BuddyObservedData observed_data = 2;
	optional BuddyStatsShownHearts.BuddyShownHeartType shown_hearts = 3;
}

message BuddyPettingProto {
}

message BuddyPokemonLogEntry {
	enum Result {
		UNSET = 0;
		CANDY_FOUND = 1;
	}

	optional Result result = 1;
	optional HoloPokemonId pokemon_type = 2;
	optional int32 amount = 3;
	optional PokemonDisplayProto pokemon_display = 4;
	optional fixed64 pokemon_id = 5;
}

message BuddyPokemonProto {
	optional fixed64 buddy_pokemon_id = 1;
	optional double start_km_walked = 2;
	optional double last_km_awarded = 3;
	optional DailyCounterProto daily_buddy_swaps = 4;
	optional int64 last_km_awarded_ms = 5;
	optional bool best_buddies_backfilled = 6;
	optional int64 last_set_timestamp_ms = 7;
}

message BuddyStats {
	optional float km_walked = 1;
	optional int32 berries_fed = 2;
	optional int32 communication = 3;
	optional int32 battles = 4;
	optional int32 photos = 5;
	optional int32 new_visits = 6;
}

message BuddyStatsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_BUDDY_NOT_VALID = 2;
	}

	optional Result result = 1;
	optional BuddyObservedData observed_data = 2;
}

message BuddyStatsProto {
}

message BuddyStatsShownHearts {
	enum BuddyShownHeartType {
		BUDDY_HEART_UNSET = 0;
		BUDDY_HEART_SINGLE = 1;
		BUDDY_HEART_DOUBLE = 2;
	}

	message BuddyShownHeartsList {
		repeated BuddyShownHeartType buddy_shown_heart_types = 1;
	}

	optional float buddy_affection_km_in_progress = 1;
	optional BuddyShownHeartsPerCategory buddy_shown_hearts_per_category = 2;

	message BuddyShownHeartsPerCategory {
		optional int32 key = 1;
		optional BuddyShownHeartsList value = 2;
	}
}

message BuddySwapSettings {
	optional int32 max_swaps_per_day = 1;
	optional bool ob_buddy_swap_bool = 2;
}

message BuddyWalkSettings {
	optional float km_required_per_affection_point = 1;
}

message BuildingMetadata {
	optional int32 height_meters = 1;
	optional bool is_underground = 2;
}

message CameraSettingsProto {
	optional string next_camera = 1;
	repeated CameraInterpolation interpolation = 2;
	repeated CameraTarget target_type = 3;
	repeated float ease_in_speed = 4;
	repeated float ease_out_speed = 5;
	repeated float duration_seconds = 6;
	repeated float wait_seconds = 7;
	repeated float transition_seconds = 8;
	repeated float angle_degree = 9;
	repeated float angle_offset_degree = 10;
	repeated float pitch_degree = 11;
	repeated float pitch_offset_degree = 12;
	repeated float roll_degree = 13;
	repeated float distance_meters = 14;
	repeated float height_percent = 15;
	repeated float vert_ctr_ratio = 16;
}

message CancelCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
}

message CancelCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
		ERROR_ALREADY_ACCEPTED = 4;
		ERROR_ALREADY_DECLINED = 5;
		ERROR_ALREADY_TIMEDOUT = 6;
		ERROR_ACCESS_DENIED = 7;
	}

	optional Result result = 1;
}

message CancelCombatChallengeProto {
	optional string challenge_id = 1;
}

message CancelCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional CancelCombatChallengeOutProto.Result result = 3;
}

message CancelFriendInviteOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVITE_DOES_NOT_EXIST = 3;
		ERROR_ALREADY_CANCELLED = 4;
	}

	optional Result result = 1;
}

message CancelFriendInviteProto {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message CancelMatchmakingDataProto {
	optional int32 ob_int32 = 1;
}

message CancelMatchmakingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESSFULLY_CANCELLED = 1;
		ERROR_ALREADY_MATCHED = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
		ERROR_QUEUE_NOT_FOUND = 4;
	}

	optional Result result = 1;
}

message CancelMatchmakingProto {
	optional string queue_id = 1;
}

message CancelMatchmakingResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional CancelMatchmakingOutProto.Result result = 3;
}

message CancelRouteOutProto {
	optional RoutePlayStatus.Status status = 1;
	optional int64 cooldown_finish_ms = 2;
}

message CancelRouteProto {
}

message CancelTradingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FRIEND_NOT_FOUND = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_INVALID_STATE = 5;
		ERROR_STATE_HANDLER = 6;
	}

	optional Result result = 1;
	optional TradingProto trading = 2;
}

message CancelTradingProto {
	optional string player_id = 1;
}

message CaptureProbabilityProto {
	repeated Item pokeball_type = 1;
	repeated float capture_probability = 2;
	optional double reticle_difficulty_scale = 12;
}

message CaptureScoreProto {
	repeated HoloActivityType activity_type = 1;
	repeated int32 exp = 2;
	repeated int32 candy = 3;
	repeated int32 stardust = 4;
	repeated int32 xl_candy = 5;
	optional int32 candy_from_active_mega = 6;
	optional int32 ob_int32 = 7;
}

message CatchPokemonGlobalSettingsProto {
	optional bool enable_capture_origin_details_display = 1;
	optional bool enable_capture_origin_events_display = 2;
}

message CatchPokemonLogEntry {
	enum Result {
		UNSET = 0;
		POKEMON_CAPTURED = 1;
		POKEMON_FLED = 2;
		POKEMON_HATCHED = 3;
	}

	optional Result result = 1;
	optional int32 pokedex_number = 2;
	optional int32 combat_points = 3;
	optional fixed64 pokemon_id = 4;
	optional PokemonDisplayProto pokemon_display = 5;
}

message CatchPokemonOutProto {
	enum CaptureReason {
		UNSET = 0;
		DEFAULT = 1;
		ELEMENTAL_BADGE = 2;
		CRITICAL_CATCH = 3;
	}

	enum Status {
		CATCH_ERROR = 0;
		CATCH_SUCCESS = 1;
		CATCH_ESCAPE = 2;
		CATCH_FLEE = 3;
		CATCH_MISSED = 4;
	}

	optional Status status = 1;
	optional double miss_percent = 2;
	optional fixed64 captured_pokemon_id = 3;
	optional CaptureScoreProto scores = 4;
	optional CaptureReason capture_reason = 5;
	optional HoloPokemonId display_pokedex_id = 6;
	optional int32 throws_remaining = 7;
	optional PokemonDisplayProto pokemon_display = 8;
	optional PokemonDisplayProto ob_pokemon_display = 9;
}

message CatchPokemonProto {
	optional fixed64 encounter_id = 1;
	optional Item pokeball = 2;
	optional double normalized_reticle_size = 3;
	optional string spawn_point_guid = 4;
	optional bool hit_pokemon = 5;
	optional double spin_modifier = 6;
	optional double normalized_hit_position = 7;
	optional ARPlusEncounterValuesProto ar_plus_values = 8;
}

message CatchPokemonQuestProto {
	repeated HoloPokemonId unique_pokemon_id = 1;
	optional fixed64 active_encounter_id = 2;
}

message CatchPokemonTelemetry {
	optional string status = 1;
	optional EncounterPokemonTelemetry encounter_pokemon_telemetry = 2;
	optional Item balltype = 3;
	optional int32 hit_grade = 4;
	optional bool curve_ball = 5;
	optional double miss_percent = 6;
}

message ChallengeIdMismatchDataProto {
	optional string ob_string = 1;
	optional ObCombatMismatchData.MismatchState.Type type = 2;
}

message ChangeArTelemetry {
	optional bool ar_enabled = 1;
	optional bool ar_plus_enabled = 2;
}

message ChangeOnlineStatusTelemetry {
	optional bool is_online_status_on = 1;
}

message ChangePokemonFormOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POKEMON_MISSING = 2;
		ERROR_INSUFFICIENT_RESOURCES = 3;
		ERROR_QUEST_INCOMPLETE = 4;
		ERROR_POKEMON_CANNOT_CHANGE = 5;
		ERROR_POKEMON_DEPLOYED = 6;
		ERROR_FEATURE_DISABLED = 7;
	}

	optional Result result = 1;
	optional PokemonProto changed_pokemon = 2;
	optional int32 exp_awarded = 3;
	optional int32 candy_awarded = 4;
}

message ChangePokemonFormProto {
	optional fixed64 pokemon_id = 1;
	optional PokemonDisplayProto.Form target_form = 2;
}

message ChangeTeamOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_SAME_TEAM = 2;
		ERROR_ITEM_NOT_IN_INVENTORY = 3;
		ERROR_WRONG_ITEM = 4;
		ERROR_UNKNOWN = 5;
	}

	optional Status status = 1;
	optional ClientPlayerProto updated_player = 2;
}

message ChangeTeamProto {
	optional Item item = 1;
	optional Team team = 2;
}

message CharacterDisplayProto {
	optional EnumWrapper.PokestopStyle style = 1;
	optional EnumWrapper.InvasionCharacter character = 2;
}

message CheckAwardedBadgesOutProto {
	optional bool success = 1;
	repeated HoloBadgeType awarded_badges = 2;
	repeated int32 awarded_badge_levels = 3;
	repeated string avatar_template_ids = 4;
}

message CheckAwardedBadgesProto {
}

message CheckChallengeOutProto {
	optional bool show_challenge = 1;
	optional string challenge_url = 2;
}

message CheckChallengeProto {
	optional bool debug_request = 1;
}

message CheckEncounterTrayInfoTelemetry {
	optional bool berry_tray_info = 1;
	optional bool ball_tray_info = 2;
}

message CheckGiftingEligibilityOutProto {
	optional GiftingEligibilityStatusProto gifting_eligibility = 1;
}

message CheckGiftingEligibilityProto {
	optional GiftingIapItemProto gifting_iap_item = 1;
	optional string recipient_friend_id = 2;
}

message CheckPhotobombOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PHOTO_POKEMON_INVALID = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Status status = 1;
	optional HoloPokemonId photobomb_pokemon_id = 2;
	optional PokemonDisplayProto photobomb_pokemon_display = 3;
	optional fixed64 encounter_id = 4;
	optional string uri = 5;
}

message CheckPhotobombProto {
	optional fixed64 photo_pokemon_id = 1;
}

message CheckSendGiftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_DOES_NOT_EXIST = 3;
		ERROR_GIFT_NOT_AVAILABLE = 4;
		ERROR_GIFT_ALREADY_SENT_TODAY = 5;
		ERROR_PLAYER_HAS_UNOPENED_GIFT = 6;
	}

	optional Result result = 1;
}

message CheckSendGiftProto {
	optional string player_id = 1;
}

message CheckShareExRaidPassOutProto {
	optional ShareExRaidPassResult result = 1;
}

message CheckShareExRaidPassProto {
	optional string friend_id = 1;
	optional string fort_id = 2;
	optional int64 raid_seed = 3;
}

message ChooseGlobalTicketedEventVariantOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_HAS_REQUESTED_BADGE = 2;
		ERROR_HAS_MUTUALLY_EXCLUSIVE_BADGE = 3;
	}

	optional Status status = 1;
}

message ChooseGlobalTicketedEventVariantProto {
	optional HoloBadgeType target_variant = 1;
}

message ClaimCodenameRequestProto {
	optional string codename = 1;
	optional bool force = 2;
	optional bool generate_suggested_codenames = 3;
}

message ClaimVsSeekerRewardsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_REDEEM_POKEMON = 2;
		ERROR_PLAYER_NOT_ENOUGH_VICTORIES = 3;
		ERROR_REWARD_ALREADY_CLAIMED = 4;
		ERROR_INVENTORY_FULL = 5;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
}

message ClaimVsSeekerRewardsProto {
	optional int32 win_index = 1;
}

message ClientApiSettingsProto {
	enum SettingsType {
		UNDEFINED = 0;
		MAP = 1;
	}

	optional bytes payload = 1;
}

message ClientDialogueLineProto {
	optional string text = 1;
	optional EnumWrapper.InvasionCharacter character = 2;
	optional EnumWrapper.InvasionCharacterExpression expression = 3;
}

message ClientEvolutionQuestTemplateProto {
	optional string quest_template_id = 1;
	optional QuestType quest_type = 2;
	repeated QuestGoalProto goals = 3;
	optional QuestProto.Context context = 4;
	optional QuestDisplayProto display = 5;
}

message ClientFortModifierProto {
	optional Item modifier_type = 1;
	optional int64 expiration_time_ms = 2;
	optional string deploying_player_codename = 3;
}

message ClientGameMasterTemplateProto {
	optional string template_id = 1;
	optional GameMasterClientTemplateProto data = 2;
}

message ClientGenderProto {
	optional float male_percent = 1;
	optional float female_percent = 2;
	optional float genderless_percent = 3;
}

message ClientGenderSettingsProto {
	optional HoloPokemonId pokemon = 1;
	optional ClientGenderProto gender = 2;
	optional PokemonDisplayProto.Form form = 3;
}

message ClientInbox {
	enum Label {
		UNSET_LABEL = 0;
		UNREAD = 1;
		NEW = 2;
		IMMEDIATE = 3;
	}

	message Notification {
		optional string notification_id = 1;
		optional string title_key = 2;
		optional string category = 3;
		optional int64 create_timestamp_ms = 4;
		optional int64 expire_time_ms = 5;
	}
}

message ClientIncidentProto {
	optional string incident_id = 1;
	optional string fort_id = 2;
	optional string fort_name = 3;
	optional string pokestop_image_uri = 4;
	optional int32 current_step = 5;
	repeated ClientIncidentStepProto step = 6;
	optional PokestopIncidentDisplayProto completion_display = 7;
	optional EnumWrapper.InvasionContext context = 8;
}

message ClientIncidentStepProto {
	optional ClientInvasionBattleStepProto invasion_battle = 1;
	optional ClientInvasionEncounterStepProto invasion_encounter = 2;
	optional ClientPokestopNpcDialogueStepProto pokestop_dialogue = 3;
}

message ClientInvasionBattleStepProto {
	optional EnumWrapper.InvasionCharacter character = 1;
}

message ClientInvasionEncounterStepProto {
}

message ClientMapCellProto {
	optional uint64 s2_cell_id = 1;
	optional int64 as_of_time_ms = 2;
	repeated PokemonFortProto fort = 3;
	repeated ClientSpawnPointProto spawn_point = 4;
	repeated WildPokemonProto wild_pokemon = 5;
	repeated string deleted_object = 6;
	optional bool is_truncated_list = 7;
	repeated PokemonSummaryFortProto fort_summary = 8;
	repeated ClientSpawnPointProto decimated_spawn_point = 9;
	repeated MapPokemonProto catchable_pokemon = 10;
	repeated NearbyPokemonProto nearby_pokemon = 11;
	optional string route_list_hash = 15;
}

message ClientPerformanceSettingsProto {
	optional bool enable_local_disk_caching = 1;
	optional int32 max_number_local_battle_parties = 2;
	optional bool multi_pokemon_battle_party_select = 3;
	optional bool use_whole_match_for_filter_key = 4;
}

message ClientPlayerProto {
	optional int64 creation_time_ms = 1;
	optional string name = 2;
	optional Team team = 5;
	repeated TutorialCompletion tutorial_complete = 7;
	optional PlayerAvatarProto player_avatar_proto = 8;
	optional int32 max_pokemon_storage = 9;
	optional int32 max_item_storage = 10;
	optional DailyBonusProto daily_bonus_proto = 11;
	optional EquippedBadgeProto equipped_badge_proto = 12;
	optional ContactSettingsProto contact_settings_proto = 13;
	repeated CurrencyQuantityProto currency_balance = 14;
	optional int32 remaining_codename_claims = 15;
	optional BuddyPokemonProto buddy_pokemon_proto = 16;
	optional int64 battle_lockout_end_ms = 17;
	optional PlayerAvatarProto secondary_player_avatar_proto = 18;
	optional bool name_is_blacklisted = 19;
	optional SocialPlayerSettingsProto social_player_settings = 20;
	optional CombatPlayerPreferencesProto combat_player_preferences = 21;
	optional string player_support_id = 22;
	optional TeamChangeInfoProto team_change_info = 23;
	repeated HoloPokemonId consumed_eevee_easter_eggs = 24;
	optional CombatLogProto combat_log = 25;
	optional int64 time_zone_offset_ms = 26 [deprecated = true];
	optional BuddyObservedData buddy_observed_data = 27;
	optional string helpshift_user_id = 28;
	optional PlayerPreferencesProto player_preferences = 29;
	repeated EventTicketActiveTimeProto event_ticket_active_time = 30;
	optional int64 lapsed_player_returned_time_ms = 31;
}

message ClientPokestopNpcDialogueStepProto {
	repeated ClientDialogueLineProto dialogue_line = 1;
}

message ClientPredictionInconsistencyDataProto {
	optional uint32 ob_client_prediction_inconsistency_uint32 = 1;
}

message ClientQuestProto {
	optional QuestProto quest = 1;
	optional QuestDisplayProto quest_display = 2;
}

message ClientRouteMapCellProto {
	optional uint64 s2_cell_id = 1;
	optional string route_list_hash = 2;
	repeated ClientRouteProto route = 3;
}

message ClientRouteProto {
	message ImageProto {
		optional string image_url = 1;
	}

	message WaypointProto {
		optional string fort_id = 1;
		optional double lat_degrees = 2;
		optional double lng_degrees = 3;
	}

	optional string id = 1;
	optional string name = 2;
	optional string description = 3;
	repeated WaypointProto waypoints = 4;
	optional ImageProto main_image = 5;
	optional bool reversible = 6;
	optional int64 submission_time = 7;
	optional int64 route_distance_meters = 8;
	optional float direction_in_degrees = 9;
	optional float avg_rating = 10;
	optional RouteType route_type = 11;
	optional int64 route_duration_seconds = 12;
	optional int32 num_completions = 13;
	optional int64 cooldown_finish_ms = 14;
}

message ClientSettingsTelemetry {
	optional float music_volume = 1;
	optional float sound_volume = 2;
}

message ClientSleepRecord {
	optional uint32 start_time_sec = 1;
	optional uint32 duration_sec = 2;
}

message ClientSpawnPointProto {
	optional double latitude = 2;
	optional double longitude = 3;
}

message ClientTelemetryBatchProto {
	enum TelemetryScopeId {
		UNSET = 0;
		CORE = 1;
		GAME = 2;
		TITAN = 3;
		COMMON = 4;
		PRE_AGE_GATE = 5;
		PRE_LOGIN = 6;
	}

	optional TelemetryScopeId telemetry_scope_id = 1;
	repeated ClientTelemetryRecordProto events = 2;
	repeated ClientTelemetryRecordProto metrics = 3;
	optional string api_version = 4;
	optional string message_version = 5;
}

message ClientTelemetryClientSettingsProto {
	optional bool is_upload_enabled = 1;
	optional int64 max_upload_size_in_bytes = 2;
	optional int64 update_interval_in_sec = 3;
	optional int64 settings_update_interval_in_sec = 4;
	optional int64 max_envelope_queue_size = 5;
	optional double sampling_probability = 6;
	optional bool use_player_based_sampling = 7;
	optional double player_hash = 8;
	optional string player_external_omni_id = 9;
	optional bool disable_omni_sending = 10;
	optional SpecialSamplingProbabilityMap special_sampling_probability_map = 11;
	optional string player_external_ua_id = 12;
	optional string player_external_in_app_survey_id = 13;

	message SpecialSamplingProbabilityMap {
		optional string key = 1;
		optional double value = 2;
	}
}

message ClientTelemetryCommonFilterProto {
	optional string application_identifier = 1;
	optional string operating_system_name = 2;
	optional string device_model = 3;
	optional string locale_country_code = 4;
	optional string locale_language_code = 5;
	optional double sampling_probability = 6;
	optional string quality_level = 7;
	optional string network_connectivity_type = 8;
	optional string game_context = 9;
}

message ClientTelemetryRecordProto {
	optional string record_id = 1;
	optional bytes encoded_message = 2;
	optional int64 client_timestamp_ms = 3;
	optional int64 metric_id = 4;
	optional ClientTelemetryCommonFilterProto common_filters = 5;
}

message ClientTelemetrySettingsRequestProto {
}

message ClientVersionProto {
	optional string min_version = 1;
}

message ClientWeatherProto {
	optional int64 s2_cell_id = 1;
	optional DisplayWeatherProto display_weather = 2;
	optional GameplayWeatherProto gameplay_weather = 3;
	repeated WeatherAlertProto alerts = 4;
}

message CodenameResultProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		CODENAME_NOT_AVAILABLE = 2;
		CODENAME_NOT_VALID = 3;
		CURRENT_OWNER = 4;
		CODENAME_CHANGE_NOT_ALLOWED = 5;
	}

	optional string codename = 1;
	optional string user_message = 2;
	optional bool is_assignable = 3;
	optional Status status = 4;
	optional ClientPlayerProto updated_player = 5;
	repeated string suggested_codenames = 6;
}

message CollectAdIdRequestProto {
	enum CollectionFailedReason {
		REASON_INVALID = 0;
		AD_TRACKING_DISABLED = 1;
	}

	enum DevicePlatform {
		PLATFORM_INVALID = 0;
		ANDROID = 1;
		IOS = 2;
	}

	optional string user_id = 1;
	optional string ad_id = 2;
	optional DevicePlatform device_platform = 3;
	optional CollectionFailedReason failed_reason = 4;
	optional uint64 timestamp_ms = 5;
}

message CollectAdIdResponseProto {
	enum Status {
		INVALID = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
}

message CollectDailyBonusOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		TOO_SOON = 3;
	}

	optional Result result = 1;
}

message CollectDailyBonusProto {
}

message CollectDailyDefenderBonusOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		TOO_SOON = 3;
		NO_DEFENDERS = 4;
	}

	optional Result result = 1;
	repeated string currency_type = 2;
	repeated int32 currency_awarded = 3;
	optional int32 num_defenders = 4;
}

message CollectDailyDefenderBonusProto {
}

message CombatActionProto {
	enum ActionType {
		UNSET = 0;
		ATTACK = 1;
		SPECIAL_ATTACK = 2;
		SPECIAL_ATTACK_2 = 3;
		MINIGAME_OFFENSIVE_FINISH = 4;
		MINIGAME_DEFENSIVE_START = 5;
		MINIGAME_DEFENSIVE_FINISH = 6;
		FAINT = 7;
		CHANGE_POKEMON = 8;
		QUICK_SWAP_POKEMON = 9;
	}

	optional ActionType type = 1;
	optional int32 action_start_turn = 3;
	optional int32 duration_turns = 5;
	optional int32 attacker_index = 6;
	optional int32 target_index = 7;
	optional fixed64 active_pokemon_id = 8;
	optional fixed64 target_pokemon_id = 14;
	optional float minigame_score = 15;
	optional HoloPokemonMove move = 16;
}

message CombatBaseStatsProto {
	optional int32 total_battles = 1;
	optional int32 wins = 2;
	optional float rating = 3;
}

message CombatChallengeGlobalSettingsProto {
	optional FriendshipLevelMilestone distance_check_override_friendship_level = 1;
	optional int32 get_combat_challenge_polling_interval_sec = 2;
	optional bool enable_downstream_dispatch = 3;
	optional bool enable_challenge_notifications = 4;
}

message CombatChallengeProto {
	enum CombatChallengeState {
		UNSET = 0;
		CREATED = 1;
		OPENED = 2;
		CANCELLED = 3;
		ACCEPTED = 4;
		DECLINED = 5;
		READY = 6;
		TIMEOUT = 7;
	}

	message ChallengePlayer {
		optional string player_id = 1;
		optional PlayerAvatarProto player_avatar = 2;
		optional int64 combat_player_s2_cell_id = 3;
		repeated fixed64 attacking_pokemon_id = 4;
		optional PlayerPublicProfileProto public_profile = 5;
	}

	optional string challenge_id = 1;
	optional CombatType type = 2;
	optional string combat_league_template_id = 3;
	optional ChallengePlayer challenger = 5;
	optional ChallengePlayer opponent = 6;
	optional CombatChallengeState state = 7;
	optional int64 created_timestamp_ms = 8;
	optional string combat_id = 10;
	optional int64 expiration_timestamp_ms = 19;
}

message CombatCompetitiveSeasonSettingsProto {
	repeated uint64 season_end_time_timestamp = 1;
	optional float rating_adjustment_percentage = 2;
	optional float ranking_adjustment_percentage = 3;
}

message CombatDefensiveInputChallengeSettings {
	optional float full_rotations_for_max_score = 1;
}

message CombatEndDataProto {
	enum EndType {
		NO_END = 0;
		COMBAT_STATE_EXIT = 1;
	}

	optional EndType end_type = 1;
}

message CombatFriendRequestOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_COMBAT_NOT_FOUND = 2;
		ERROR_COMBAT_INCOMPLETE = 3;
		ERROR_PLAYER_NOT_IN_COMBAT = 4;
		ERROR_SOCIAL_RPC = 5;
	}

	optional Result result = 1;
}

message CombatFriendRequestProto {
	optional string combat_id = 1;
}

message CombatGlobalSettingsProto {
	enum ObCombatType {
		NONE = 0;
		TRAINER_NPC_COMBAT = 1;
		INVASION_GRUNT_COMBAT = 2;
		INVASION_BOSS_COMBAT = 3;
		FRIEND_COMBAT = 4;
	}

	optional bool enable_combat = 1;
	optional int32 maximum_daily_rewarded_battles = 2;
	optional bool enable_combat_stat_stages = 3;
	optional uint32 minimum_player_level = 4;
	optional int32 maximum_daily_npc_rewarded_battles = 5;
	optional int32 active_combat_update_interval_ms = 6;
	optional int32 waiting_for_player_update_interval_ms = 7;
	optional int32 ready_for_battle_update_interval_ms = 8;
	optional int32 pre_move_submit_window_ms = 9;
	optional int32 post_move_submit_window_ms = 10;
	optional bool enable_sockets = 11;
	optional bool enable_spin_minigame = 12;
	optional bool enable_quick_swap_v2 = 13;
	optional bool deprecated_vs_seeker_setting = 14;
	optional int32 vs_seeker_walking_dist_poll_duration_ms = 15;
	optional int32 vs_seeker_player_min_level = 16;
	optional int32 matchmaking_poll_duration_ms = 17;
	optional bool enable_particle_minigame = 18;
	optional bool enable_vs_seeker_upgrade_iap = 19;
	optional bool enable_flyout_animations = 20;
	optional bool enable_battle_hub = 21;
	optional int32 matchmaking_timeout_duration_ms = 22;
	optional int64 planned_downtime_timestamp_ms = 23;
	optional int32 latency_compensation_threshold_ms = 24;
	repeated ObCombatType ob_combat_type = 25;
	repeated string ob_string = 26;
}

message CombatHubEntranceTelemetry {
	optional CombatHubEntranceTelemetryIds combat_hub_telemetry_id = 1;
}

message CombatIdMismatchDataProto {
	optional string ob_string = 1;
	optional ObCombatMismatchData.MismatchState.Type type = 2;
}

message CombatLeagueProto {
	enum ConditionType {
		UNSET = 0;
		WITH_POKEMON_CP_LIMIT = 1;
		WITH_PLAYER_LEVEL = 2;
		WITH_POKEMON_TYPE = 3;
		WITH_POKEMON_CATEGORY = 4;
		WITH_UNIQUE_POKEMON = 5;
		POKEMON_WHITELIST = 6;
		POKEMON_BANLIST = 7;
		POKEMON_CAUGHT_TIMESTAMP = 8;
		POKEMON_LEVEL_RANGE = 9;
	}

	enum LeagueType {
		NONE = 0;
		STANDARD = 1;
		PREMIER = 2;
	}

	message PokemonBanlist {
		optional string name = 1;
		repeated PokemonWithForm pokemon = 2;
	}

	message PokemonCaughtTimestamp {
		optional int64 after_timestamp = 1;
		optional int64 before_timestamp = 2;
	}

	message PokemonConditionProto {
		optional WithPokemonCpLimitProto with_pokemon_cp_limit = 2;
		optional WithPokemonTypeProto with_pokemon_type = 3;
		optional WithPokemonCategoryProto with_pokemon_category = 4;
		optional PokemonWhitelist pokemon_white_list = 5;
		optional PokemonBanlist pokemon_ban_list = 6;
		optional PokemonCaughtTimestamp pokemon_caught_timestamp = 7;
		optional PokemonLevelRange pokemon_level_range = 8;

		optional ConditionType type = 1;
	}

	message PokemonLevelRange {
		optional int32 min_level = 1;
		optional int32 max_level = 2;
	}

	message PokemonWhitelist {
		optional string name = 1;
		repeated PokemonWithForm pokemon = 2;
	}

	message PokemonWithForm {
		optional HoloPokemonId id = 1;
		optional PokemonDisplayProto.Form form = 2;
		repeated PokemonDisplayProto.Form forms = 3;
	}

	message UnlockConditionProto {
		optional WithPlayerLevelProto with_player_level = 3;
		optional WithPokemonCpLimitProto with_pokemon_cp_limit = 4;
		optional WithPokemonTypeProto with_pokemon_type = 5;
		optional WithPokemonCategoryProto with_pokemon_category = 6;
		optional PokemonWhitelist pokemon_white_list = 7;
		optional PokemonBanlist pokemon_ban_list = 8;
		optional PokemonCaughtTimestamp pokemon_caught_timestamp = 9;
		optional PokemonLevelRange pokemon_level_range = 10;

		optional ConditionType type = 1;
		optional int32 min_pokemon_count = 2;
	}

	optional string title = 1;
	optional bool enabled = 2;
	repeated UnlockConditionProto unlock_condition = 3;
	repeated PokemonConditionProto pokemon_condition = 4;
	optional string icon_url = 5;
	optional int32 pokemon_count = 6;
	repeated HoloPokemonId banned_pokemon = 7;
	optional HoloBadgeType badge_type = 8;
	optional int32 minigame_defense_chance_limit = 9;
	optional string battle_party_combat_league_template_id = 10;
	optional LeagueType league_type = 11;
	optional string border_color_hex = 12;
	optional bool allow_temp_evos = 13;
	repeated CombatRefactorToggleProto combat_refactor_toggle = 14;
}

message CombatLeagueSettingsProto {
	repeated string combat_league_template_id = 1;
}

message CombatLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional CombatPlayerFinishState finish_state = 2;
	optional LootProto rewards = 3;
	optional string opponent = 4;
	optional string combat_league_template_id = 5;
	optional string npc_template_id = 6;
}

message CombatLogProto {
	optional CombatSeasonResult lifetime_results = 1;
	optional CombatSeasonResult current_season_results = 2;
	repeated VsSeekerBattleResult current_vs_seeker_set_results = 4;
	optional CombatSeasonResult previous_season_results = 5;
}

message CombatMinigameTelemetry {
	enum MinigameCombatType {
		UNSET = 0;
		PVP = 1;
		PVE = 2;
	}

	optional MinigameCombatType combat_type = 1;
	optional HoloPokemonType move_type = 2;
	optional float score = 3;
}

message CombatMoveSettingsProto {
	message CombatMoveBuffsProto {
		optional int32 attacker_attack_stat_stage_change = 1;
		optional int32 attacker_defense_stat_stage_change = 2;
		optional int32 target_attack_stat_stage_change = 3;
		optional int32 target_defense_stat_stage_change = 4;
		optional float buff_activation_chance = 5;
	}

	optional HoloPokemonMove unique_id = 1;
	optional HoloPokemonType type = 2;
	optional float power = 3;
	optional string vfx_name = 4;
	optional int32 duration_turns = 5;
	optional int32 energy_delta = 6;
	optional CombatMoveBuffsProto buffs = 7;
}

message CombatNpcPersonalityProto {
	optional string personality_name = 1;
	optional float super_effective_chance = 2;
	optional float special_chance = 3;
	optional float defensive_minimum_score = 4;
	optional float defensive_maximum_score = 5;
	optional float offensive_minimum_score = 6;
	optional float offensive_maximum_score = 7;
}

message CombatNpcTrainerProto {
	optional string trainer_name = 1;
	optional string combat_league_template_id = 2;
	optional string combat_personality_id = 3;
	optional string win_loot_table_id = 4;
	optional string lose_loot_table_id = 5;
	optional PlayerAvatarProto avatar = 7;
	repeated NpcPokemonProto available_pokemon = 8;
	optional string trainer_title = 9;
	optional string trainer_quote = 10;
	optional string icon_url = 11;
	optional string backdrop_image_bundle = 12;
}

message CombatOffensiveInputChallengeSettings {
	optional float score_per_tap = 1;
	optional float score_decay_per_second = 2;
	optional float max_score = 3;
	optional float high_score_additional_decay_per_second = 4;
	optional float max_time_additional_decay_per_second = 5;
}

message CombatPlayerPreferencesProto {
	optional bool friends_combat_opt_out = 1;
	optional bool nearby_combat_opt_in = 2;
}

message CombatPlayerProfileProto {
	message Location {
		optional double lat_degree = 1;
		optional double lng_degree = 2;
	}

	optional string player_id = 1;
	optional PlayerPublicProfileProto public_profile = 2;
	repeated string combat_league_template_id = 3;
	optional fixed64 buddy_pokemon_id = 4;
	optional Location location = 5;
	optional CombatPlayerPreferencesProto combat_player_preferences = 6;
}

message CombatProto {
	enum CombatState {
		UNSET = 0;
		WAITING_FOR_PLAYERS = 1;
		READY = 2;
		ACTIVE = 3;
		SPECIAL_ATTACK = 4;
		WAITING_FOR_CHANGE_POKEMON = 5;
		FINISHED = 6;
		PLAYER_QUIT = 7;
		TIMEOUT = 8;
		SYNC = 9;
	}

	message CombatPlayerProto {
		optional PlayerPublicProfileProto public_profile = 1;
		optional CombatPokemonProto active_pokemon = 2;
		repeated CombatPokemonProto reserve_pokemon = 3;
		repeated CombatPokemonProto fainted_pokemon = 4;
		optional CombatActionProto current_action = 5;
		optional bool lockstep_ack = 6;
		optional int32 last_updated_turn = 7;
		optional CombatActionProto minigame_action = 8;
		optional int64 quick_swap_available_ms = 9;
		optional int32 minigame_defense_chances_left = 10;
		optional string combat_npc_personality_id = 11;
		optional int32 times_combat_actions_called = 12;
		optional int64 lobby_join_time_ms = 13;
		optional int32 super_effective_charge_attacks_used = 14;
	}

	message CombatPokemonProto {
		optional fixed64 pokemon_id = 1;
		optional HoloPokemonId pokedex_id = 2;
		optional int32 cp = 3;
		optional float cp_multiplier = 4;
		optional int32 stamina = 5;
		optional int32 max_stamina = 6;
		optional HoloPokemonMove move1 = 7;
		optional HoloPokemonMove move2 = 8;
		optional HoloPokemonMove move3 = 9;
		optional int32 energy = 10;
		optional PokemonDisplayProto pokemon_display = 11;
		optional int32 individual_attack = 12;
		optional int32 individual_defense = 13;
		optional int32 individual_stamina = 14;
		optional int32 attack_stat_stage = 15;
		optional int32 defense_stat_stage = 16;
		optional int32 battles_won = 17;
		optional int32 battles_lost = 18;
		optional string nickname = 19;
		optional Item pokeball = 20;
	}

	message ObCombatField {
		optional int64 ob_int64_1 = 1;
		optional int64 ob_int64_2 = 2;
		optional int32 ob_int32_1 = 3;
		optional int32 ob_int32_2 = 4;
	}

	optional CombatState combat_state = 1;
	optional string combat_id = 2;
	optional CombatPlayerProto player = 3;
	optional CombatPlayerProto opponent = 4;
	optional int64 combat_start_ms = 5;
	optional int64 combat_end_ms = 6;
	optional int64 server_ms = 7;
	optional int32 current_turn = 8;
	optional int64 turn_start_ms = 9;
	optional int64 minigame_end_ms = 10;
	optional int64 minigame_submit_score_end_ms = 11;
	optional int64 change_pokemon_end_ms = 12;
	optional int64 quick_swap_cooldown_duration_ms = 13;
	optional int64 state_change_delay_until_turn = 14;
	optional ObCombatField ob_field = 15;
	optional int32 ob_int32_1 = 16;
	optional bool ob_bool = 17;
	optional int32 ob_int32_2 = 18;
}

message CombatPubSubDataProto {
	enum Type {
		NO_TYPE = 0;
		END_NPC_COMBAT = 1;
		END_INVASION_COMBAT = 2;
		COMBAT_NOTIFY = 3;
		END_PVP_COMBAT = 4;
		VS_SEEKER_MATCH_STARTED = 5;
		COMBAT_CHARGE_ATTACK_ANIMATION_ACTIVE_CHANGE = 6;
		COMBAT_UPDATE_ACTION_UI = 7;
		COMBAT_EXIT_COMBAT_STATE = 8;
		COMBAT_SUPER_EFFECTIVE_CHARGED_ATTACKS_UPDATE = 9;
		COMBAT_STATE_ENTERED = 10;
		COMBAT_STATE_DONE = 11;
		COMBAT_STATE_EXITED = 12;
		COMBAT_INITIALIZE_PRESENTATION_DIRECTOR = 13;
		COMBAT_SHOW_UI = 14;
		COMBAT_HIDE_UI = 15;
		COMBAT_SHOW_MESSAGE = 16;
		COMBAT_SHOW_TOAST = 17;
		COMBAT_SHOW_TUTORIAL = 18;
		COMBAT_UPDATE_IS_SHOWING_CHARGE_ANIM = 19;
		COMBAT_PLAY_MINI_GAME = 20;
		COMBAT_CONTINUE_AFTER_MINI_GAME = 21;
		COMBAT_SHOW_SPECIAL_ATTACK = 22;
		COMBAT_SPECIAL_MOVE_STATE_ENDED = 23;
		COMBAT_CLEAN_UP_SPECIAL_MOVE_STATE = 24;
		COMBAT_HANDLE_SPECIAL_MOVE_CAMERA_ZOOM = 25;
		COMBAT_SHIELD_USED = 26;
		COMBAT_DEFENDER_FLINCH = 27;
		COMBAT_OPPONENT_REACT = 28;
		COMBAT_FOCUS_ON_POKEMON = 29;
		COMBAT_PLAY_START_FADE_TRANSITION = 30;
		COMBAT_PLAY_END_FADE_TRANSITION = 31;
		COMBAT_COUNTDOWN_STARTED = 32;
		COMBAT_PLAY_BACK_BUTTON_SFX = 33;
		COMBAT_SETUP_COMBAT_STAGE_SUBSCRIPTIONS = 34;
		COMBAT_OPPONENT_RETRIEVE_POKEMON = 35;
		COMBAT_HIDE_NAMEPLATE = 36;
		COMBAT_DISPLAY_PHYSICAL_SHIELD = 37;
		COMBAT_UPDATE_TIMER = 38;
		COMBAT_STOP_CHARGE_ATTACK_EFFECTS = 39;
		COMBAT_DEFENSIVE_MINI_GAME_DECIDED = 40;
		COMBAT_DEFENSIVE_MINI_GAME_SERVER_RESPONSE = 41;
		COMBAT_PAUSE_NOTIFY_COMBAT_POKEMON = 42;
	}

	optional Type type = 1;
}

message CombatQuestUpdateProto {
	optional int32 super_effective_charged_attacks_update = 1;
}

message CombatRankingSettingsProto {
	message RankLevelProto {
		optional int32 rank_level = 1;
		optional int32 additional_total_battles_required = 2;
		optional int32 additional_wins_required = 3;
		optional int32 min_rating_required = 4;
	}

	repeated RankLevelProto rank_level = 1;
	optional RankLevelProto required_for_rewards = 2;
	optional int32 min_rank_to_display_rating = 3;
	optional int32 min_rating_required = 4;
}

message CombatSeasonResult {
	optional int32 season = 1;
	optional int32 rank = 2;
	optional int32 total_battles = 3;
	optional int32 total_wins = 4;
	optional float rating = 5;
	optional int32 longest_win_streak = 6;
	optional int32 current_streak = 7;
	optional int64 stardust_earned = 8;
}

message CombatSettingsProto {
	optional float round_duration_seconds = 1;
	optional float turn_duration_seconds = 2;
	optional float minigame_duration_seconds = 3;
	optional float same_type_attack_bonus_multiplier = 4;
	optional float fast_attack_bonus_multiplier = 5;
	optional float charge_attack_bonus_multiplier = 6;
	optional float defense_bonus_multiplier = 7;
	optional float minigame_bonus_base_multiplier = 8;
	optional float minigame_bonus_variable_multiplier = 9;
	optional int32 max_energy = 10;
	optional float defender_minigame_multiplier = 11;
	optional float change_pokemon_duration_seconds = 12;
	optional float minigame_submit_score_duration_seconds = 13;
	optional float quick_swap_combat_start_available_seconds = 14;
	optional float quick_swap_cooldown_duration_seconds = 15;
	optional CombatOffensiveInputChallengeSettings offensive_input_challenge_settings = 16;
	optional CombatDefensiveInputChallengeSettings defensive_input_challenge_settings = 17;
	optional float charge_score_base = 18;
	optional float charge_score_nice = 19;
	optional float charge_score_great = 20;
	optional float charge_score_excellent = 21;
	optional int32 swap_animation_duration_turns = 22;
	optional int32 super_effective_flyout_duration_turns = 23;
	optional int32 not_very_effective_flyout_duration_turns = 24;
	optional int32 blocked_effective_flyout_duration_turns = 25;
	optional int32 normal_effective_flyout_duration_turns = 26;
	optional int32 faint_animation_duration_turns = 27;
	optional int32 npc_swap_delay_turns = 28;
	optional int32 npc_charged_attack_delay_turns = 29;
	optional float shadow_pokemon_attack_bonus_multiplier = 30;
	optional float shadow_pokemon_defense_bonus_multiplier = 31;
	optional float purified_pokemon_attack_multiplier_vs_shadow = 32;
	repeated CombatRefactorToggleProto combat_refactor_toggle = 35;
	optional bool ob_bool = 36;
	optional int32 ob_int32_1 = 37;
	optional ObCombatSettings ob_combat_settings = 38;
	optional ObCombatSettings1 ob_combat_settings_1 = 39;
	optional int32 ob_int32_2 = 40;
}

message CombatStatStageSettingsProto {
	optional int32 minimum_stat_stage = 1;
	optional int32 maximum_stat_stage = 2;
	repeated float attack_buff_multiplier = 3;
	repeated float defense_buff_multiplier = 4;
}

message CombatSyncServerDataProto {
	optional int32 ob_int32 = 1;
}

message CombatSyncServerResponseDataProto {
	optional int32 ob_int32 = 1;
	optional CombatSyncServerResponseStateDataProto.Result result = 2;
	optional uint32 ob_uint32 = 3;
}

message CombatSyncServerResponseStateDataProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional int64 ob_int64 = 1;
	optional Result result = 2;
}

message CombatTypeProto {
	optional HoloPokemonType type = 1;
	optional float nice_level_threshold = 2;
	optional float great_level_threshold = 3;
	optional float excellent_level_threshold = 4;
}

message CommonFilterProto {
	optional string application_identifier = 1;
	optional string operating_system_name = 2;
	optional string device_model = 3;
	optional string locale_country_code = 4;
	optional string locale_language_code = 5;
	optional double sampling_probability = 6;
	optional string quality_level = 7;
	optional string network_connectivity_type = 8;
	optional string game_context = 9;
}

message CommonTelemetryBootTime {
	optional string boot_phase = 1;
	optional int64 duration_ms = 2;
}

message CommonTelemetryLogIn {
	optional int64 timestamp_ms = 1;
}

message CommonTelemetryOmniPushOpened {
	optional string push_id = 1;
	optional int64 opened_timestamp_ms = 2;
}

message CommonTelemetryOmniPushReceived {
	optional string push_id = 1;
	optional int64 received_timestamp_ms = 2;
}

message CommonTelemetryShopClick {
	enum AccessType {
		UNSPECIFIED = 0;
		PASSIVE = 1;
		ACTIVE = 2;
	}

	optional string shopping_page_click_id = 1;
	optional string sku_id = 2;
	optional string item_id = 3;
	optional string consolidated_item_id = 4;
	optional string currency = 5;
	optional int64 fiat_price = 6;
	repeated InGamePurchaseDetails in_game_purchase_details = 7;
	optional bool is_item_free_fiat = 8;
	optional bool is_item_free_ingame = 9;
	optional int64 time_elapsed_since_enter_page = 10;
	optional string root_store_page_session_id = 11;
	optional int64 pair_id = 12;
	optional string store_page_name = 13;
	optional string root_store_page_name = 14;
	optional AccessType access_type = 15;
	optional string fiat_formatted_price = 16;
}

message CommonTelemetryShopView {
	optional string shopping_page_view_type_id = 1;
	optional int64 view_start_timestamp_ms = 2;
	optional int64 view_end_timestamp_ms = 3;
	repeated string consolidated_item_id = 4;
	optional string root_store_page_session_id = 5;
}

message CompleteCompetitiveSeasonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_HAS_NO_VS_SEEKER = 2;
		ERROR_REWARDS_ALREADY_COLLECTED = 3;
	}

	optional Result result = 1;
	optional LootProto loot_proto = 2;
	optional int32 new_rank = 3;
	optional float new_rating = 4;
	optional CombatSeasonResult last_season_result = 5;
	optional bool was_player_active = 6;
}

message CompleteCompetitiveSeasonProto {
}

message CompleteInvasionDialogueOutProto {
	optional InvasionStatus.Status status = 1;
}

message CompleteInvasionDialogueProto {
	optional IncidentLookupProto incident_lookup = 1;
	optional int32 step = 2;
}

message CompleteMilestoneOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
		ERROR_MILESTONE_NOT_FOUND = 3;
		ERROR_MILESTONE_COMPLETE = 4;
		ERROR_MILESTONE_NOT_ACHIEVED = 5;
		ERROR_POKEMON_INVENTORY_FULL = 6;
	}

	optional Status status = 1;
}

message CompleteMilestoneProto {
	optional string milestone_id = 1;
}

message CompleteQuestLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional ClientQuestProto quest = 2;
	repeated QuestStampProto stamp = 3;
}

message CompleteQuestOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_QUEST_NOT_FOUND = 2;
		ERROR_QUEST_STILL_IN_PROGRESS = 3;
		ERROR_QUEST_ALREADY_COMPLETED = 4;
		ERROR_SUBQUEST_NOT_FOUND = 5;
		ERROR_SUBQUEST_STILL_IN_PROGRESS = 6;
		ERROR_SUBQUEST_ALREADY_COMPLETED = 7;
		ERROR_MULTIPART_STILL_IN_PROGRESS = 8;
		ERROR_MULTIPART_ALREADY_COMPLETED = 9;
		ERROR_REDEEM_COMPLETED_QUEST_STAMP_CARD_FIRST = 10;
		ERROR_INVENTORY_FULL = 11;
		ERROR_INVALID_BRANCH = 12;
	}

	optional Status status = 1;
	optional ClientQuestProto quest = 2;
	repeated QuestStampProto stamp = 3;
}

message CompleteQuestPokemonEncounterLogEntry {
	enum Result {
		UNSET = 0;
		POKEMON_CAPTURED = 1;
		POKEMON_FLED = 2;
	}

	optional Result result = 1;
	optional int32 pokedex_number = 2;
	optional int32 combat_points = 3;
	optional fixed64 pokemon_id = 4;
	optional PokemonDisplayProto pokemon_display = 5;
	optional EncounterType encounter_type = 6;
}

message CompleteQuestProto {
	optional string quest_id = 1;
	optional string sub_quest_id = 2;
	optional int32 ob_int32 = 3;
}

message CompleteQuestStampCardLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	repeated QuestRewardProto reward = 2;
}

message CompleteQuestStampCardOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_STILL_IN_PROGRESS = 2;
	}

	optional Status status = 1;
	repeated QuestRewardProto reward = 2;
}

message CompleteQuestStampCardProto {
}

message CompleteReferralMilestoneLogEntry {
	message MilestoneLogEntryProto {
		optional string name_key = 1;
		repeated TemplateVariableProto name_template_variable = 6;
	}

	message TemplateVariableProto {
		optional string name = 1;
		optional string literal = 2;
	}

	optional MilestoneLogEntryProto milestone_completed = 1;
	repeated QuestRewardProto reward = 2;
}

message CompleteSnapshotSessionOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PHOTO_POKEMON_INVALID = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Status status = 1;
}

message CompleteSnapshotSessionProto {
	optional fixed64 photo_pokemon_id = 1;
	optional int32 num_photos_taken = 2;
	optional int64 snapshot_session_start_time = 3;
}

message CompleteVsSeekerAndRestartChargingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_VS_SEEKER_NOT_FOUND = 2;
		ERROR_VS_SEEKER_ALREADY_STARTED_CHARGING = 3;
		ERROR_VS_SEEKER_ALREADY_FULLY_CHARGED = 4;
		ERROR_VS_SEEKER_PLAYER_IN_WRONG_SEASON = 5;
		ERROR_PLAYER_INVENTORY_FULL = 6;
		ERROR_PLAYER_HAS_UNCLAIMED_REWARDS = 7;
	}

	optional Result result = 1;
	optional VsSeekerAttributesProto vs_seeker = 2;
	optional LootProto loot_proto = 3;
	optional CombatSeasonResult current_season_result = 4;
	optional int32 previous_rank = 5;
	optional float previous_rating = 6;
	optional CombatBaseStatsProto stats_at_rank_start = 7;
	repeated string avatar_template_id_rewarded = 8;
}

message CompleteVsSeekerAndRestartChargingProto {
}

message CompleteWildSnapshotSessionOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PHOTO_POKEMON_INVALID = 2;
		ERROR_NO_PHOTOS_TAKEN = 3;
		ERROR_UNKNOWN = 4;
	}

	optional Status status = 1;
}

message CompleteWildSnapshotSessionProto {
	optional int32 photo_pokedex_id = 1;
	optional int32 num_photos_taken = 2;
	optional HoloPokemonType type_1 = 3;
	optional HoloPokemonType type_2 = 4;
	optional string spawn_point_id = 5;
	optional uint64 encounter_id = 6;
}

message ConfirmPhotobombOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PHOTOBOMB_NOT_FOUND = 2;
		ERROR_PHOTOBOMB_ALREADY_CONFIRMED = 3;
		ERROR_UNKNOWN = 4;
	}

	optional Status status = 1;
}

message ConfirmPhotobombProto {
	optional fixed64 encounter_id = 1;
}

message ConfirmTradingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FRIEND_NOT_FOUND = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_INVALID_STATE = 5;
		ERROR_STATE_HANDLER = 6;
		ERROR_INVALID_POKEMON = 7;
		ERROR_INSUFFICIENT_PAYMENT = 8;
		ERROR_NO_PLAYER_POKEMON = 9;
		ERROR_NO_FRIEND_POKEMON = 10;
		ERROR_PLAYER_ALREADY_CONFIRMED = 11;
		ERROR_TRANSACTION_LOG_NOT_MATCH = 12;
		ERROR_TRADING_EXPIRED = 13;
		ERROR_TRANSACTION = 14;
		ERROR_DAILY_LIMIT_REACHED = 15;
	}

	optional Result result = 1;
	optional TradingProto trading = 2;
}

message ConfirmTradingProto {
	optional string player_id = 1;
	optional string transaction_log = 2;
}

message ContactSettingsProto {
	optional bool send_marketing_emails = 1;
	optional bool send_push_notifications = 2;
}

message ConvertCandyToXlCandyOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_ENOUGH_CANDY = 2;
		ERROR_PLAYER_LEVEL_TOO_LOW = 3;
	}

	optional Status status = 1;
}

message ConvertCandyToXlCandyProto {
	optional HoloPokemonFamilyId family = 1;
	optional int32 num_xl_candy = 2;
}

message CrashlyticsSettingsProto {
	optional bool enabled = 1;
	optional float session_sampling_fraction = 2;
}

message CreateBuddyMultiplayerSessionOutProto {
	enum Result {
		CREATE_SUCCESS = 0;
		CREATE_BUDDY_NOT_SET = 1;
		CREATE_BUDDY_NOT_FOUND = 2;
		CREATE_BAD_BUDDY = 3;
		CREATE_BUDDY_V2_NOT_ENABLED = 4;
		CREATE_PLAYER_LEVEL_TOO_LOW = 5;
		CREATE_UNKNOWN_ERROR = 6;
		CREATE_U13_NO_PERMISSION = 7;
	}

	optional string plfe_session_id = 1;
	optional bytes arbe_join_token = 2;
	optional int64 generation_timestamp = 3;
	optional int32 max_players = 4;
	optional Result result = 5;
}

message CreateBuddyMultiplayerSessionProto {
}

message CreateCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
}

message CreateCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 3;
		ERROR_ACCESS_DENIED = 4;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
}

message CreateCombatChallengeProto {
	optional string challenge_id = 1;
}

message CreateCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional CreateCombatChallengeOutProto.Result result = 3;
}

message CreatePokemonTagOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		TAG_ALREADY_EXISTS = 3;
		PLAYER_HAS_MAXIMUM_NUMBER_OF_TAGS = 4;
		TAG_NAME_CONTAINS_PROFANITY = 5;
	}

	optional Result result = 1;
	optional PokemonTagProto created_tag = 2;
}

message CreatePokemonTagProto {
	optional string name = 1;
	optional PokemonTagColor color = 2;
}

message CreatePostcardOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_SENDER_DOES_NOT_EXIST = 2;
		ERROR_GIFT_DOES_NOT_EXIST = 3;
		ERROR_POSTCARD_ALREADY_CREATED = 4;
		ERROR_POSTCARD_INVENTORY_FULL = 5;
		ERROR_NOT_ENABLED = 6;
		ERROR_RATE_LIMITED = 7;
		ERROR_PLAYER_HAS_NO_STICKERS = 8;
	}

	optional Result result = 1;
	optional PostcardDisplayProto postcard = 2;
}

message CreatePostcardProto {
	optional uint64 giftbox_id = 1;
	optional string sender_id = 2;
	repeated string sticker_id = 3;
}

message CreateSharedLoginTokenRequest {
	optional string device_id = 1;
}

message CreateSharedLoginTokenResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	message TokenMetaData {
		optional string email = 1;
		optional int64 expiration_timestamp_ms = 2;
	}

	optional Status status = 1;
	optional bytes shared_login_token = 2;
	optional TokenMetaData token_meta_data = 3;
}

message CrmProxyRequestProto {
	optional uint32 action = 1;
	optional bytes payload = 2;
}

message CrmProxyResponseProto {
	enum Status {
		UNSET = 0;
		OK = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PERMISSION_DENIED = 3;
		ERROR_UNAVAILABLE = 4;
		ERROR_UNAUTHENTICATED = 5;
	}

	optional Status status = 1;
	optional string error_message = 2;
	optional bytes payload = 3;
}

message CrossGameSocialGlobalSettingsProto {
	optional int32 online_status_min_level = 1;
	optional int32 niantic_profile_min_level = 2;
	optional int32 friends_list_min_level = 3;
	optional int32 max_friends_per_detail_page = 4;
}

message CrossGameSocialSettingsProto {
	optional bool online_status_enabled_override_level = 1;
	optional bool niantic_profile_enabled_override_level = 2;
	optional bool friends_list_enabled_override_level = 3;
}

message CurrencyQuantityProto {
	optional string currency_type = 1;
	optional int32 quantity = 2;
	optional int32 fiat_purchased_quantity = 3;
	optional string fiat_currency_type = 4;
	optional int64 fiat_currency_cost_e6 = 5;
}

message CurrencyUpdateProto {
	optional string currency_name = 1;
	optional int32 currency_delta = 2;
	optional int32 currency_balance = 3;
	optional int32 fiat_purchased_balance = 4;
}

message CurrentNewsProto {
	repeated NewsArticleProto news_articles = 1;
	optional string news_strings_url = 2;
	optional int64 last_updated_timestamp = 3;
}

message DailyAdventureIncenseLogEntry {
	optional uint64 day_bucket = 1;
}

message DailyBonusProto {
	optional int64 next_collect_timestamp_ms = 1;
	optional int64 next_defender_bonus_collect_timestamp_ms = 2;
}

message DailyBuddyAffectionQuestProto {
	optional DailyCounterProto daily_affection_counter = 1;
}

message DailyCounterProto {
	optional int64 window = 1;
	optional int32 count = 2;
	optional int32 buckets_per_day = 3;
}

message DailyEncounterGlobalSettingsProto {
	optional bool enabled = 1;
}

message DailyEncounterOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ENCOUNTER_NOT_AVAILABLE = 2;
		POKEMON_INVENTORY_FULL = 3;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional int32 arplus_attempts_until_flee = 5;
}

message DailyEncounterProto {
	optional int64 encounter_id = 1;
	optional string encounter_location = 2;
}

message DailyQuestProto {
	optional int32 current_period_bucket = 1;
	optional int32 current_streak_count = 2;
}

message DailyQuestSettings {
	optional int32 buckets_per_day = 1;
	optional int32 streak_length = 2;
	optional float bonus_multiplier = 3;
	optional float streak_bonus_multiplier = 4;
	optional bool disable = 5;
}

message DailyStreaksProto {
	message StreakProto {
		optional QuestType quest_type = 1;
		optional int32 count = 2;
		optional int32 target = 3;
		optional int32 remaining_today = 4;
	}

	repeated StreakProto streaks = 1;
}

message DamagePropertyProto {
	optional bool super_effective_charge_move = 1;
	optional bool weather_boosted = 2;
}

message DataAccessRequest {
	optional string email = 1;
	optional string language_short_code = 2;
}

message DataAccessResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALIDEMAIL = 2;
		ERROR_INVALIDLANGUAGE = 3;
		ERROR_UNKNOWN = 4;
	}

	optional Status status = 1;
	optional string error_message = 2;
}

message DaysWithARowQuestProto {
	optional int32 last_window = 1;
}

message DebugInfoProto {
	optional double latitude = 1;
	optional double longitude = 2;
}

message DeclineCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
}

message DeclineCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
		ERROR_ALREADY_TIMEDOUT = 4;
		ERROR_ALREADY_CANCELLED = 5;
	}

	optional Result result = 1;
}

message DeclineCombatChallengeProto {
	optional string challenge_id = 1;
}

message DeclineCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional DeclineCombatChallengeOutProto.Result result = 3;
}

message DeclineExRaidPassLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string friend_codename = 2;
}

message DeclineExRaidPassOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_EX_RAID_PASS_NOT_FOUND = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Result result = 1;
}

message DeclineExRaidPassProto {
	optional string fort_id = 1;
	optional int64 raid_seed = 2;
}

message DeclineFriendInviteOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVITE_DOES_NOT_EXIST = 3;
		ERROR_INVITE_ALREADY_DECLINED = 4;
	}

	optional Result result = 1;
}

message DeclineFriendInviteProto {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message DeepLinkingEnumWrapperProto {
	enum DeepLinkingActionName {
		UNSET = 0;
		OPEN_SHOP = 1;
		OPEN_NEWS = 2;
		OPEN_BATTLE_LEAGUE = 3;
		OPEN_SETTINGS = 4;
		OPEN_PLAYER_PROFILE = 5;
		OPEN_BUDDY = 6;
		OPEN_AVATAR_ITEMS = 7;
		OPEN_QUEST_LIST = 8;
		OPEN_POKEMON_INVENTORY = 9;
		OPEN_NEARBY_POKEMON = 10;
		OPEN_POKEDEX = 11;
		OPEN_EVENTS = 12;
		OPEN_JOURNAL = 13;
		OPEN_TIPS = 14;
		OPEN_ITEM_INVENTORY = 15;
		FILL_REFERRAL_CODE = 16;
		OPEN_ADDRESS_BOOK = 17;
	}

	enum NearbyPokemonTab {
		NEARBY_POKEMON = 0;
		RAIDS = 1;
		ROUTES = 2;
	}

	enum PlayerProfileTab {
		PROFILE = 0;
		FRIENDS = 1;
	}

	enum PokemonInventoryTab {
		COMBAT_PARTY = 0;
		POKEMON = 1;
		EGGS = 2;
	}

	enum QuestListTab {
		TODAY_VIEW = 0;
		FIELD_RESEARCH = 1;
		SPECIAL_RESEARCH = 2;
	}
}

message DeepLinkingSettingsProto {
	optional int32 min_player_level_for_external_link = 1;
	optional int32 min_player_level_for_notification_link = 2;
	repeated DeepLinkingEnumWrapperProto.DeepLinkingActionName external_action = 3;
	repeated DeepLinkingEnumWrapperProto.DeepLinkingActionName notification_action = 4;
}

message DeepLinkingTelemetry {
	enum LinkSource {
		UNKNOWN = 0;
		URL = 1;
		NOTIFICATION = 2;
	}

	optional string action_name = 1;
	optional LinkSource link_source = 2;
}

message DeleteAccountEmailOnFileRequest {
	optional string language_short_code = 1;
}

message DeleteAccountEmailOnFileResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_EMAIL_NOT_ON_FILE = 2;
		ERROR_INVALID_LANGUAGE = 3;
		ERROR_APP_NOT_SUPPORTED = 4;
		ERROR_INVALID_PLAYER = 5;
		ERROR_DUPLICATE_REQUEST = 6;
		ERROR_HELPSHIFT_ERROR = 7;
		ERROR_UNKNOWN = 8;
	}

	optional Status status = 1;
	optional string error_message = 2;
	optional string confirmation_email = 3;
}

message DeleteAccountRequest {
	optional string email = 1;
	optional string language_short_code = 2;
	optional bool is_dry_run = 3;
}

message DeleteAccountResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALIDEMAIL = 2;
		ERROR_INVALIDLANGUAGE = 3;
		ERROR_UNKNOWN = 4;
		ERROR_APP_NOT_SUPPORTED = 5;
		ERROR_INVALID_PLAYER = 6;
		ERROR_DUPLICATE_REQUEST = 7;
	}

	optional Status status = 1;
	optional string error_message = 2;
}

message DeleteGiftFromInventoryOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_GIFT_DOES_NOT_EXIST = 3;
	}

	optional Result result = 1;
}

message DeleteGiftFromInventoryProto {
	repeated uint64 giftbox_id = 1;
}

message DeleteGiftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVALID_PLAYER_ID = 3;
		ERROR_FRIEND_NOT_FOUND = 4;
		ERROR_GIFT_DOES_NOT_EXIST = 5;
		ERROR_FRIEND_UPDATE = 6;
	}

	optional Result result = 1;
}

message DeleteGiftProto {
	optional string player_id = 1;
	optional uint64 giftbox_id = 2;
}

message DeletePokemonTagOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		TAG_DOES_NOT_EXIST = 3;
	}

	optional Result result = 1;
}

message DeletePokemonTagProto {
	optional uint64 tag_id = 1;
}

message DeletePostcardOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POSTCARD_DOES_NOT_EXIST = 2;
		ERROR_POSTCARD_FAVORITED = 3;
		ERROR_NOT_ENABLED = 4;
	}

	optional Result result = 1;
	optional PostcardDisplayProto postcard = 2;
}

message DeletePostcardProto {
	optional string postcard_id = 1;
}

message DeployPokemonTelemetry {
	optional int32 status = 1;
	optional PokemonTelemetry pokemon = 2;
	optional string gym_id = 3;
	optional Team team = 4;
	optional int32 defender_count = 5;
}

message DeploymentTotalsProto {
	optional int32 times_fed = 1;
	optional int32 battles_won = 2;
	optional int32 battles_lost = 3;
	optional int64 deployment_duration_ms = 4;
}

message DeveloperToken {
	optional string id_token = 1;
	optional string owner_email = 2;
}

message DeviceOSTelemetry {
	enum OSArchitecture {
		UNSET = 0;
		arch32_bit = 1;
		arch64_bit = 2;
	}

	optional OSArchitecture architecture = 1;
}

message DeviceServiceToggleTelemetry {
	optional DeviceServiceTelemetryIds device_service_telemetry_id = 1;
	optional bool was_enabled = 2;
	optional bool was_subsequent = 3;
}

message DeviceSpecificationsTelemetry {
	optional int32 device_width = 1;
	optional int32 device_height = 2;
	optional int32 camera_width = 3;
	optional int32 camera_height = 4;
	optional float camera_focal_length_fx = 5;
	optional float camera_focal_length_fy = 6;
	optional int32 camera_refresh_rate = 7;
}

message DialogueLineProto {
	optional string text = 1;
	optional DialogueNpcProto npc = 2;
}

message DialogueNpcProto {
	enum Character {
		CHARACTER_UNSET = 0;
	}

	enum Expression {
		EXPRESSION_UNSET = 0;
	}

	optional Character character = 1;
	optional Expression expression = 2;
}

message DiskEncounterOutProto {
	enum Result {
		UNKNOWN = 0;
		SUCCESS = 1;
		NOT_AVAILABLE = 2;
		NOT_IN_RANGE = 3;
		ENCOUNTER_ALREADY_FINISHED = 4;
		POKEMON_INVENTORY_FULL = 5;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional int32 arplus_attempts_until_flee = 5;
}

message DiskEncounterProto {
	optional int64 encounter_id = 1;
	optional string fort_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
	optional double gym_lat_degrees = 5;
	optional double gym_lng_degrees = 6;
}

message DismissContactListUpdateRequest {
}

message DismissContactListUpdateResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message DismissOutgoingGameInvitesRequest {
	optional string friend_id = 1;
	repeated string app_key = 2;
	optional string friend_nia_account_id = 3;
}

message DismissOutgoingGameInvitesResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
}

message DisplayWeatherProto {
	enum DisplayLevel {
		LEVEL_0 = 0;
		LEVEL_1 = 1;
		LEVEL_2 = 2;
		LEVEL_3 = 3;
	}

	optional DisplayLevel cloud_level = 1;
	optional DisplayLevel rain_level = 2;
	optional DisplayLevel wind_level = 3;
	optional DisplayLevel snow_level = 4;
	optional DisplayLevel fog_level = 5;
	optional int32 wind_direction = 6;
	optional DisplayLevel special_effect_level = 7;
}

message Distribution {
	message BucketOptions {
		optional LinearBuckets linear_buckets = 1;
		optional ExponentialBuckets exponential_buckets = 2;
		optional ExplicitBuckets explicit_buckets = 3;

		message ExplicitBuckets {
			repeated int64 bounds = 1;
		}

		message ExponentialBuckets {
			optional int64 num_finite_buckets = 1;
			optional float growth_factor = 2;
			optional float scale = 3;
		}

		message LinearBuckets {
			optional int64 num_finite_buckets = 1;
			optional int64 width = 2;
			optional int64 offset = 3;
		}
	}

	message Range {
		optional int64 min = 1;
		optional int64 max = 2;
	}

	optional int64 count = 1;
	optional float mean = 2;
	optional double sum_of_squared_deviation = 3;
	optional Range range = 4;
	optional BucketOptions bucket_options = 5;
	repeated int64 bucket_counts = 6;
}

message DownloadGmTemplatesRequestProto {
	optional int64 basis_batch_id = 1;
	optional int64 batch_id = 2;
	optional int32 page_offset = 3;
	optional bool apply_experiments = 4;
	repeated int32 basis_experiment_id = 5;
	repeated int32 experiment_id = 6;
}

message DownloadGmTemplatesResponseProto {
	enum Result {
		UNSET = 0;
		COMPLETE = 1;
		MORE_RESULTS = 2;
		BATCH_ID_NOT_LIVE = 3;
		INVALID_BASIS_BATCH_ID = 4;
		WRONG_EXPERIMENTS = 5;
	}

	optional Result result = 1;
	repeated ClientGameMasterTemplateProto template = 2;
	repeated string deleted_template = 3;
	optional uint64 batch_id = 4;
	optional int32 page_offset = 5;
	repeated int32 experiment_id = 6;
}

message DownloadSettingsActionProto {
	optional string sha1 = 1;
}

message DownloadSettingsResponseProto {
	optional string error = 1;
	optional string sha1 = 2;
	optional GlobalSettingsProto values = 3;
}

message DownloadUrlEntryProto {
	optional string asset_id = 1;
	optional string url = 2;
	optional int32 size = 3;
	optional fixed32 checksum = 4;
}

message DownloadUrlOutProto {
	repeated DownloadUrlEntryProto download_urls = 1;
}

message DownloadUrlRequestProto {
	repeated string asset_id = 1;
}

message Downstream {
	optional DownstreamActionMessages downstream = 1;
	optional ResponseWithStatus response = 2;
	optional ProbeRequest probe = 3;
	optional Drain drain = 4;
	optional Connected connected = 5;

	message Connected {
		optional string debug_message = 1;
		optional int32 ttl_seconds = 2;
	}

	message Drain {
	}

	message ProbeRequest {
		optional int64 probe_start_ms = 1;
	}

	message ResponseWithStatus {
		optional SubscriptionResponse subscribe = 4;

		enum Status {
			UNSET = 0;
			OK = 1;
			UNKNOWN = 2;
			UNAUTHENTICATED = 3;
			UNAUTHORIZED = 4;
			BAD_REQUEST = 5;
			UNIMPLEMENTED = 6;
			RATE_LIMITED = 7;
			CONNECTION_LIMITED = 8;
		}

		optional int64 request_id = 1;
		optional Status response_status = 2;
		optional string debug_message = 3;
	}

	message SubscriptionResponse {
		enum Status {
			UNSET = 0;
			OK = 1;
			UNKNOWN = 2;
			TOPIC_LIMITED = 3;
		}

		optional Status status = 1;
	}
}

message DownstreamAction {
	optional int32 method = 1;
	optional bytes payload = 2;
}

message DownstreamActionMessages {
	repeated DownstreamAction messages = 1;
}

message DumbBeaconProto {
}

message EchoOutProto {
	optional string context = 1;
}

message EchoProto {
}

message EditPokemonTagOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		TAG_DOES_NOT_EXIST = 3;
		INVALID_TAG_NAME = 4;
		INVALID_TAG_SORT_INDEX = 5;
		TAG_NAME_CONTAINS_PROFANITY = 6;
	}

	repeated Result edit_result = 2;
}

message EditPokemonTagProto {
	repeated PokemonTagProto tag_to_edit = 2;
}

message EggCreateDetail {
	optional int64 hatched_time_ms = 1;
	optional int64 player_hatched_s2_cell_id = 2;
	optional int64 received_time_ms = 3;
}

message EggDistributionProto {
	message EggDistributionEntryProto {
		optional HoloPokemonClass rarity = 1;
		optional HoloPokemonId pokemon_id = 2;
		optional PokemonDisplayProto pokemon_display = 3;
	}

	repeated EggDistributionEntryProto egg_distribution = 1;
}

message EggHatchImprovementsSettings {
	optional bool feature_enabled = 1;
	optional int32 egg_hatch_animation_delay_ms = 2;
	optional int32 egg_hatch_animation_interuption_delay_ms = 3;
}

message EggHatchTelemetry {
	optional int32 num_eggs_hatched = 1;
	optional int32 num_animations_skipped = 2;
}

message EggIncubatorAttributesProto {
	optional EggIncubatorType incubator_type = 1;
	optional int32 uses = 2;
	optional float distance_multiplier = 3;
}

message EggIncubatorProto {
	optional string item_id = 1;
	optional Item item = 2;
	optional EggIncubatorType incubator_type = 3;
	optional int32 uses_remaining = 4;
	optional int64 pokemon_id = 5;
	optional double start_km_walked = 6;
	optional double target_km_walked = 7;
}

message EggIncubatorsProto {
	repeated EggIncubatorProto egg_incubator = 1;
}

message EggTelemetryProto {
	optional string egg_loot_table_id = 1;
	optional EggSlotType original_egg_slot_type = 2;
}

message EggTransparencySettingsProto {
	optional bool enable_egg_distribution = 1;
}

message EnabledPokemonSettingsProto {
	message Range {
		optional int32 start = 1;
		optional int32 end = 2;
	}

	repeated Range enabled_pokemon_range = 3;
}

message EncounterOutProto {
	enum Background {
		PARK = 0;
		DESERT = 1;
	}

	enum Status {
		ENCOUNTER_ERROR = 0;
		ENCOUNTER_SUCCESS = 1;
		ENCOUNTER_NOT_FOUND = 2;
		ENCOUNTER_CLOSED = 3;
		ENCOUNTER_POKEMON_FLED = 4;
		ENCOUNTER_NOT_IN_RANGE = 5;
		ENCOUNTER_ALREADY_HAPPENED = 6;
		POKEMON_INVENTORY_FULL = 7;
	}

	optional WildPokemonProto pokemon = 1;
	optional Background background = 2;
	optional Status status = 3;
	optional CaptureProbabilityProto capture_probability = 4;
	optional Item active_item = 5;
	optional int32 arplus_attempts_until_flee = 6;
}

message EncounterPhotobombOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_ENCOUNTER_AVAILABLE = 2;
		POKEMON_INVENTORY_FULL = 3;
		ERROR_UNKNOWN = 4;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional int32 arplus_attempts_until_flee = 5;
}

message EncounterPhotobombProto {
	optional fixed64 encounter_id = 1;
	optional string encounter_location = 2;
}

message EncounterPokemonTelemetry {
	optional PokemonTelemetry pokemon = 1;
	optional string map_pokemon_type = 2;
	optional bool ar_enabled = 3;
	optional bool ar_plus_enabled = 4;
}

message EncounterProto {
	optional fixed64 encounter_id = 1;
	optional string spawnpoint_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
}

message EncounterSettingsProto {
	optional float spin_bonus_threshold = 1;
	optional float excellent_throw_threshold = 2;
	optional float great_throw_threshold = 3;
	optional float nice_throw_threshold = 4;
	optional int32 milestone_threshold = 5;
	optional bool ar_plus_mode_enabled = 6;
	optional float ar_close_proximity_threshold = 7;
	optional float ar_low_awareness_threshold = 8;
	optional float ar_close_proximity_multiplier = 9;
	optional float ar_awareness_penalty_threshold = 10;
	optional float ar_low_awareness_max_multiplier = 11;
	optional float ar_high_awareness_min_penalty_multiplier = 12;
	optional int32 ar_plus_attempts_until_flee_max = 13;
	optional int32 ar_plus_attempts_until_flee_infinite = 14;
	optional float escaped_bonus_multiplier_max = 15;
	optional float escaped_bonus_multiplier_by_excellent_throw = 16;
	optional float escaped_bonus_multiplier_by_great_throw = 17;
	optional float escaped_bonus_multiplier_by_nice_throw = 18;
	optional float global_stardust_multiplier = 20;
	optional float global_candy_multiplier = 21;
}

message EncounterTutorialCompleteOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_POKEMON = 2;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureScoreProto scores = 3;
}

message EncounterTutorialCompleteProto {
	optional HoloPokemonId pokedex_id = 1;
}

message EnumWrapper {
	enum InvasionCharacter {
		CHARACTER_UNSET = 0;
		CHARACTER_BLANCHE = 1;
		CHARACTER_CANDELA = 2;
		CHARACTER_SPARK = 3;
		CHARACTER_GRUNT_MALE = 4;
		CHARACTER_GRUNT_FEMALE = 5;
		CHARACTER_BUG_GRUNT_FEMALE = 6;
		CHARACTER_BUG_GRUNT_MALE = 7;
		CHARACTER_DARKNESS_GRUNT_FEMALE = 8;
		CHARACTER_DARKNESS_GRUNT_MALE = 9;
		CHARACTER_DARK_GRUNT_FEMALE = 10;
		CHARACTER_DARK_GRUNT_MALE = 11;
		CHARACTER_DRAGON_GRUNT_FEMALE = 12;
		CHARACTER_DRAGON_GRUNT_MALE = 13;
		CHARACTER_FAIRY_GRUNT_FEMALE = 14;
		CHARACTER_FAIRY_GRUNT_MALE = 15;
		CHARACTER_FIGHTING_GRUNT_FEMALE = 16;
		CHARACTER_FIGHTING_GRUNT_MALE = 17;
		CHARACTER_FIRE_GRUNT_FEMALE = 18;
		CHARACTER_FIRE_GRUNT_MALE = 19;
		CHARACTER_FLYING_GRUNT_FEMALE = 20;
		CHARACTER_FLYING_GRUNT_MALE = 21;
		CHARACTER_GRASS_GRUNT_FEMALE = 22;
		CHARACTER_GRASS_GRUNT_MALE = 23;
		CHARACTER_GROUND_GRUNT_FEMALE = 24;
		CHARACTER_GROUND_GRUNT_MALE = 25;
		CHARACTER_ICE_GRUNT_FEMALE = 26;
		CHARACTER_ICE_GRUNT_MALE = 27;
		CHARACTER_METAL_GRUNT_FEMALE = 28;
		CHARACTER_METAL_GRUNT_MALE = 29;
		CHARACTER_NORMAL_GRUNT_FEMALE = 30;
		CHARACTER_NORMAL_GRUNT_MALE = 31;
		CHARACTER_POISON_GRUNT_FEMALE = 32;
		CHARACTER_POISON_GRUNT_MALE = 33;
		CHARACTER_PSYCHIC_GRUNT_FEMALE = 34;
		CHARACTER_PSYCHIC_GRUNT_MALE = 35;
		CHARACTER_ROCK_GRUNT_FEMALE = 36;
		CHARACTER_ROCK_GRUNT_MALE = 37;
		CHARACTER_WATER_GRUNT_FEMALE = 38;
		CHARACTER_WATER_GRUNT_MALE = 39;
		CHARACTER_PLAYER_TEAM_LEADER = 40;
		CHARACTER_EXECUTIVE_CLIFF = 41;
		CHARACTER_EXECUTIVE_ARLO = 42;
		CHARACTER_EXECUTIVE_SIERRA = 43;
		CHARACTER_GIOVANNI = 44;
		CHARACTER_DECOY_GRUNT_MALE = 45;
		CHARACTER_DECOY_GRUNT_FEMALE = 46;
		CHARACTER_GHOST_GRUNT_FEMALE = 47;
		CHARACTER_GHOST_GRUNT_MALE = 48;
		CHARACTER_ELECTRIC_GRUNT_FEMALE = 49;
		CHARACTER_ELECTRIC_GRUNT_MALE = 50;
		CHARACTER_BALLOON_GRUNT_FEMALE = 51;
		CHARACTER_BALLOON_GRUNT_MALE = 52;
		CHARACTER_GRUNTB_FEMALE = 53;
		CHARACTER_GRUNTB_MALE = 54;
		CHARACTER_BUG_BALLOON_GRUNT_FEMALE = 55;
		CHARACTER_BUG_BALLOON_GRUNT_MALE = 56;
		CHARACTER_DARK_BALLOON_GRUNT_FEMALE = 57;
		CHARACTER_DARK_BALLOON_GRUNT_MALE = 58;
		CHARACTER_DRAGON_BALLOON_GRUNT_FEMALE = 59;
		CHARACTER_DRAGON_BALLOON_GRUNT_MALE = 60;
		CHARACTER_FAIRY_BALLOON_GRUNT_FEMALE = 61;
		CHARACTER_FAIRY_BALLOON_GRUNT_MALE = 62;
		CHARACTER_FIGHTING_BALLOON_GRUNT_FEMALE = 63;
		CHARACTER_FIGHTING_BALLOON_GRUNT_MALE = 64;
		CHARACTER_FIRE_BALLOON_GRUNT_FEMALE = 65;
		CHARACTER_FIRE_BALLOON_GRUNT_MALE = 66;
		CHARACTER_FLYING_BALLOON_GRUNT_FEMALE = 67;
		CHARACTER_FLYING_BALLOON_GRUNT_MALE = 68;
		CHARACTER_GRASS_BALLOON_GRUNT_FEMALE = 69;
		CHARACTER_GRASS_BALLOON_GRUNT_MALE = 70;
		CHARACTER_GROUND_BALLOON_GRUNT_FEMALE = 71;
		CHARACTER_GROUND_BALLOON_GRUNT_MALE = 72;
		CHARACTER_ICE_BALLOON_GRUNT_FEMALE = 73;
		CHARACTER_ICE_BALLOON_GRUNT_MALE = 74;
		CHARACTER_METAL_BALLOON_GRUNT_FEMALE = 75;
		CHARACTER_METAL_BALLOON_GRUNT_MALE = 76;
		CHARACTER_NORMAL_BALLOON_GRUNT_FEMALE = 77;
		CHARACTER_NORMAL_BALLOON_GRUNT_MALE = 78;
		CHARACTER_POISON_BALLOON_GRUNT_FEMALE = 79;
		CHARACTER_POISON_BALLOON_GRUNT_MALE = 80;
		CHARACTER_PSYCHIC_BALLOON_GRUNT_FEMALE = 81;
		CHARACTER_PSYCHIC_BALLOON_GRUNT_MALE = 82;
		CHARACTER_ROCK_BALLOON_GRUNT_FEMALE = 83;
		CHARACTER_ROCK_BALLOON_GRUNT_MALE = 84;
		CHARACTER_WATER_BALLOON_GRUNT_FEMALE = 85;
		CHARACTER_WATER_BALLOON_GRUNT_MALE = 86;
		CHARACTER_GHOST_BALLOON_GRUNT_FEMALE = 87;
		CHARACTER_GHOST_BALLOON_GRUNT_MALE = 88;
		CHARACTER_ELECTRIC_BALLOON_GRUNT_FEMALE = 89;
		CHARACTER_ELECTRIC_BALLOON_GRUNT_MALE = 90;
		CHARACTER_EVENT_NPC_0 = 500;
		CHARACTER_EVENT_NPC_1 = 501;
		CHARACTER_EVENT_NPC_2 = 502;
		CHARACTER_EVENT_NPC_3 = 503;
		CHARACTER_EVENT_NPC_4 = 504;
		CHARACTER_EVENT_NPC_5 = 505;
		CHARACTER_EVENT_NPC_6 = 506;
		CHARACTER_EVENT_NPC_7 = 507;
		CHARACTER_EVENT_NPC_8 = 508;
		CHARACTER_EVENT_NPC_9 = 509;
		CHARACTER_EVENT_NPC_10 = 510;
		CHARACTER_EVENT_NPC_BLANCHE = 511;
		CHARACTER_EVENT_NPC_CANDELA = 512;
		CHARACTER_EVENT_NPC_SPARK = 513;
		CHARACTER_EVENT_NPC_11 = 514;
		CHARACTER_EVENT_NPC_12 = 515;
		CHARACTER_EVENT_NPC_13 = 516;
		CHARACTER_EVENT_NPC_14 = 517;
		CHARACTER_EVENT_NPC_15 = 518;
		CHARACTER_EVENT_NPC_16 = 519;
		CHARACTER_EVENT_NPC_17 = 520;
		CHARACTER_EVENT_NPC_18 = 521;
		CHARACTER_EVENT_NPC_19 = 522;
		CHARACTER_EVENT_NPC_20 = 523;
	}

	enum InvasionContext {
		POKESTOP_INCIDENT = 0;
		ROCKET_BALLOON = 1;
		QUEST_REWARD_INCIDENT = 2;
	}

	enum CharacterCategory {
		UNSET = 0;
		TEAM_LEADER = 1;
		GRUNT = 2;
		ARLO = 3;
		CLIFF = 4;
		SIERRA = 5;
		GIOVANNI = 6;
		GRUNTBF = 7;
		GRUNTBM = 8;
		EVENT_NPC = 9;
		PLAYER_TEAM_LEADER = 10;
	}

	enum PokestopStyle {
		POKESTOP_NORMAL = 0;
		POKESTOP_ROCKET_INVASION = 1;
		POKESTOP_ROCKET_VICTORY = 2;
	}

	enum InvasionCharacterExpression {
		EXPRESSION_UNSET = 0;
		PLACEHOLDER_1 = 1;
		PLACEHOLDER_2 = 2;
		PLACEHOLDER_3 = 3;
		PLACEHOLDER_4 = 4;
		GREETING = 5;
		CHALLENGE = 6;
		VICTORY = 7;
		DEFEAT = 8;
	}
}

message EquipBadgeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		COOLDOWN_ACTIVE = 2;
		NOT_QUALIFIED = 3;
	}

	optional Result result = 1;
	optional EquippedBadgeProto equipped = 2;
}

message EquipBadgeProto {
	optional HoloBadgeType badge = 1;
}

message EquippedBadgeProto {
	optional HoloBadgeType equipped_badge = 1;
	optional int32 level = 2;
	optional int64 next_equip_change_allowed_timestamp_ms = 3;
}

message EquippedBadgeSettingsProto {
	optional int64 equip_badge_cooldown_ms = 1;
	repeated float catch_probability_bonus = 2;
	repeated float flee_probability_bonus = 3;
}

message EventBadgeSettingsProto {
	optional int64 valid_from_ms = 1;
	optional int64 valid_to_ms = 2;
	repeated HoloBadgeType mutually_exclusive_badges = 3;
	optional bool automatically_award_badge = 4;
}

message EventBannerSectionProto {
	optional string event_icon = 1;
	optional string title_text = 2;
	optional string body_text = 3;
	optional string image_url = 4;
	optional string header_image_url = 5;
	optional string image_overlay_text = 6;
	optional string link_from_image = 7;
	optional string image_sub_text = 8;
	repeated string image_urls = 9;
	optional int64 image_auto_scroll_ms = 10;
}

message EventInfoProto {
	optional string image_url = 1;
	optional string icon_url = 2;
	optional string name_key = 3;
}

message EventSectionProto {
	message BonusBoxProto {
		enum IconType {
			UNSET = 0;
			ADVENTURE_SYNC = 1;
			BUDDY = 2;
			CANDY_GENERAL = 3;
			EGG = 4;
			EGG_INCUBATOR = 5;
			EVENT_MOVE = 6;
			EVOLUTION = 7;
			FIELD_RESEARCH = 8;
			FRIENDSHIP = 9;
			GIFT = 10;
			INCENSE = 11;
			LUCKY_EGG = 12;
			LURE_MODULE = 13;
			PHOTOBOMB = 14;
			POKESTOP = 15;
			RAID = 16;
			RAID_PASS = 17;
			SPAWN_UNKNOWN = 18;
			STAR_PIECE = 19;
			STARDUST = 20;
			TEAM_ROCKET = 21;
			TRADE = 22;
			TRANSFER_CANDY = 23;
			BATTLE = 24;
			XP = 25;
			SHOP = 26;
			LOCATION = 27;
			EVENT = 28;
			MYSTERY_BOX = 29;
			TRADE_BALL = 30;
		}

		optional string text = 1;
		optional IconType icon_type = 2;
	}

	optional string event_name = 1;
	optional GetLocalTimeOutProto.LocalTimeProto end_time = 3;
	optional string ref_news_id = 4;
	repeated BonusBoxProto bonus_boxes = 5;
}

message EventSettingsProto {
	repeated string condolence_ribbon_country = 1;
	optional bool enable_event_link = 2;
	optional bool enable_event_link_for_children = 3;
	optional string event_webtoken_server_url = 4;
	optional bool enable_event_lnt = 5;
	optional string event_lnt_url = 6;
}

message EventTicketActiveTimeProto {
	optional Item event_ticket = 1;
	optional int64 event_start_ms = 2;
	optional int64 event_end_ms = 3;
}

message EvolePreviewSettings {
	optional bool enable_evolution_preview = 1;
	optional bool enable_mega_evolution_preview = 2;
	optional bool ob_bool = 3;
}

message EvolutionBranchProto {
	optional HoloPokemonId evolution = 1;
	optional Item evolution_item_requirement = 2;
	optional int32 candy_cost = 3;
	optional float km_buddy_distance_requirement = 4;
	optional PokemonDisplayProto.Form form = 5;
	optional PokemonDisplayProto.Gender gender_requirement = 6;
	optional Item lure_item_requirement = 8;
	optional bool must_be_buddy = 9;
	optional bool only_daytime = 10;
	optional bool only_nighttime = 11;
	optional int32 priority = 12;
	optional bool no_candy_cost_via_trade = 13;
	optional HoloTemporaryEvolutionId temporary_evolution = 14;
	optional int32 temporary_evolution_energy_cost = 15;
	optional int32 temporary_evolution_energy_cost_subsequent = 16;
	repeated EvolutionQuestInfoProto quest_display = 17;
	optional bool only_upside_down = 18;
	optional int32 purification_evolution_candy_cost = 19;
}

message EvolutionChainDataProto {
	optional string pokedex_header = 1;
	repeated EvolutionChainEntryProto evolution_chain_entry = 2;
}

message EvolutionChainDisplaySettingsProto {
	optional HoloPokemonId pokemon = 1;
	repeated EvolutionChainDataProto chain = 2;
}

message EvolutionChainEntryProto {
	optional HoloPokemonId pokemon = 1;
	optional HoloTemporaryEvolutionId mega_evolution = 2;
	optional PokemonDisplayProto.Form form = 3;
	optional PokemonDisplayProto.Gender gender = 4;
}

message EvolutionQuestInfoProto {
	optional string quest_requirement_template_id = 1;
	optional string description = 2 [deprecated = true];
	optional int32 target = 3 [deprecated = true];
}

message EvolutionV2SettingsProto {
	optional bool is_enabled = 1;
}

message EvolveIntoPokemonQuestProto {
	repeated HoloPokemonId unique_pokemon_id = 1;
}

message EvolvePokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILED_POKEMON_MISSING = 2;
		FAILED_INSUFFICIENT_RESOURCES = 3;
		FAILED_POKEMON_CANNOT_EVOLVE = 4;
		FAILED_POKEMON_IS_DEPLOYED = 5;
		FAILED_INVALID_ITEM_REQUIREMENT = 6;
	}

	optional Result result = 1;
	optional PokemonProto evolved_pokemon = 2;
	optional int32 exp_awarded = 3;
	optional int32 candy_awarded = 4;
	optional ObMegaEvolvePokemonProtoField ob_mega_evole_pokemon = 5;
}

message EvolvePokemonProto {
	optional fixed64 pokemon_id = 1;
	optional Item evolution_item_requirement = 2;
	optional HoloPokemonId target_pokemon_id = 3;
	optional PokemonDisplayProto.Form target_pokemon_form = 4;
	optional bool use_special = 5;
	optional bool ob_mega_evole_pokemon = 6;
	optional ObEvoleField ob_evole_field = 7;
}

message EvolvePokemonTelemetry {
	optional PokemonTelemetry pokemon = 1;
	optional PokemonTelemetry evolved_pokemon = 2;
}

message ExRaidSettingsProto {
	optional FriendshipLevelMilestone minimum_ex_raid_share_level = 1;
	optional int32 ob_ex_raid_setting = 2;
}

message ExceptionCaugthDataProto {
	enum ExceptionType {
		NO_EXCEPTION = 0;
	}

	optional int32 ob_exception_int32 = 1;
	optional ExceptionType ob_exception = 2;
}

message ExceptionCaugthDataV2Proto {
	enum ExceptionType {
		NO_EXCEPTION = 0;
		COMBAT_PUB_SUB = 1;
	}

	optional int32 ob_int32 = 1;
	optional ExceptionType type = 2;
}

message ExclusiveRaidCancellationProto {
	optional string fort_id = 1;
	optional int64 start_time_ms = 2;
	optional int64 end_time_ms = 3;
	optional string image_url = 4;
	optional double latitude = 5;
	optional double longitude = 6;
	optional string gym_name = 7;
	repeated LootItemProto rewards = 8;
}

message ExclusiveTicketInfoProto {
	optional int64 raid_seed = 1;
	optional string fort_id = 2;
	optional int64 start_time_ms = 4;
	optional int64 end_time_ms = 5;
	optional string image_url = 6;
	optional double latitude = 7;
	optional double longitude = 8;
	optional string gym_name = 9;
	optional int64 spawn_time_ms = 10;
	optional bool is_cancelled = 11;
	optional PokemonProto raid_pokemon = 12;
	optional SharedExclusiveTicketTrainerInfo inviter = 13;
	optional SharedExclusiveTicketTrainerInfo invitee = 14;
}

message ExperienceBoostAttributesProto {
	optional float xp_multiplier = 1;
	optional int32 boost_duration_ms = 2;
}

message ExternalAddressableAssetsSettings {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
}

message FakeDataProto {
	optional PokemonProto fake_pokemon = 1;
}

message FavoritePokemonTelemetry {
	optional PokemonTelemetry pokemon = 1;
	optional bool favored = 2;
}

message FbTokenProto {
	optional string token = 1;
}

message Feature {
	optional BuildingMetadata building_metadata = 3;
	optional RoadMetadata road_metadata = 4;
	optional TransitMetadata transit_metadata = 5;

	optional Geometry geometry = 1;
	optional Label label = 2;
}

message FeedPokemonTelemetry {
	optional int32 status = 1;
	optional PokemonTelemetry pokemon = 2;
	optional string gym_id = 3;
	optional Team team = 4;
	optional int32 defender_count = 5;
	optional int32 motivation = 6;
	optional int32 cp_now = 7;
}

message FestivalSettingsProto {
	enum FestivalType {
		NONE = 0;
		HALLOWEEN = 1;
		HOLIDAY = 2;
		ROCKET = 3;
	}

	optional FestivalType festival_type = 1;
	optional string key = 2;
	optional string vector = 3;
}

message FetchAllNewsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_NEWS_FOUND = 2;
	}

	optional Result result = 1;
	optional CurrentNewsProto current_news = 2;
}

message FetchAllNewsProto {
}

message FetchNewsfeedRequest {
	optional string page_token = 1;
	optional string player_id = 2;
	optional int32 number_of_posts = 3;
	optional string app_id = 4;
	repeated NewsfeedPost.NewsfeedChannel newsfeed_channel = 5;
	optional string language_version = 6;
}

message FetchNewsfeedResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		INTERNAL_ERROR = 2;
		FAILED = 3;
	}

	optional Result result = 1;
	repeated NewsfeedPostRecord post_record = 2;
	optional string next_page_token = 3;
}

message FitnessMetricsProto {
	optional double distance_walked_meters = 1;
	optional int32 step_count = 2;
	optional double calories_burned_kcals = 3;
	optional int64 exercise_duration_mi = 4;
	optional double wheelchair_distance_meters = 5;
	optional double wheelchair_push_count = 6;
}

message FitnessMetricsReportHistory {
	message MetricsHistory {
		optional int64 bucket = 1;
		optional FitnessMetricsProto metrics = 2;
	}

	repeated MetricsHistory weekly_history = 1;
	repeated MetricsHistory daily_history = 2;
	repeated MetricsHistory hourly_history = 3;
}

message FitnessRecordProto {
	optional HourlyRepoRts hourly_reports = 1;
	repeated FitnessSample raw_samples = 2;
	optional int64 last_aggregation_timestamp_ms = 3;
	optional FitnessStatsProto fitness_stats = 4;
	optional FitnessMetricsReportHistory report_history = 5;

	message HourlyRepoRts {
		optional int64 key = 1;
		optional FitnessMetricsProto value = 2;
	}
}

message FitnessReportProto {
	optional int32 day_offset_from_now = 1;
	optional int32 week_offset_from_now = 2;
	optional int32 hour_offset_from_now = 3;

	optional FitnessMetricsProto metrics = 10;
	optional bytes game_data = 11;
}

message FitnessRewardsLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
	optional double distance_walked_km = 3;
}

message FitnessSample {
	enum FitnessSampleType {
		SAMPLE_UNSET = 0;
		STEPS = 1;
		WALKING_DISTANCE_METERS = 2;
		WHEELCHAIR_DISTANCE_METERS = 3;
		CALORIES_KCALS = 4;
		WHEELCHAIR_PUSH_COUNT = 5;
		EXERCISE_TIME_MI = 6;
	}

	enum FitnessSourceType {
		SOURCE_UNSET = 0;
		HEALTHKIT = 1;
		GOOGLE_FIT = 2;
		APPLE_WATCH = 3;
		GPS = 4;
		ANDROID_SENSOR_HUB = 5;
	}

	optional FitnessSampleType sample_type = 1;
	optional int64 sample_start_timestamp_ms = 2;
	optional int64 sample_end_timestamp_ms = 3;
	optional double value = 4;
	optional FitnessSourceType source_type = 5;
	optional FitnessSampleMetadata metadata = 6;
}

message FitnessSampleMetadata {
	optional AndroidDataSource original_data_source = 1;
	optional AndroidDataSource data_source = 2;
	optional IosSourceRevision source_revision = 3;
	optional IosDevice device = 4;
	optional bool user_entered = 5;
}

message FitnessStatsProto {
	optional int64 last_accumulated_timestamp_ms = 1;
	optional FitnessMetricsProto accumulated = 2;
	optional FitnessMetricsProto pending = 3;
	optional double player_initial_walk_km = 4;
	optional double player_total_walk_km = 5;
	optional int64 player_total_steps = 6;
}

message FitnessUpdateOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Status status = 1;
}

message FitnessUpdateProto {
	repeated FitnessSample fitness_samples = 1;
}

message FoodAttributesProto {
	repeated HoloItemEffect item_effect = 1;
	repeated float item_effect_percent = 2;
	optional float growth_percent = 3;
	optional float berry_multiplier = 4;
	optional float remote_berry_multiplier = 5;
	optional int32 num_buddy_affection_points = 6;
	optional int64 map_duration_ms = 7;
	optional int64 active_duration_ms = 8;
	optional int32 num_buddy_hunger_points = 9;
}

message FoodValue {
	optional float motivation_increase = 1;
	optional int32 cp_increase = 2;
	optional Item food_item = 3;
}

message FormChangeProto {
	repeated PokemonDisplayProto.Form available_form = 1;
	optional int32 candy_cost = 2;
	optional int32 stardust_cost = 3;
	optional Item item_cost = 4;
	repeated EvolutionQuestInfoProto quest_requirement = 5;
}

message FormChangeSettingsProto {
	optional bool enabled = 1;
}

message FormProto {
	optional PokemonDisplayProto.Form form = 1;
	optional int32 asset_bundle_value = 2;
	optional string asset_bundle_suffix = 3;
	optional bool is_costume = 4;
}

message FormSettingsProto {
	optional HoloPokemonId pokemon = 1;
	repeated FormProto forms = 2;
}

message FormsRefactorSettings {
	optional bool ob_forms_refactor_settings_bool_1 = 1;
	optional bool ob_forms_refactor_settings_bool_2 = 2;
	optional bool ob_forms_refactor_settings_bool_3 = 3;
	optional bool enable_singular_shadow_form = 4;
}

message FortDeployOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		ERROR_ALREADY_HAS_POKEMON_ON_FORT = 2;
		ERROR_OPPOSING_TEAM_OWNS_FORT = 3;
		ERROR_FORT_IS_FULL = 4;
		ERROR_NOT_IN_RANGE = 5;
		ERROR_PLAYER_HAS_NO_TEAM = 6;
		ERROR_POKEMON_NOT_FULL_HP = 7;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 8;
		ERROR_POKEMON_IS_BUDDY = 9;
		ERROR_FORT_DEPLOY_LOCKOUT = 10;
		ERROR_PLAYER_HAS_NO_NICKNAME = 11;
		ERROR_POI_INACCESSIBLE = 12;
		ERROR_LEGENDARY_POKEMON = 13;
		ERROR_INVALID_POKEMON = 14;
	}

	optional Result result = 1;
	optional FortDetailsOutProto fort_details_out_proto = 2;
	optional PokemonProto egg_pokemon = 3;
	optional GymStateProto gym_state_proto = 4;
}

message FortDeployProto {
	optional string fort_id = 1;
	optional fixed64 pokemon_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
}

message FortDetailsOutProto {
	optional string id = 1;
	optional Team team = 2;
	repeated PokemonProto pokemon = 3;
	optional string name = 4;
	repeated string image_url = 5;
	optional int32 fp = 6;
	optional int32 stamina = 7;
	optional int32 max_stamina = 8;
	optional FortType fort_type = 9;
	optional double latitude = 10;
	optional double longitude = 11;
	optional string description = 12;
	repeated ClientFortModifierProto modifier = 13;
	optional bool close_soon = 14;
	optional string checkin_image_url = 15 [deprecated = true];
	optional EventInfoProto event_info = 16;
	repeated string promo_description = 17;
	optional string call_to_action_link = 18;
	optional SponsoredDetailsProto sponsored_details = 19;
	optional string geostore_tombstone_message_key = 20;
	optional string geostore_suspension_message_key = 21;
	optional int32 poi_images_count = 22;
	optional int32 power_up_progress_points = 23;
	optional int64 power_up_level_expiration_ms = 24;
	optional int64 next_fort_close_ms = 25;
}

message FortDetailsProto {
	optional string id = 1;
	optional double latitude = 2;
	optional double longitude = 3;
}

message FortModifierAttributesProto {
	optional int32 modifier_lifetime_seconds = 1;
	optional int32 troy_disk_num_pokemon_spawned = 2;
}

message FortPokemonProto {
	enum SpawnType {
		LURE = 0;
		POWER_UP = 1;
	}

	optional MapPokemonProto pokemon_proto = 1;
	optional SpawnType spawn_type = 2;
}

message FortPowerUpLevelSettings {
	optional FortPowerUpLevel level = 1;
	optional int32 points_needed_for_level_up = 2;
	repeated FortPowerUpLevelReward power_up_reward = 3;
	optional int32 duration_of_power_up_ms = 4;
}

message FortRecallOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
		ERROR_POKEMON_NOT_ON_FORT = 3;
		ERROR_NO_PLAYER = 4;
	}

	optional Result result = 1;
	optional FortDetailsOutProto fort_details_out_proto = 2;
}

message FortRecallProto {
	optional string fort_id = 1;
	optional fixed64 pokemon_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
}

message FortRenderingType {
	enum RenderingType {
		DEFAULT = 0;
		INTERNAL_TEST = 1;
	}

	optional RenderingType rendering_type = 1;
}

message FortSearchLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string fort_id = 2;
	repeated ItemProto items = 3;
	optional int32 eggs = 4;
	repeated PokemonProto pokemon_eggs = 5;
	optional FortType fort_type = 6;
	repeated ItemProto awarded_items = 7;
	repeated ItemProto bonus_items = 8;
	repeated ItemProto team_bonus_items = 9;
	repeated GiftBoxProto gift_boxes = 10;
	repeated LootItemProto stickers = 11;
	repeated ItemProto powered_up_stop_bonus_items = 12;
}

message FortSearchOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		OUT_OF_RANGE = 2;
		IN_COOLDOWN_PERIOD = 3;
		INVENTORY_FULL = 4;
		EXCEEDED_DAILY_LIMIT = 5;
		POI_INACCESSIBLE = 6;
	}

	optional Result result = 1;
	repeated AwardItemProto items = 2;
	optional int32 gems_awarded = 3;
	optional PokemonProto egg_pokemon = 4;
	optional int32 xp_awarded = 5;
	optional int64 cooldown_complete = 6;
	optional int32 chain_hack_sequence_number = 7;
	optional AwardedGymBadge awarded_gym_badge = 8;
	optional LootProto loot = 9;
	optional LootProto bonus_loot = 10;
	optional int32 raid_tickets = 11;
	optional LootProto team_bonus_loot = 12;
	optional string fort_id = 13;
	optional ClientQuestProto challenge_quest = 14;
	optional GiftBoxProto gift_box = 15;
	optional AdDetails sponsored_gift = 16 [deprecated = true];
	optional LootProto power_up_stop_bonus_loot = 17;
	optional AdProto ad = 18;
}

message FortSearchProto {
	optional string id = 1;
	optional double player_lat_degrees = 2;
	optional double player_lng_degrees = 3;
	optional double fort_lat_degrees = 4;
	optional double fort_lng_degrees = 5;
	optional AdTargetingInfoProto ad_targeting_info = 7;
	optional bool is_player_eligible_for_geotargeted_quest = 8;
}

message FortSettingsProto {
	optional double interaction_range_meters = 1;
	optional int32 max_total_deployed_pokemon = 2;
	optional int32 max_player_deployed_pokemon = 3;
	optional double deploy_stamina_multiplier = 4;
	optional double deploy_attack_multiplier = 5;
	optional double far_interaction_range_meters = 6;
	optional bool disable_gyms = 7;
	optional int32 max_same_pokemon_at_fort = 8;
	optional int32 max_player_total_deployed_pokemon = 9;
	optional bool enable_hyperlinks_in_poi_descriptions = 10;
	optional bool enable_right_to_left_text_display = 11;
	optional bool enable_sponsored_poi_decorators = 12;
	optional double remote_interaction_range_meters = 13;
}

message FortSponsor {
	enum Sponsor {
		UNSET = 0;
		MCDONALDS = 1;
		POKEMON_STORE = 2;
		TOHO = 3;
		SOFTBANK = 4;
		GLOBE = 5;
		SPATULA = 6;
		THERMOMETER = 7;
		KNIFE = 8;
		GRILL = 9;
		SMOKER = 10;
		PAN = 11;
		BBQ = 12;
		FRYER = 13;
		STEAMER = 14;
		HOOD = 15;
		SLOWCOOKER = 16;
		MIXER = 17;
		SCOOPER = 18;
		MUFFINTIN = 19;
		SALAMANDER = 20;
		PLANCHA = 21;
		NIA_OPS = 22;
		WHISK = 23;
	}

	optional Sponsor sponsor = 1;
}

message FortUpdateLatencyTelemetry {
	optional int32 latency_ms = 1;
	optional int32 fort_type = 2;
	optional float distance = 3;
}

message FrameRate {
	optional MetricData sampled_frame_rate = 1;
}

message FriendDetailsProto {
	enum OnlineStatus {
		UNSET = 0;
		STATUS_UNKNOWN = 1;
		STATUS_ONLINE = 2;
		STATUS_OFFLINE = 3;
	}

	optional PlayerSummaryProto player = 1;
	optional bytes friend_visible_data = 2;
	optional int32 score = 3;
	optional bytes data_with_me = 4;
	optional OnlineStatus online_status = 5;
	optional int64 created_ms = 6;
	optional bytes shared_data = 7;
	optional bytes data_from_me = 8;
	optional bytes data_to_me = 9;
}

message FriendProfileSettingsProto {
	optional bool enable_swiping = 1;
}

message FriendshipDataProto {
	optional FriendshipLevelDataProto friendship_level_data = 1;
	repeated GiftBoxDetailsProto giftbox_details = 2;
	optional string codename = 3;
	optional string nickname = 4;
	optional int64 open_trade_expire_ms = 5;
	optional bool is_lucky = 6;
	optional int32 lucky_count = 7;
}

message FriendshipLevelDataProto {
	optional int64 bucket = 1;
	optional int32 points_earned_today = 2;
	optional FriendshipLevelMilestone awarded_friendship_milestone = 3;
	optional FriendshipLevelMilestone current_friendship_milestone = 4;
	optional double next_friendship_milestone_progress_percentage = 5;
	optional int32 points_toward_next_milestone = 6;
}

message FriendshipLevelMilestoneSettingsProto {
	enum PokemonTradingType {
		UNSET = 0;
		REGULAR_IN_POKEDEX = 1;
		SPECIAL_IN_POKEDEX = 2;
		REGULAR_NON_POKEDEX = 3;
		REGIONAL_NON_POKEDEX = 4;
		FORM_NON_POKEDEX = 5;
		LEGENDARY_NON_POKEDEX = 6;
		SHINY_NON_POKEDEX = 7;
	}

	optional int32 min_points_to_reach = 1;
	optional int32 milestone_xp_reward = 2;
	optional float attack_bonus_percentage = 3;
	optional int32 raid_ball_bonus = 4;
	repeated PokemonTradingType unlocked_trading = 5;
	optional float trading_discount = 6;
}

message FriendshipMilestoneRewardNotificationProto {
	optional string friend_id = 1;
	optional string friend_codename = 2;
	optional int32 friendship_milestone_level = 3;
	optional int64 xp_reward = 4;
}

message FriendshipMilestoneRewardProto {
	optional string friend_id = 1;
	optional FriendshipLevelMilestone friendship_milestone = 2;
}

message GM10SettingsProto {
	optional bool ob_bool = 1;
	optional int32 ob_int32 = 2;
}

message GM11SettingsProto {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
	optional int32 ob_int32_3 = 3;
	optional int32 ob_int32_4 = 4;
	optional float ob_float = 5;
}

message GM14SettingsProto {
	optional float ob_float = 1;
}

message GM15SettingsProto {
	optional bool ob_bool_1 = 1;
	optional bool ob_bool_2 = 2;
}

message GM16SettingsProto {
	optional bool ob_bool = 1;
	optional int32 ob_int32 = 2;
	optional LootProto ob_loot = 3;
	optional string ob_string = 4;
}

message GM1SettingsProto {
	enum Activity {
		UNSET = 0;
		FORT_POWER_UP_ACTIVITY_AR_SCAN = 1;
	}

	optional Activity activity = 1;
	optional int32 ob_int32_1 = 2;
	optional int32 ob_int32_2 = 3;
}

message GM2SettingsProto {
	optional int32 ob_int32 = 1;
}

message GM3SettingsProto {
	repeated string ob_string = 1;
}

message GM4SettingsProto {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
}

message GM5SettingsProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_int32_1 = 2;
	repeated int32 ob_int32_2 = 3;
	repeated int32 ob_int32_3 = 4;
	repeated int32 ob_int32_4 = 5;
	optional bool ob_bool = 6;
}

message GM6SettingsProto {
	optional bool ob_bool = 1;
	repeated string ob_string = 2;
}

message GM7SettingsProto {
	optional string ob_string_1 = 1;
	optional string ob_string_2 = 2;
	optional int32 ob_int32 = 3;
	optional int32 ob_int32_1 = 4;
	optional bool ob_bool = 5;
}

message GM8SettingsProto {
	optional bool ob_bool = 1;
}

message GM9SettingsProto {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
}

message GamDetails {
	repeated string gam_request_keywords = 1;
	optional GamRequestExtras gam_request_extras = 2;

	message GamRequestExtras {
		optional string key = 1;
		optional string value = 2;
	}
}

message GameClientPhotoGalleryPoiImageProto {
	optional string image_id = 1;
	optional string poi_id = 2;
	optional string submitter_codename = 3;
	optional string image_url = 4;
	optional int64 creation_timestamp_ms = 5;
	optional bool has_player_voted = 6;
	optional int32 num_votes_from_game = 7;
}

message GameClientTelemetryOmniProto {
	optional PoiSubmissionTelemetry poi_submission_telemetry = 1;
	optional PoiSubmissionPhotoUploadErrorTelemetry poi_submission_photo_upload_error_telemetry = 2;
	optional PoiPlayerMetadataTelemetry player_metadata_telemetry = 3;

	optional ServerData server_data = 1001;
}

message GameItemContentProto {
	optional string type = 1;
	optional int32 quantity = 2;
}

message GameMasterClientTemplateProto {
	optional string template_id = 1;
	optional PokemonSettingsProto pokemon_settings = 2;
	optional ItemSettingsProto item_settings = 3;
	optional MoveSettingsProto move_settings = 4;
	optional MoveSequenceSettingsProto move_sequence_settings = 5;
	optional TypeEffectiveSettingsProto type_effective = 8;
	optional BadgeSettingsProto badge_settings = 10;
	optional CameraSettingsProto camera = 11;
	optional PlayerLevelSettingsProto player_level = 12;
	optional GymLevelSettingsProto gym_level = 13;
	optional GymBattleSettingsProto battle_settings = 14;
	optional EncounterSettingsProto encounter_settings = 15;
	optional IapItemDisplayProto iap_item_display = 16;
	optional IapSettingsProto iap_settings = 17;
	optional PokemonUpgradeSettingsProto pokemon_upgrades = 18;
	optional EquippedBadgeSettingsProto equipped_badges = 19;
	optional QuestSettingsProto quest_settings = 20;
	optional AvatarCustomizationProto avatar_customization = 21;
	optional FormSettingsProto form_settings = 22;
	optional ClientGenderSettingsProto gender_settings = 23;
	optional GymBadgeGmtSettingsProto gym_badge_settings = 24;
	optional WeatherAffinityProto weather_affinities = 25;
	optional WeatherBonusProto weather_bonus_settings = 26;
	optional PokemonScaleSettingProto pokemon_scale_settings = 27;
	optional IapItemCategoryDisplayProto iap_category_display = 28;
	optional BelugaPokemonWhitelist beluga_pokemon_whitelist = 29;
	optional OnboardingSettingsProto onboarding_settings = 30;
	optional FriendshipLevelMilestoneSettingsProto friendship_milestone_settings = 31;
	optional LuckyPokemonSettingsProto lucky_pokemon_settings = 32;
	optional CombatSettingsProto combat_settings = 33;
	optional CombatLeagueSettingsProto combat_league_settings = 34;
	optional CombatLeagueProto combat_league = 35;
	optional ExRaidSettingsProto ex_raid_settings = 36;
	optional CombatMoveSettingsProto combat_move = 37;
	optional BackgroundModeSettingsProto background_mode_settings = 38;
	optional CombatStatStageSettingsProto combat_stat_stage_settings = 39;
	optional CombatNpcTrainerProto combat_npc_trainer = 40;
	optional CombatNpcPersonalityProto combat_npc_personality = 41;
	optional OnboardingV2SettingsProto onboarding_v2_settings = 42;
	optional PartyRecommendationSettingsProto party_recommendation_settings = 43;
	optional SmeargleMovesSettingsProto smeargle_moves_settings = 44;
	optional PokecoinPurchaseDisplayGmtProto pokecoin_purchase_display_gmt = 45;
	optional AdventureSyncV2GmtProto adventure_sync_v2_gmt = 46;
	optional LoadingScreenProto loading_screen_settings = 47;
	optional InvasionNpcDisplaySettingsProto invasion_npc_display_settings = 48;
	optional CombatCompetitiveSeasonSettingsProto combat_competitive_season_settings = 49;
	optional CombatRankingSettingsProto combat_ranking_proto_settings = 50;
	optional CombatTypeProto combat_type = 51;
	optional BuddyLevelSettings buddy_level_settings = 52;
	optional BuddyActivityCategorySettings buddy_activity_category_settings = 53;
	optional BuddyActivitySettings buddy_activity_settings = 54;
	optional BuddySwapSettings buddy_swap_settings = 56;
	optional RoutesCreationSettingsProto route_creation_settings = 57;
	optional VsSeekerClientSettingsProto vs_seeker_client_settings = 58;
	optional BuddyEncounterCameoSettings buddy_encounter_cameo_settings = 59;
	optional LimitedPurchaseSkuSettingsProto limited_purchase_sku_settings = 60;
	optional BuddyEmotionLevelSettings buddy_emotion_level_settings = 61;
	optional InvasionAvailabilitySettingsProto pokestop_invasion_availability_settings = 62;
	optional BuddyInteractionSettings buddy_interaction_settings = 63;
	optional VsSeekerLootProto vs_seeker_loot = 64;
	optional VsSeekerPokemonRewardsProto vs_seeker_pokemon_rewards = 65;
	optional BattleHubOrderSettings battle_hub_order_settings = 66;
	optional BattleHubBadgeSettings battle_hub_badge_settings = 67;
	optional MapBuddySettingsProto map_buddy_settings = 68;
	optional BuddyWalkSettings buddy_walk_settings = 69;
	optional PlatypusRolloutSettingsProto platypus_rollout_settings = 70;
	optional BuddyHungerSettings buddy_hunger_settings = 72;
	optional ProjectVacationProto project_vacation = 73;
	optional MegaEvoSettingsProto mega_evo_settings = 74;
	optional TemporaryEvolutionSettingsProto temporary_evolution_settings = 75;
	optional AvatarGroupOrderSettingsProto avatar_group_order_settings = 76;
	optional PokemonFamilySettingsProto pokemon_family = 77;
	optional MonodepthSettingsProto monodepth_settings = 78;
	optional LevelUpRewardsSettingsProto level_up_reward_settings = 79;
	optional RaidClientSettingsProto raid_settings = 81;
	optional TappableSettingsProto tappable_settings = 82;
	optional RoutePlaySettingsProto route_play_settings = 83;
	optional SponsoredGeofenceGiftSettingsProto sponsored_geofence_gift_settings = 84;
	optional StickerMetadataProto sticker_metadata = 85;
	optional CrossGameSocialSettingsProto cross_game_social_settings = 86;
	optional MapDisplaySettingsProto map_display_settings = 87;
	optional PokemonHomeEnergyCostsProto pokemon_home_energy_costs = 88;
	optional PokemonHomeSettingsProto pokemon_home_settings = 89;
	optional ArTelemetrySettingsProto ar_telemetry_settings = 90;
	optional BattlePartySettingsProto battle_party_settings = 91;
	optional QuestEvolutionSettingsProto quest_evolution_settings = 93;
	optional PokemonHomeFormReversionProto pokemon_home_form_reversions = 94;
	optional DeepLinkingSettingsProto deep_linking_settings = 95;
	optional GuiSearchSettingsProto gui_search_settings = 96;
	optional ClientEvolutionQuestTemplateProto evolution_quest_template = 97;
	optional AdFeedbackSettingsProto ad_feedback_settings = 98;
	optional FriendProfileSettingsProto friend_profile_settings = 99;
	optional GeotargetedQuestSettingsProto geotargeted_quest_settings = 100;
	optional PokemonTagSettingsProto pokemon_tag_settings = 101;
	optional RecommendedSearchProto recommended_search_settings = 102;
	optional InventorySettingsProto inventory_settings = 103;
	optional RouteDiscoverySettingsProto route_discovery_settings = 104;
	optional EggTransparencySettingsProto egg_transparency_settings = 105;
	optional FortPowerUpLevelSettings fort_power_up_level_settings = 106;
	optional PowerUpPokestopSharedSettings power_up_pokestop_shared_settings = 107;
	optional IncidentPrioritySettingsProto incident_priority_settings = 108;
	optional ReferralSettingsProto referral_settings = 109;
	optional GM1SettingsProto ob_gm_1_settings = 110;
	optional GM2SettingsProto ob_gm_2_settings = 111;
	optional AppraisalStarThresholdSettings appraisal_star_threshold_settings = 112;
	optional PokedexCategoriesSettings pokedex_categories_settings = 114;
	optional BattleVisualSettings battle_visual_settings = 115;
	optional AddressablePokemonSettings addressable_pokemon_settings = 116;
	optional VerboseLogRaidSettings verbose_log_raid_settings = 117;
	optional FormsRefactorSettings forms_refactor_settings = 118;
	optional SharedMoveSettings shared_move_settings = 119;
	optional AddressBookImportSettingsProto address_book_import_settings = 120;
	optional MusicSettings music_settings = 121;
	optional NewsFeedClientSettings news_feed_client_settings = 122;
	optional MapObjectsInteractionRangeSettings map_objects_interaction_range_settings = 123;
	optional ExternalAddressableAssetsSettings external_addressable_assets_settings = 124;
	optional EvolePreviewSettings evolve_preview_settings = 125;
	optional GM3SettingsProto ob_gm_3_settings = 126;
	optional PushGatewaySettings push_gateway_settings = 127;
	optional UsernameSuggestionSettings username_suggestion_settings = 128;
	optional TutorialsSettings tutorials_settings = 129;
	optional EggHatchImprovementsSettings egg_hatch_improvements_settings = 130;
	optional GM4SettingsProto ob_gm_4_settings = 131;
	optional SurveySettings survey_settings = 132;
	optional IncidentVisibilitySettingsProto incident_visibility_settings = 133;
	optional PostcardCollectionSettings postcard_collection_settings = 134;
	optional GM6SettingsProto ob_gm_6_settings = 135;
	optional VerboseLogCombatSettingsProto verbose_log_combat_settings = 136;
	optional MegaLevelSettingsProto mega_level_settings = 137;
	optional GM5SettingsProto ob_gm_5_settings = 138;
	optional GM9SettingsProto ob_gm_9_settings = 139;
	optional ImpressionTrackingSettingsProto impression_tracking_setting = 140;
	optional GM11SettingsProto ob_gm_11_settings = 141;
	optional EvolutionChainDisplaySettingsProto evolution_chain_display_settings = 142;
	optional GM7SettingsProto ob_gm_7_settings = 143;
	optional PopupControlSettingsProto popup_control_settings = 145;
	optional TicketGiftingSettingsProto ticket_gifting_settings = 146;
	optional GM8SettingsProto ob_gm_8_settings = 147;
	optional GM10SettingsProto ob_gm_10_settings = 148;
	optional GM15SettingsProto ob_gm_15_settings = 149;
	optional GM14SettingsProto ob_gm_14_settings = 150;
	optional GM16SettingsProto ob_gm_16_settings = 151;
}

message GameMasterLocalProto {
	repeated GameMasterClientTemplateProto templates = 1;
}

message GameplayWeatherProto {
	enum WeatherCondition {
		NONE = 0;
		CLEAR = 1;
		RAINY = 2;
		PARTLY_CLOUDY = 3;
		OVERCAST = 4;
		WINDY = 5;
		SNOW = 6;
		FOG = 7;
	}

	optional WeatherCondition gameplay_condition = 1;
}

message GarProxyRequestProto {
	optional uint32 action = 1;
	optional bytes payload = 2;
}

message GarProxyResponseProto {
	enum Status {
		OK = 0;
		ERROR_UNKNOWN = 2;
		ERROR_PERMISSION_DENIED = 7;
		ERROR_UNAVAILABLE = 14;
		ERROR_UNAUTHENTICATED = 16;
	}

	optional Status status = 1;
	optional string error_message = 2;
	optional bytes payload = 3;
}

message GcmToken {
	optional string registration_id = 1;
}

message GenerateCombatChallengeIdDataProto {
	optional int32 ob_int32 = 1;
}

message GenerateCombatChallengeIdOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 2;
		ERROR_ACCESS_DENIED = 3;
	}

	optional Result result = 1;
	optional string challenge_id = 2;
}

message GenerateCombatChallengeIdProto {
	optional string ob_string = 1;
}

message GenerateCombatChallengeIdResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional GenerateCombatChallengeIdOutProto.Result result = 3;
}

message GenerateGmapSignedUrlOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_NOT_VALID = 2;
		ERROR_RATE_LIMITED = 3;
		ERROR_MISSING_INPUT = 4;
		ERROR_UNKNOWN = 5;
	}

	optional Result result = 1;
	optional string signed_url = 2;
}

message GenerateGmapSignedUrlProto {
	optional double latitude = 1;
	optional double longitude = 2;
	optional int32 width = 3;
	optional int32 height = 4;
	optional int32 zoom = 5;
	optional string language_code = 6;
	optional string country_code = 7;
	optional string map_style = 8;
	optional string map_type = 9;
	optional string icon_params = 10;
}

message GenericClickTelemetry {
	optional GenericClickTelemetryIds generic_click_id = 1;
}

message GeodataServiceGameClientPoiProto {
	optional string poi_id = 1;
	optional string title = 2;
	optional string description = 3;
	optional LocationE6Proto location = 4;
	optional string image_url = 5;
	optional bool is_in_game = 6;
}

message GeofenceMetadata {
	optional double latitude_deg = 1;
	optional double longitude_deg = 2;
	optional double radius = 3;
	optional string identifier = 4;
	optional int64 expiration_ms = 5;
	optional int64 dwell_time_ms = 6;
	optional bool fire_on_entrance = 7;
	optional bool fire_on_exit = 8;
}

message GeofenceUpdateOutProto {
	repeated GeofenceMetadata geofence = 1;
}

message GeofenceUpdateProto {
	optional int32 number_of_points = 1;
	optional double minimum_point_radius_m = 2;
}

message Geometry {
	optional PointList points = 1;
	optional PolylineList polylines = 2;
	optional TriangleList triangles = 3;
}

message GeotargetedQuestProto {
	optional string name = 1;
	optional string call_to_action_link = 2;
	optional string image_url = 3;
	optional double latitude = 4;
	optional double longitude = 5;
	optional string fort_id = 6;
}

message GeotargetedQuestSettingsProto {
	optional bool enable_geotargeted_quests = 1;
}

message GeotargetedQuestValidation {
	optional string fort_id = 1;
}

message GetARMappingSettingsOutProto {
	optional bool is_client_scan_validation_enabled = 1;
	repeated string client_scan_validation_blocked_os = 2;
	repeated string client_scan_validation_blocked_device_id = 3;
}

message GetARMappingSettingsProto {
}

message GetAccountSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
	optional AccountSettingsProto settings = 2;
}

message GetAccountSettingsProto {
}

message GetActionLogRequest {
}

message GetActionLogResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	repeated ActionLogEntry log = 2;
}

message GetActiveSubscriptionsRequestProto {
}

message GetActiveSubscriptionsResponseProto {
	repeated InAppPurchaseSubscriptionInfo subscription = 1;
}

message GetAdventureSyncFitnessReportRequestProto {
	option deprecated = true;
	optional int32 num_of_days = 1;
	optional int32 num_of_weeks = 2;
}

message GetAdventureSyncFitnessReportResponseProto {
	option deprecated = true;
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_NOT_FOUND = 2;
		ERROR_RECORDS_NOT_FOUND = 3;
		ERROR_INVALID_WINDOW = 4;
		ERROR_UNKNOWN = 5;
	}

	optional Status status = 1;
	repeated FitnessReportProto daily_reports = 2;
	repeated FitnessReportProto weekly_reports = 3;
	optional int64 week_reset_timestamp_since_monday_ms = 4;
}

message GetAdventureSyncProgressOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		DISABLED = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Status status = 1;
	optional AdventureSyncProgress progress = 2;
}

message GetAdventureSyncProgressProto {
	optional bytes request = 1;
}

message GetAdventureSyncSettingsRequestProto {
}

message GetAdventureSyncSettingsResponseProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
	}

	optional Status status = 1;
	optional AdventureSyncSettingsProto adventure_sync_settings = 2;
}

message GetAvailableSkusAndBalancesOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	repeated AvailableSkuProto available_sku = 2;
	repeated CurrencyQuantityProto balance = 3;
	optional string player_token = 4;
}

message GetAvailableSkusAndBalancesProto {
}

message GetAvailableSubmissionsOutProto {
	optional int32 submissions_left = 1;
	optional int32 min_player_level = 2;
	optional bool has_valid_email = 3;
	optional bool is_feature_enabled = 4;
	optional int64 time_window_for_submissions_limit_ms = 5;
	optional int32 max_poi_distance_in_meters = 6;
	repeated AvailableSubmissionsPerSubmissionType availability_result_per_type = 7;
	optional int32 max_poi_location_edit_move_distance_meters = 8;
	optional bool is_upload_later_enabled = 9;
	optional string category_cloud_storage_directory_path = 10;
	optional bool has_wayfarer_account = 11;
	optional bool passed_wayfarer_quiz = 12;
	optional bool is_poi_submission_category_enabled = 13;
}

message GetAvailableSubmissionsProto {
	repeated PlayerSubmissionTypeProto submission_types = 1;
}

message GetBackgroundModeSettingsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Status status = 1;
	optional BackgroundModeClientSettingsProto settings = 2;
}

message GetBackgroundModeSettingsProto {
}

message GetBuddyHistoryOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Result result = 1;
	repeated BuddyHistoryData buddy_history = 2;
}

message GetBuddyHistoryProto {
}

message GetBuddyWalkedOutProto {
	optional bool success = 1;
	optional HoloPokemonFamilyId family_candy_id = 2;
	optional int32 candy_earned_count = 3;
	optional double km_remaining = 4;
	optional double last_km_awarded = 5;
	optional int32 mega_energy_earned_count = 6;
	optional HoloPokemonId mega_pokemon_id = 7;
	optional int32 xl_candy = 8;
}

message GetBuddyWalkedProto {
}

message GetClientFeatureFlagsRequest {
	optional string country_code = 1;
}

message GetClientFeatureFlagsResponse {
	optional SocialClientFeatures feature_flags = 1;
	optional SocialClientGlobalSettings global_settings = 2;
}

message GetClientSettingsRequest {
	optional string country_code = 1;
}

message GetClientSettingsResponse {
	message PhoneNumberSettings {
		repeated PhoneNumberCountryProto country = 1;
	}

	optional PhoneNumberSettings phone_number_settings = 1;
}

message GetCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
}

message GetCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_CHALLENGE_NOT_FOUND = 2;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
}

message GetCombatChallengeProto {
	optional string challenge_id = 1;
}

message GetCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional GetCombatChallengeOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message GetCombatPlayerProfileDataProto {
	optional int32 ob_int32 = 1;
}

message GetCombatPlayerProfileOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_NOT_FOUND = 2;
		ERROR_ACCESS_DENIED = 3;
	}

	optional Result result = 1;
	optional CombatPlayerProfileProto profile = 2;
}

message GetCombatPlayerProfileProto {
	optional string player_id = 1;
}

message GetCombatPlayerProfileResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional GetCombatPlayerProfileOutProto.Result result = 3;
}

message GetCombatResultsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_COMBAT_STATE = 2;
		ERROR_COMBAT_NOT_FOUND = 3;
		ERROR_PLAYER_QUIT = 4;
	}

	message CombatRematchProto {
		optional string combat_rematch_id = 1;
		optional string combat_league_template_id = 2;
	}

	optional Result result = 1;
	optional CombatRewardStatus reward_status = 2;
	optional LootProto rewards = 3;
	optional LeveledUpFriendsProto friend_level_up = 4;
	optional int32 number_rewarded_battles_today = 5;
	optional CombatPlayerFinishState combat_player_finish_state = 6;
	optional CombatRematchProto combat_rematch = 7;
}

message GetCombatResultsProto {
	optional string combat_id = 1;
}

message GetContactListInfoRequest {
}

message GetContactListInfoResponse {
	optional bool has_new_account_matching = 1;
}

message GetDailyEncounterOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ALREADY_FINISHED_FOR_TODAY = 2;
		MISSED_FOR_TODAY = 3;
		NO_POKEMON_AVAILABLE = 4;
		DISABLED = 5;
	}

	optional Result result = 1;
	optional HoloPokemonId pokedex_id = 2;
	optional double lat = 3;
	optional double lng = 4;
	optional string encounter_location = 5;
	optional fixed64 encounter_id = 6;
	optional int64 disappear_time_ms = 7;
	optional PokemonDisplayProto pokemon_display = 8;
}

message GetDailyEncounterProto {
}

message GetFacebookFriendListOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FACEBOOK_API = 3;
		ERROR_FACEBOOK_PERMISSIONS = 4;
		ERROR_NO_FACEBOOK_ID = 5;
		ERROR_PLAYER_NOT_FOUND = 6;
	}

	message FacebookFriendProto {
		optional PlayerSummaryProto player = 1;
		optional string full_name = 2;
	}

	optional Result result = 1;
	repeated FacebookFriendProto friend = 2;
	optional string next_cursor = 3;
}

message GetFacebookFriendListProto {
	optional string fb_access_token = 1;
	optional int32 limit = 2;
	optional string cursor = 3;
}

message GetFitnessReportOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_NOT_FOUND = 2;
		ERROR_RECORDS_NOT_FOUND = 3;
		ERROR_INVALID_WINDOW = 4;
		ERROR_UNKNOWN = 5;
	}

	optional Status status = 1;
	repeated FitnessReportProto daily_reports = 2;
	repeated FitnessReportProto weekly_reports = 3;
	optional int64 week_reset_timestamp_since_monday_ms = 4;
	repeated FitnessReportProto hourly_reports = 5;
}

message GetFitnessReportProto {
	optional int32 num_of_days = 1;
	optional int32 num_of_weeks = 2;
	optional int32 num_of_hours = 3;
}

message GetFitnessRewardsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		REWARDS_ALREADY_COLLECTED = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
}

message GetFitnessRewardsProto {
}

message GetFriendCodeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Result result = 1;
	optional string friend_code = 2;
}

message GetFriendCodeProto {
	optional bool force_generate_code = 1;
}

message GetFriendDetailsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		EXCEEDS_MAX_PLAYERS_PER_QUERY = 3;
	}

	message DebugProto {
		message Callee {
			optional string player_id = 1;
			optional string nia_account_id = 2;
		}

		optional int32 fetched_from_db = 1;
		optional int32 fetched_from_fanout = 2;
		optional int32 fetched_from_player_mapper = 3;
		optional int32 fetched_from_status_cache = 4;
		optional int32 failed_to_fetch = 5;
		optional int32 fetched_from_same_server_as_player = 6;
	}

	optional Result result = 1;
	repeated FriendDetailsProto friend = 2;
	optional DebugProto friend_details_debug_info = 3;
}

message GetFriendDetailsProto {
	repeated string player_id = 1;
	repeated string nia_account_id = 2;
	optional bool include_online_status = 3;
}

message GetFriendDetailsRequest {
	repeated string friend_id = 1;
	optional SocialClientFeatures.CrossGameSocialClientSettingsProto.FeatureType feature = 2;
	repeated string friend_nia_account_id = 3;
}

message GetFriendDetailsResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_EXCEEDS_MAX_FRIENDS_PER_QUERY = 3;
		ERROR_FEATURE_DISABLED = 4;
	}

	message FriendDetailsEntryProto {
		message OutgoingGameInviteStatus {
			optional string app_key = 1;
			optional SocialV2Enum.InvitationStatus invitation_status = 2;
		}

		optional string player_id = 1;
		optional ProfileDetailsProto profile = 2;
		optional PlayerStatusDetailsProto player_status = 3;
		optional FriendDetailsProto calling_game_data = 4;
		repeated OutgoingGameInviteStatus outgoing_game_invite_status = 5;
		repeated string dismissed_outgoing_game_invite_app_keys = 6;
		optional string nia_account_id = 7;
	}

	message PlayerStatusDetailsProto {
		enum Result {
			UNSET = 0;
			SUCCESS = 1;
			ERROR_UNKNOWN = 2;
			ERROR_STATUS_UNKNOWN = 3;
			ERROR_STALE_DATA = 4;
		}

		optional Result result = 1;
		optional SocialV2Enum.OnlineStatus online_status = 2;
		optional string last_played_app_key = 3;
	}

	optional Result result = 1;
	repeated FriendDetailsEntryProto friend_details = 2;
}

message GetFriendsListOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	message FriendProto {
		enum OnlineStatus {
			UNSET = 0;
			STATUS_UNKNOWN = 1;
			STATUS_ONLINE = 2;
			STATUS_OFFLINE = 3;
		}

		optional string player_id = 1;
		optional string codename = 2;
		optional string team = 3;
		optional int32 score = 4;
		optional bytes data_with_me = 5;
		optional int64 version = 6;
		optional int64 created_ms = 7;
		optional string fb_user_id = 8;
		optional bool is_facebook_friendship = 9;
		optional SharedFriendshipProto shared_data = 10;
		optional OnlineStatus online_status = 11;
		optional string nia_account_id = 12;
	}

	message SharedFriendshipProto {
		optional bytes shared_data = 1;
		optional int64 version = 2;
		optional bytes data_from_me = 3;
		optional bytes data_to_me = 4;
	}

	optional Result result = 1;
	repeated FriendProto friend = 2;
}

message GetFriendsListProto {
}

message GetFriendshipRewardsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_NOT_FRIENDS = 3;
		ERROR_MILESTONE_ALREADY_AWARDED = 4;
		ERROR_FAILED_TO_UPDATE = 5;
	}

	optional Result result = 1;
	optional int64 xp_reward = 2;
	optional string friend_id = 3;
}

message GetFriendshipRewardsProto {
	optional string friend_id = 1;
}

message GetGameMasterClientTemplatesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		PAGE = 2;
		RETRY = 3;
	}

	optional Result result = 1;
	repeated GameMasterClientTemplateProto items = 2;
	optional uint64 timestamp = 3;
	optional int32 page_offset = 4;
}

message GetGameMasterClientTemplatesProto {
	optional bool paginate = 1;
	optional int32 page_offset = 2;
	optional uint64 page_timestamp = 3;
}

message GetGeofencedAdOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS_AD_RECEIVED = 1;
		SUCCESS_NO_ADS_AVAILABLE = 2;
		ERROR_REQUEST_FAILED = 3;
		SUCCESS_GAM_ELIGIBLE = 4;
	}

	optional Result result = 1;
	optional AdDetails sponsored_gift = 2 [deprecated = true];
	optional AdProto ad = 3;
}

message GetGeofencedAdProto {
	optional double player_lat_degrees = 1;
	optional double player_lng_degrees = 2;
	optional AdTargetingInfoProto ad_targeting_info = 3;
	repeated AdType allowed_ad_type = 4;
}

message GetGiftBoxDetailsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_GIFT_DOES_NOT_EXIST = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_FRIEND_NOT_FOUND = 5;
		ERROR_FORT_SEARCH = 6;
	}

	optional Result result = 1;
	repeated GiftBoxDetailsProto gift_boxes = 2;
}

message GetGiftBoxDetailsProto {
	repeated uint64 giftbox_id = 1;
	optional string player_id = 2;
}

message GetGmapSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_MISSING_CONFIG = 3;
		ERROR_NO_UNIQUE_ID = 4;
	}

	optional Result result = 1;
	optional string gmap_template_url = 2;
	optional int32 max_poi_distance_in_meters = 3;
	optional int32 min_zoom = 4;
	optional int32 max_zoom = 5;
}

message GetGmapSettingsProto {
}

message GetGrapeshotUploadUrlOutProto {
	enum Status {
		UNSET = 0;
		FAILURE = 1;
		SUCCESS = 2;
		MISSING_FILE_CONTEXTS = 3;
		DUPLICATE_FILE_CONTEXT = 4;
		MISSING_SUBMISSION_TYPE = 5;
		MISSING_SUBMISSION_ID = 6;
	}

	optional Status status = 1;
	optional FileContextToGrapeshotData file_context_to_grapeshot_data = 2;

	message FileContextToGrapeshotData {
		optional string key = 1;
		optional GrapeshotUploadingDataProto value = 2;
	}
}

message GetGrapeshotUploadUrlProto {
	optional string submission_id = 1;
	repeated string file_upload_context = 2;
}

message GetGymBadgeDetailsOutProto {
	optional AwardedGymBadge gym_badge = 1;
	optional GymDefenderProto gym_defender = 2;
	optional bool success = 3;
}

message GetGymBadgeDetailsProto {
	optional string fort_id = 1;
	optional double latitude = 2;
	optional double longitude = 3;
}

message GetGymDetailsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
	}

	optional GymStateProto gym_state = 1;
	optional string name = 2;
	repeated string url = 3;
	optional Result result = 4;
	optional string description = 5;
	repeated string secondary_url = 6;
	optional string checkin_image_url = 7 [deprecated = true];
	optional EventInfoProto event_info = 8;
}

message GetGymDetailsProto {
	optional string gym_id = 1;
	optional double player_lat_degrees = 2;
	optional double player_lng_degrees = 3;
	optional double gym_lat_degrees = 4;
	optional double gym_lng_degrees = 5;
	optional string client_version = 6;
}

message GetHatchedEggsOutProto {
	optional bool success = 1;
	repeated fixed64 pokemon_id = 2;
	repeated int32 exp_awarded = 3;
	repeated int32 candy_awarded = 4;
	repeated int32 stardust_awarded = 5;
	repeated float egg_km_walked = 6;
	repeated PokemonProto hatched_pokemon = 7;
	repeated int32 xl_candy_awarded = 8;
}

message GetHatchedEggsProto {
}

message GetHoloholoInventoryOutProto {
	optional bool success = 1;
	optional InventoryDeltaProto inventory_delta = 2;
}

message GetHoloholoInventoryProto {
	optional int64 timestamp_millis = 1;
	repeated Item item_been_seen = 2;
}

message GetImageGallerySettingsOutProto {
	optional bool is_image_gallery_enabled = 1;
	optional int32 max_periodic_image_loaded_count = 2;
}

message GetImageGallerySettingsProto {
}

message GetImagesForPoiOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		POI_NOT_FOUND = 2;
		INVALID_REQUEST = 3;
	}

	optional Status status = 1;
	repeated GameClientPhotoGalleryPoiImageProto photo_gallery_poi_images = 2;
}

message GetImagesForPoiProto {
	optional string poi_id = 1;
}

message GetInboxOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		TIMED_OUT = 3;
	}

	optional Result result = 1;
	optional ClientInbox inbox = 2;
}

message GetInboxProto {
	optional bool is_history = 1;
	optional bool is_reverse = 2;
	optional int64 not_before_ms = 3;
}

message GetInboxV2Proto {
	optional bool is_history = 1;
	optional bool is_reverse = 2;
	optional int64 not_before_ms = 3;
}

message GetIncensePokemonOutProto {
	enum Result {
		INCENSE_ENCOUNTER_UNKNOWN = 0;
		INCENSE_ENCOUNTER_AVAILABLE = 1;
		INCENSE_ENCOUNTER_NOT_AVAILABLE = 2;
	}

	optional Result result = 1;
	optional HoloPokemonId pokemon_type_id = 2;
	optional double lat = 3;
	optional double lng = 4;
	optional string encounter_location = 5;
	optional fixed64 encounter_id = 6;
	optional int64 disappear_time_ms = 7;
	optional PokemonDisplayProto pokemon_display = 8;
}

message GetIncensePokemonProto {
	optional double player_lat_degrees = 1;
	optional double player_lng_degrees = 2;
}

message GetIncomingFriendInvitesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
	repeated IncomingFriendInviteDisplayProto invites = 2;
}

message GetIncomingFriendInvitesProto {
}

message GetIncomingGameInvitesRequest {
}

message GetIncomingGameInvitesResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FEATURE_DISABLED = 3;
	}

	message IncomingGameInvite {
		enum Status {
			UNSET = 0;
			NEW = 1;
			SEEN = 2;
		}

		optional string app_key = 1;
		repeated string friend_profile_names = 2;
		optional Status status = 3;
	}

	repeated IncomingGameInvite invites = 1;
	optional Result result = 2;
}

message GetInventoryProto {
	optional int64 timestamp_millis = 1;
}

message GetInventoryResponseProto {
	optional bool success = 1;
	optional InventoryDeltaProto inventory_delta = 2;
}

message GetLocalTimeOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	message LocalTimeProto {
		optional int64 timestamp_ms = 1;
		optional int32 year = 2;
		optional int32 month = 3;
		optional int32 day_of_month = 4;
		optional int32 day_of_week = 5;
		optional int32 hours = 6;
		optional int32 minutes = 7;
		optional int32 seconds = 8;
		optional int32 milliseconds = 9;
		optional string timezone_id = 10;
	}

	optional Status status = 1;
	repeated LocalTimeProto local_times = 2;
}

message GetLocalTimeProto {
	repeated int64 timestamp_ms = 1;
}

message GetMapFortsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	message FortProto {
		optional string id = 1;
		optional string name = 2;
		optional double latitude = 3;
		optional double longitude = 4;
		repeated Image image = 5;
	}

	message Image {
		optional string url = 1;
		optional string id = 2;
	}

	repeated FortProto fort = 1;
	optional Status status = 2;
}

message GetMapFortsProto {
	repeated uint64 cell_id = 1;
}

message GetMapObjectsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		LOCATION_UNSET = 2;
		ERROR = 3;
	}

	enum TimeOfDay {
		NONE = 0;
		DAY = 1;
		NIGHT = 2;
	}

	repeated ClientMapCellProto map_cell = 1;
	optional Status status = 2;
	optional TimeOfDay time_of_day = 3;
	repeated ClientWeatherProto client_weather = 4;
}

message GetMapObjectsProto {
	repeated uint64 cell_id = 1;
	repeated int64 since_time_ms = 2;
	optional double player_lat = 3;
	optional double player_lng = 4;
}

message GetMapObjectsTriggerTelemetry {
	enum TriggerType {
		UNSET = 0;
		TIME = 1;
		SPACE = 2;
	}

	optional TriggerType trigger_type = 1;
}

message GetMatchmakingStatusDataProto {
	optional int32 ob_int32 = 1;
}

message GetMatchmakingStatusOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS_OPPONENT_FOUND = 1;
		SUCCESS_QUEUED = 2;
		SUCCESS_NOT_MATCHED_EXPIRED = 3;
		ERROR_PLAYER_NOT_FOUND = 4;
		ERROR_QUEUE_NOT_FOUND = 5;
		ERROR_RETRY_UNSUCCESSFUL = 6;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
	optional string queue_id = 3;
}

message GetMatchmakingStatusProto {
	optional string queue_id = 1;
}

message GetMatchmakingStatusResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional GetMatchmakingStatusOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message GetMementoListOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_MEMENTO_TYPE_NOT_ENABLED = 2;
		ERROR_INVALID_REQUEST = 3;
		NOT_MODIFIED = 4;
	}

	optional Status status = 1;
	repeated MementoAttributesProto mementos = 2;
	optional string memento_list_hash = 3;
}

message GetMementoListProto {
	repeated MementoType memento_types = 1;
	repeated int64 s2_cell_location_bounds = 2;
	optional int64 time_bound_start_ms = 3;
	optional int64 time_bound_end_ms = 4;
	optional string memento_list_hash = 5;
}

message GetMilestonesOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
		ERROR_UNKNOWN = 3;
	}

	repeated ReferralMilestonesProto referrer_milestone = 1;
	repeated ReferralMilestonesProto referee_milestone = 2;
	optional Status status = 3;
}

message GetMilestonesPreviewOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
	}

	optional Status status = 1;
	optional ReferralMilestonesProto referrer_milestones = 2;
}

message GetMilestonesPreviewProto {
}

message GetMilestonesProto {
}

message GetMyAccountRequest {
}

message GetMyAccountResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	message ContactProto {
		enum Type {
			UNSET = 0;
			MASKED_PHONE_NUMBER = 1;
		}

		optional string contact_id = 1;
		optional Type type = 2;
		optional string contact = 3;
	}

	optional Status status = 1;
	repeated ContactProto contact = 2;
}

message GetNewQuestsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_DISPLAY = 2;
	}

	optional Status status = 1;
	repeated ClientQuestProto quests = 2;
	repeated ClientQuestProto version_changed_quests = 3;
}

message GetNewQuestsProto {
}

message GetNintendoAccountOutProto {
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		ERROR_PLAYER_NOT_USING_PH_APP = 3;
		ERROR_PHAPI_UNKNOWN = 4;
		ERROR_RELOGIN_TO_PH_APP_NEEDED = 5;
	}

	optional Status status = 1;
	optional string linked_naid = 2;
	optional string pokemon_home_trainer_name = 3;
	optional string support_id = 4;
}

message GetNintendoAccountProto {
}

message GetNintendoOAuth2UrlOutProto {
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		ERROR_PLAYER_SIGNED_IN = 3;
	}

	optional Status status = 1;
	optional string url = 2;
}

message GetNintendoOAuth2UrlProto {
	optional string deep_link_app_scheme = 1;
}

message GetNotificationInboxOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Result result = 1;
	optional ClientInbox inbox = 2;
}

message GetNpcCombatRewardsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALD_NUMBER_ATTACKING_POKEMON_IDS = 2;
	}

	optional Result result = 1;
	optional CombatRewardStatus reward_status = 2;
	optional LootProto rewards = 3;
	optional int32 number_rewarded_npc_battles_today = 4;
}

message GetNpcCombatRewardsProto {
	optional string combat_npc_trainer_template_id = 1;
	optional CombatPlayerFinishState finish_state = 2;
	repeated fixed64 attacking_pokemon_id = 3;
	optional string combat_id = 4;
	optional CombatQuestUpdateProto combat_quest_update = 5;
}

message GetOutgoingFriendInvitesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message GetOutgoingFriendInvitesProto {
}

message GetPhotobombOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		PHOTOBOMB_NOT_AVAILABLE = 2;
		ENCOUNTER_ALREADY_COMPLETED = 3;
		ERROR_UNKNOWN = 4;
	}

	optional Status status = 1;
	optional HoloPokemonId pokemon_id = 2;
	optional double lat = 3;
	optional double lng = 4;
	optional string encounter_location = 5;
	optional fixed64 encounter_id = 6;
	optional int64 disappear_time_ms = 7;
	optional PokemonDisplayProto pokemon_display = 8;
}

message GetPhotobombProto {
}

message GetPlayerDayOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
	optional int64 day = 2;
}

message GetPlayerDayProto {
}

message GetPlayerOutProto {
	optional bool success = 1;
	optional ClientPlayerProto player = 2;
	optional bool banned = 3;
	optional bool warn = 4;
	optional bool was_created = 5;
	optional bool warn_message_acknowledged = 6;
	optional bool was_suspended = 7;
	optional bool suspended_message_acknowledged = 8;
	optional int64 warn_expire_ms = 9;
	repeated int32 user_permission = 10;
}

message GetPlayerProto {
	optional PlayerLocaleProto player_locale = 1;
	optional bool prevent_creation = 2;
}

message GetPlayerSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
	}

	optional Result result = 1;
	optional PlayerSettingsProto settings = 2;
}

message GetPlayerSettingsProto {
}

message GetPlayerSubmissionValidationSettingsOutProto {
	repeated string banned_metadata_text = 1;
}

message GetPlayerSubmissionValidationSettingsProto {
}

message GetPoisInRadiusOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		INTERNAL_ERROR = 2;
	}

	optional Status status = 1;
	repeated GeodataServiceGameClientPoiProto pois = 2;
}

message GetPoisInRadiusProto {
	optional LocationE6Proto location = 1;
}

message GetPokemonTagsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
	}

	optional Result result = 1;
	repeated PokemonTagProto tag = 2;
	optional bool should_show_tags_tutorial = 3;
}

message GetPokemonTagsProto {
}

message GetProfileRequest {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message GetProfileResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_NOT_FRIEND = 3;
	}

	message PlayerProfileDetailsProto {
		optional string app_key = 1;
		optional string codename = 2;
		optional string faction = 3;
		optional int32 level = 4;
		optional int64 experience = 5;
		optional int64 signed_up_timestamp_ms = 6;
		optional int64 last_played_timestamp_ms = 7;
		optional double player_total_walk_km = 8;
	}

	optional Result result = 1;
	optional ProfileDetailsProto profile_details = 2;
	repeated PlayerProfileDetailsProto player_profile_details = 3;
}

message GetPublishedRoutesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
	repeated ClientRouteProto routes = 2;
}

message GetPublishedRoutesProto {
}

message GetQuestDetailsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_QUEST_NOT_FOUND = 2;
		ERROR_INVALID_DISPLAY = 3;
	}

	optional Status status = 1;
	repeated ClientQuestProto quests = 2;
}

message GetQuestDetailsProto {
	repeated string quest_id = 1;
}

message GetRaidDetailsDataProto {
	optional int32 ob_int32 = 1;
}

message GetRaidDetailsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
		ERROR_RAID_COMPLETED = 3;
		ERROR_RAID_UNAVAILABLE = 4;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 5;
		ERROR_POI_INACCESSIBLE = 6;
	}

	optional LobbyProto lobby = 1;
	optional BattleProto raid_battle = 2;
	optional bool player_can_join_lobby = 3;
	optional Result result = 4;
	optional RaidInfoProto raid_info = 5;
	optional bool ticket_used = 6;
	optional bool free_ticket_available = 7;
	optional int32 throws_remaining = 8;
	optional bool received_rewards = 9;
	optional int32 num_players_in_lobby = 10;
	optional int64 server_ms = 11;
	optional int32 server_instance = 12;
	optional bool display_high_user_warning = 13;
	optional int32 num_friend_invites_remaining = 14;
	optional bool remote_ticket_used = 15;
	optional bool is_within_plfe_range = 16;
	optional Item ob_item = 17;
}

message GetRaidDetailsProto {
	optional int64 raid_seed = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
	optional double player_lat_degrees = 4;
	optional double player_lng_degrees = 5;
	optional double gym_lat_degrees = 6;
	optional double gym_lng_degrees = 7;
	optional string inviter_id = 8;
}

message GetRaidDetailsResponseDataProto {
	optional GetRaidDetailsOutProto.Result result = 1;
	optional bool ob_get_raid_details_data_bool_1 = 2;
	optional bool ob_get_raid_details_data_bool_2 = 3;
	optional int32 ob_get_raid_details_data_int32_1 = 4;
	optional bool ob_get_raid_details_data_bool_3 = 5;
	optional int32 ob_get_raid_details_data_int32_2 = 6;
	optional uint32 ob_get_raid_details_data_uint32 = 7;
	optional int32 ob_get_raid_details_data_int32_3 = 8;
	optional bool ob_get_raid_details_data_bool_4 = 9;
	optional bool ob_get_raid_details_data_bool_5 = 10;
	optional int32 ob_get_raid_details_data_int32_4 = 11;
	optional uint32 ob_get_raid_details_data_uint32_2 = 12;
}

message GetReferralCodeOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
		ERROR_UNAVAILABLE = 3;
		ERROR_GENERATING_IN_COOL_DOWN = 4;
	}

	optional Status status = 1;
	optional string referral_code = 2;
}

message GetReferralCodeProto {
	optional bool regenerate = 1;
}

message GetRemoteConfigVersionsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional uint64 game_master_timestamp = 2;
	optional uint64 asset_digest_timestamp = 3;
	repeated uint32 experiment_id = 4;
}

message GetRemoteConfigVersionsProto {
	optional Platform platform = 1;
	optional string device_manufacturer = 2;
	optional string device_model = 3;
	optional string locale = 4;
	optional uint32 app_version = 5;
	optional Store store = 6;
	optional string carrier = 7;
}

message GetRocketBalloonOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		IN_COOL_DOWN = 2;
		NO_BALLOON_AVAILABLE = 3;
		DISABLED = 4;
		EQUIPPED_ITEM_INVALID = 5;
		SUCCESS_BALLOON_ALREADY_EXISTS = 6;
	}

	optional Status status = 1;
	optional RocketBalloonDisplayProto display = 2;
}

message GetRocketBalloonProto {
	optional Item equipped_item = 1;
}

message GetRoutesOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	repeated ClientRouteMapCellProto route_map_cell = 1;
	optional Status status = 2;
}

message GetRoutesProto {
	repeated uint64 cell_id = 1;
}

message GetServerTimeOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Status status = 1;
	optional int64 server_time_ms = 2;
}

message GetServerTimeProto {
}

message GetStardustQuestProto {
	optional int32 stardust = 1;
}

message GetTimedGroupChallengeOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
	}

	optional Status status = 1;
	optional TimedGroupChallengeDefinitionProto challenge_definition = 2;
	optional int32 current_score = 3;
	optional int32 player_score = 4;
	optional string active_city_hash = 5;
	repeated string active_city_localization_key_changes = 6;
}

message GetTimedGroupChallengeProto {
	optional string challenge_id = 1;
	optional string active_city_hash = 2;
}

message GetTodayViewOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
	optional TodayViewProto today_view = 2;
}

message GetTodayViewProto {
}

message GetTradingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FRIEND_NOT_FOUND = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_INVALID_STATE = 5;
		ERROR_STATE_HANDLER = 6;
	}

	optional Result result = 1;
	optional TradingProto trading = 2;
}

message GetTradingProto {
	optional string player_id = 1;
}

message GetTutorialEggOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_ALREADY_HAS_TUTORIAL_EGG = 2;
		ERROR_FAILED_TO_ADD_EGG = 3;
		ERROR_NOT_V2_FLOW = 4;
	}

	optional Result result = 1;
}

message GetTutorialEggProto {
}

message GetUploadUrlOutProto {
	enum Status {
		UNSET = 0;
		FAILURES = 1;
		SUCCESS = 2;
		MISSING_IMAGE_CONTEXTS = 3;
		DUPLICATE_IMAGE_CONTEXTS = 4;
	}

	optional Status status = 1;
	optional string signed_url = 2;
	optional string supporting_image_signed_url = 3;
	optional ContextSignedUrls context_signed_urls = 4;

	message ContextSignedUrls {
		optional string key = 1;
		optional string value = 2;
	}
}

message GetUploadUrlProto {
	optional string user_id = 1;
	optional string game_unique_id = 2;
	optional PlayerSubmissionTypeProto submission_type = 3;
	optional string submission_id = 4;
	repeated string image_contexts = 5;
}

message GetVsSeekerStatusOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS_FULLY_CHARGED = 1;
		SUCCESS_NOT_FULLY_CHARGED_YET = 2;
		ERROR_VS_SEEKER_NOT_FOUND = 3;
		ERROR_VS_SEEKER_NEVER_STARTED_CHARGING = 4;
	}

	optional Result result = 1;
	optional VsSeekerAttributesProto vs_seeker = 2;
	optional bool season_ended = 3;
	optional CombatLogProto combat_log = 4;
}

message GetVsSeekerStatusProto {
}

message GetWebTokenActionOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Status status = 1;
	optional string access_token = 2;
}

message GetWebTokenActionProto {
	optional string client_id = 1;
}

message GetWebTokenOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Status status = 1;
	optional string access_token = 2;
}

message GetWebTokenProto {
	optional string client_id = 1;
}

message GiftBoxDetailsProto {
	optional uint64 giftbox_id = 1;
	optional string sender_id = 2;
	optional string sender_codename = 3;
	optional string receiver_id = 4;
	optional string receiver_codename = 5;
	optional string fort_id = 6;
	optional string fort_name = 7;
	optional double fort_lat = 8;
	optional double fort_lng = 9;
	optional string fort_image_url = 10;
	optional int64 creation_timestamp = 11;
	optional int64 sent_timestamp = 12;
	optional fixed64 delivery_pokemon_id = 13;
	optional bool is_sponsored = 14;
	repeated StickerSentProto stickers_sent = 15;
	optional PlayerPreferencesProto.PostcardTrainerInfoSharingPreference share_trainer_info_with_postcard = 16;
	optional string pinned_postcard_id = 17;
	optional int64 pin_update_timestamp_ms = 18;
}

message GiftBoxProto {
	optional uint64 giftbox_id = 1;
	optional string sender_id = 2;
	optional string receiver_id = 3;
	optional string fort_id = 4;
	optional double fort_lat = 5;
	optional double fort_lng = 6;
	optional int64 creation_timestamp = 7;
	optional int64 sent_timestamp = 8;
	optional int64 sent_bucket = 9;
}

message GiftBoxesProto {
	repeated GiftBoxProto gifts = 1;
}

message GiftingEligibilityStatusProto {
	enum Status {
		UNSET = 0;
		SUCCESS_ELIGIBLE = 1;
		ERROR_UNKNOWN = 2;
		FAILURE_SKU_NOT_GIFTABLE = 3;
		FAILURE_SENDER_LEVEL = 4;
		FAILURE_SENDER_LIMIT_REACHED = 5;
		FAILURE_SENDER_CHILD_ACCOUNT = 6;
		FAILURE_FRIEND_DOES_NOT_EXIST = 7;
		FAILURE_FRIEND_LEVEL = 8;
		FAILURE_FRIEND_HAS_TICKET = 9;
	}

	repeated Status sender_check_status = 1;
	repeated Status item_check_status = 2;
	repeated Status recipient_check_status = 3;
}

message GiftingIapItemProto {
	optional string sku_id = 1;
	optional Item item = 2;
}

message GlobalEventTicketAttributesProto {
	optional HoloBadgeType event_badge = 1;
	optional int64 grant_badge_before_event_start_ms = 2;
	optional string event_start_time = 3;
	optional string event_end_time = 4;
	optional string item_bag_description_key = 6;
	repeated HoloBadgeType event_variant_badges = 7;
	repeated string event_variant_title_string_keys = 8;
	repeated string event_variant_description_string_keys = 9;
	optional string item_bag_description_variant_selected = 10;
	repeated string event_variant_button_string_keys = 11;
	optional bool is_ticket_eligible_for_gifting = 12;
	optional Item ob_item_event_1 = 13;
	optional Item ticket_to_gift = 14;
	optional string ob_string_event_1 = 15;
	optional string ob_string_event_2 = 16;
	optional int64 client_event_start_time_utc_ms = 100;
	optional int64 client_event_end_time_utc_ms = 101;
}

message GlobalSettingsProto {
	optional FortSettingsProto fort_settings = 2;
	optional MapSettingsProto map_settings = 3;
	optional LevelSettingsProto level_settings = 4;
	optional InventorySettingsProto inventory_settings = 5;
	optional string minimum_client_version = 6;
	optional GpsSettingsProto gps_settings = 7;
	optional FestivalSettingsProto festival_settings = 8;
	optional EventSettingsProto event_settings = 9;
	optional int32 max_pokemon_types = 10;
	optional SfidaGlobalSettingsProto sfida_settings = 11;
	optional NewsSettingProto news_settings = 12;
	optional TranslationSettingsProto translation_settings = 13;
	optional PasscodeSettingsProto passcode_settings = 14;
	optional NotificationSettingsProto notification_settings = 15;
	repeated string client_app_blacklist = 16;
	optional ClientPerformanceSettingsProto client_perf_settings = 17;
	optional NewsGlobalSettingsProto news_global_settings = 18;
	optional QuestGlobalSettingsProto quest_global_settings = 19;
	optional BelugaGlobalSettingsProto beluga_global_settings = 20;
	optional TelemetryGlobalSettingsProto telemetry_global_settings = 21;
	optional LoginSettingsProto login_settings = 22;
	optional SocialClientSettingsProto social_settings = 23;
	optional TradingGlobalSettingsProto trading_global_settings = 24;
	repeated HoloPokemonId additional_allowed_pokemon_ids = 25;
	optional UpsightLoggingSettingsProto upsight_logging_settings = 26;
	optional CombatGlobalSettingsProto combat_global_settings = 27;
	optional ThirdMoveGlobalSettingsProto third_move_settings = 28;
	optional CombatChallengeGlobalSettingsProto combat_challenge_global_settings = 29;
	optional BackgroundModeGlobalSettingsProto bgmode_global_settings = 30;
	optional ProbeSettingsProto probe_settings = 31;
	optional PokecoinPurchaseDisplaySettingsProto purchased_settings = 32;
	optional HelpshiftSettingsProto helpshift_settings = 33;
	optional ArPhotoGlobalSettings ar_photo_settings = 34;
	optional PoiGlobalSettingsProto poi_settings = 35;
	optional PokemonGlobalSettingsProto pokemon_settings = 36;
	optional AvatarGlobalSettingsProto avatar_settings = 37;
	optional EvolutionV2SettingsProto evolution_v2_settings = 38;
	optional IncidentGlobalSettingsProto incident_settings = 39;
	optional KoalaSettingsProto koala_settings = 40;
	optional KangarooSettingsProto kangaroo_settings = 41;
	optional RouteGlobalSettingsProto route_settings = 42;
	optional BuddyGlobalSettingsProto buddy_settings = 43;
	optional InputSettingsProto input_settings = 44;
	optional GmtSettingsProto gmt_settings = 45;
	optional bool use_local_time_action = 47;
	optional ArdkConfigSettingsProto ardk_config_settings = 48;
	optional EnabledPokemonSettingsProto enabled_pokemon = 49;
	optional PokemonBulkUpgradeSettingsProto pokemon_bulk_upgrade_settings = 50;
	optional PlannedDowntimeSettingsProto planned_downtime_settings = 51;
	optional ArMappingSettingsProto ar_mapping_settings = 52;
	optional RaidInviteFriendsSettingsProto raid_invite_friends_settings = 53;
	optional DailyEncounterGlobalSettingsProto daily_encounter_settings = 54;
	optional RaidTicketSettingsProto raid_ticket_settings = 55;
	optional RocketBalloonGlobalSettingsProto rocket_balloon_settings = 56;
	optional TimedGroupChallengeSettingsProto timed_group_challenge_settings = 57;
	optional MegaEvoGlobalSettingsProto mega_evo_settings = 58;
	optional LobbyClientSettingsProto lobby_client_settings = 59;
	optional QuestEvolutionGlobalSettingsProto quest_evolution_settings = 61;
	optional SponsoredPoiFeedbackSettingsProto sponsored_poi_feedback_settings = 62;
	optional CrashlyticsSettingsProto crashlytics_settings = 65;
	optional CatchPokemonGlobalSettingsProto catch_pokemon_settings = 66;
	optional IdfaSettingsProto idfa_settings = 67;
	optional FormChangeSettingsProto form_change_settings = 68;
	repeated StoreIapSettingsProto iap_settings = 69;
	optional ObNewGlobalSetting ob_new_global_setting = 70;
	optional UploadManagementSettings upload_management_settings = 72;
	optional RaidLoggingSettingsProto raid_logging_settings = 73;
	optional PostcardCollectionGlobalSettingsProto postcard_collection_settings = 74;
	optional ObNewGlobalSetting1 ob_new_global_setting_1 = 75;
	optional ObNewGlobalSetting2 ob_new_global_setting_2 = 76;
	optional ObNewGlobalSetting4 ob_new_global_setting_4 = 77;
	optional ObNewGlobalSetting5 ob_new_global_setting_5 = 78;
	optional ObNewGlobalSetting6 ob_new_global_setting_6 = 79;
}

message GmmSettings {
	repeated LayerRule layer_rules = 1;
}

message GmtSettingsProto {
	optional bool enable_gmtdownload_v2 = 1;
	optional int32 download_poll_period_ms = 2;
}

message GoogleToken {
	optional string id_token = 1;
}

message GpsSettingsProto {
	optional float driving_warning_speed_meters_per_second = 1;
	optional float driving_warning_cooldown_minutes = 2;
	optional float driving_speed_sample_interval_seconds = 3;
	optional int32 driving_speed_sample_count = 4;
	optional float idle_threshold_speed_meters_per_second = 5;
	optional int32 idle_threshold_duration_seconds = 6;
	optional float idle_sample_interval_seconds = 7;
	optional int32 idle_speed_sample_count = 8;
}

message GrapeshotAuthenticationDataProto {
	optional string authorization = 1;
	optional string date = 2;
}

message GrapeshotChunkDataProto {
	optional string chunk_file_path = 1;
	optional uint32 chunk_number = 2;
	optional GrapeshotAuthenticationDataProto upload_authentication = 3;
	optional GrapeshotAuthenticationDataProto delete_authentication = 4;
}

message GrapeshotComposeDataProto {
	optional string target_file_path = 1;
	optional GrapeshotAuthenticationDataProto authentication = 2;
	optional string hash = 3;
}

message GrapeshotUploadingDataProto {
	repeated GrapeshotChunkDataProto chunk_data = 1;
	optional GrapeshotComposeDataProto compose_data = 2;
	optional string gcs_bucket = 3;
	optional int32 number_of_chunks = 4;
}

message GroupChallengeCriteriaProto {
	optional QuestType challenge_type = 1;
	optional QuestGoalProto challenge_goal = 2;
}

message GroupChallengeDisplayProto {
	optional string title = 1;
	repeated EventSectionProto.BonusBoxProto boost_rewards = 2;
}

message GuiSearchSettingsProto {
	optional bool gui_search_enabled = 1;
	repeated RecommendedSearchProto recommended_search = 2;
	optional int32 max_number_recent_searches = 3;
	optional int32 max_number_favorite_searches = 4;
	optional int32 max_query_length = 5;
}

message GymBadgeGmtSettingsProto {
	repeated int32 target = 1;
	optional float battle_winning_score_per_defender_cp = 2;
	optional float gym_defending_score_per_minute = 3;
	optional int32 berry_feeding_score = 4;
	optional int32 pokemon_deploy_score = 5;
	optional int32 raid_battle_winning_score = 6;
	optional int32 lose_all_battles_score = 7;
}

message GymBadgeStats {
	optional uint64 total_time_defended_ms = 1;
	optional uint32 num_battles_won = 2;
	optional uint32 num_berries_fed = 3;
	optional uint32 num_deploys = 4;
	optional uint32 num_battles_lost = 5;
	repeated GymBattleProto gym_battles = 15;
}

message GymBattleAttackOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_ATTACK_ACTIONS = 2;
		ERROR_NOT_IN_RANGE = 3;
		ERROR_WRONG_BATTLE_TYPE = 4;
		ERROR_RAID_ACTIVE = 5;
	}

	optional Result result = 1;
	optional BattleUpdateProto battle_update = 2;
	optional AwardedGymBadge gym_badge = 3;
}

message GymBattleAttackProto {
	optional string gym_id = 1;
	optional string battle_id = 2;
	repeated BattleActionProto attacker_actions = 3;
	optional BattleActionProto last_retrieved_action = 4;
	optional double player_lat_degrees = 5;
	optional double player_lng_degrees = 6;
	optional int64 timestamp_ms = 7;
}

message GymBattleProto {
	optional string battle_id = 1;
	optional int64 completed_ms = 2;
	optional bool incremented_gym_battle_friends = 3;
}

message GymBattleSettingsProto {
	optional float energy_per_sec = 1;
	optional float dodge_energy_cost = 2;
	optional float retarget_seconds = 3;
	optional float enemy_attack_interval = 4;
	optional float attack_server_interval = 5;
	optional float round_duration_seconds = 6;
	optional float bonus_time_per_ally_seconds = 7;
	optional int32 maximum_attackers_per_battle = 8;
	optional float same_type_attack_bonus_multiplier = 9;
	optional int32 maximum_energy = 10;
	optional float energy_delta_per_health_lost = 11;
	optional int32 dodge_duration_ms = 12;
	optional int32 minimum_player_level = 13;
	optional int32 swap_duration_ms = 14;
	optional float dodge_damage_reduction_percent = 15;
	optional int32 minimum_raid_player_level = 16;
	optional float shadow_pokemon_attack_bonus_multiplier = 17;
	optional float shadow_pokemon_defense_bonus_multiplier = 18;
	optional float purified_pokemon_attack_multiplier_vs_shadow = 19;
}

message GymDefenderProto {
	optional MotivatedPokemonProto motivated_pokemon = 1;
	optional DeploymentTotalsProto deployment_totals = 2;
	optional PlayerPublicProfileProto trainer_public_profile = 3;
}

message GymDeployOutProto {
	enum Result {
		NO_RESULT_SET = 0;
		SUCCESS = 1;
		ERROR_ALREADY_HAS_POKEMON_ON_FORT = 2;
		ERROR_OPPOSING_TEAM_OWNS_FORT = 3;
		ERROR_FORT_IS_FULL = 4;
		ERROR_NOT_IN_RANGE = 5;
		ERROR_PLAYER_HAS_NO_TEAM = 6;
		ERROR_POKEMON_NOT_FULL_HP = 7;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 8;
		ERROR_POKEMON_IS_BUDDY = 9;
		ERROR_FORT_DEPLOY_LOCKOUT = 10;
		ERROR_PLAYER_HAS_NO_NICKNAME = 11;
		ERROR_POI_INACCESSIBLE = 12;
		ERROR_NOT_A_POKEMON = 13;
		ERROR_TOO_MANY_OF_SAME_KIND = 14;
		ERROR_TOO_MANY_DEPLOYED = 15;
		ERROR_TEAM_DEPLOY_LOCKOUT = 16;
		ERROR_LEGENDARY_POKEMON = 17;
		ERROR_INVALID_POKEMON = 18;
		ERROR_RAID_ACTIVE = 19;
	}

	optional Result result = 1;
	optional GymStatusAndDefendersProto gym_status_and_defenders = 2;
	optional AwardedGymBadge awarded_gym_badge = 3;
	optional int64 cooldown_duration_millis = 4;
}

message GymDeployProto {
	optional string fort_id = 1;
	optional fixed64 pokemon_id = 2;
	optional double player_lat_degrees = 3;
	optional double player_lng_degrees = 4;
}

message GymDisplayProto {
	repeated GymEventProto gym_event = 1;
	optional int32 total_gym_cp = 2;
	optional double lowest_pokemon_motivation = 3;
	optional int32 slots_available = 4;
	optional int64 occupied_millis = 5;
}

message GymEventProto {
	enum Event {
		UNKNOWN = 0;
		POKEMON_FED = 1;
		POKEMON_DEPLOYED = 2;
		POKEMON_RETURNED = 3;
		BATTLE_WON = 4;
		BATTLE_LOSS = 5;
		RAID_STARTED = 6;
		RAID_ENDED = 7;
		GYM_NEUTRALIZED = 8;
	}

	optional string trainer = 1;
	optional int64 timestamp_ms = 2;
	optional Event event = 3;
	optional HoloPokemonId pokedex_id = 4;
	optional fixed64 pokemon_id = 5;
}

message GymFeedPokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_CANNOT_USE = 2;
		ERROR_NOT_IN_RANGE = 3;
		ERROR_POKEMON_NOT_THERE = 4;
		ERROR_POKEMON_FULL = 5;
		ERROR_NO_BERRIES_LEFT = 6;
		ERROR_WRONG_TEAM = 7;
		ERROR_WRONG_COUNT = 8;
		ERROR_TOO_FAST = 9;
		ERROR_TOO_FREQUENT = 10;
		ERROR_GYM_BUSY = 11;
		ERROR_RAID_ACTIVE = 12;
		ERROR_GYM_CLOSED = 13;
	}

	optional Result result = 1;
	optional GymStatusAndDefendersProto gym_status_and_defenders = 2;
	optional AwardedGymBadge gym_badge = 3;
	optional int32 stardust_awarded = 4;
	optional int32 xp_awarded = 5;
	optional int32 num_candy_awarded = 6;
	optional HoloPokemonFamilyId candy_family_id = 7;
	optional int64 cooldown_complete = 8;
	optional int32 num_xl_candy_awarded = 9;
}

message GymFeedPokemonProto {
	optional Item item = 1;
	optional int32 starting_quantity = 2;
	optional string gym_id = 3;
	optional fixed64 pokemon_id = 4;
	optional double player_lat_degrees = 5;
	optional double player_lng_degrees = 6;
}

message GymGetInfoOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
		ERROR_GYM_DISABLED = 3;
	}

	optional GymStatusAndDefendersProto gym_status_and_defenders = 1;
	optional string name = 2;
	optional string url = 3;
	optional Result result = 4;
	optional string description = 5;
	optional string secondary_url = 6;
	optional AwardedGymBadge awarded_gym_badge = 7;
	optional string checkin_image_url = 8 [deprecated = true];
	optional EventInfoProto event_info = 9;
	optional DisplayWeatherProto display_weather = 10;
	repeated string promo_image = 11;
	repeated string promo_description = 12;
	optional string call_to_action_link = 13;
	optional int64 server_ms = 14;
	optional SponsoredDetailsProto sponsored_details = 15;
	optional int32 poi_images_count = 16;
	optional string geostore_tombstone_message_key = 20;
	optional string geostore_suspension_message_key = 21;
}

message GymGetInfoProto {
	optional string gym_id = 1;
	optional double player_lat_degrees = 2;
	optional double player_lng_degrees = 3;
	optional double gym_lat_degrees = 4;
	optional double gym_lng_degrees = 5;
	optional string inviter_id = 6;
}

message GymLevelSettingsProto {
	repeated int32 required_experience = 1;
	repeated int32 leader_slots = 2;
	repeated int32 trainer_slots = 3;
	repeated int32 search_roll_bonus = 4;
}

message GymMembershipProto {
	optional PokemonProto pokemon = 1;
	optional PlayerPublicProfileProto trainer_public_profile = 2;
	optional PokemonProto training_pokemon = 3;
}

message GymPokemonSectionProto {
	message GymPokemonProto {
		optional int64 pokemon_id = 1;
		optional float motivation = 2;
		optional int64 deployed_timestamp_ms = 3;
		optional int32 coins_returned = 4;
	}

	repeated GymPokemonProto pokemon_in_gym = 1;
	repeated GymPokemonProto pokemon_returned_today = 2;
}

message GymStartSessionOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_GYM_NOT_FOUND = 2;
		ERROR_GYM_NEUTRAL = 3;
		ERROR_GYM_WRONG_TEAM = 4;
		ERROR_GYM_EMPTY = 5;
		ERROR_INVALID_DEFENDER = 6;
		ERROR_TRAINING_INVALID_ATTACKER_COUNT = 7;
		ERROR_ALL_POKEMON_FAINTED = 8;
		ERROR_TOO_MANY_BATTLES = 9;
		ERROR_TOO_MANY_PLAYERS = 10;
		ERROR_GYM_BATTLE_LOCKOUT = 11;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 12;
		ERROR_NOT_IN_RANGE = 13;
		ERROR_POI_INACCESSIBLE = 14;
		ERROR_RAID_ACTIVE = 15;
	}

	optional Result result = 1;
	optional BattleProto battle = 2;
}

message GymStartSessionProto {
	optional string gym_id = 1;
	repeated fixed64 attacking_pokemon_id = 2;
	optional fixed64 defending_pokemon_id = 3;
	optional double player_lat_degrees = 4;
	optional double player_lng_degrees = 5;
	optional int64 lobby_join_time_ms = 6;
}

message GymStateProto {
	optional PokemonFortProto fort_map_data = 1;
	repeated GymMembershipProto gym_membership = 2;
	optional bool deploy_lockout = 3;
}

message GymStatusAndDefendersProto {
	optional PokemonFortProto pokemon_fort_proto = 1;
	repeated GymDefenderProto gym_defender = 2;
}

message HashedKeyProto {
	optional string hashed_key_raw = 1;
}

message HelpshiftSettingsProto {
	optional uint32 min_player_level = 1;
	optional uint32 default_player_level = 2;
}

message HoloFitnessReportProto {
	optional int32 num_eggs_hatched = 1;
	optional int32 num_buddy_candy_earned = 2;
	optional double distance_walked_km = 3;
	optional int64 week_bucket = 4;
}

message HoloInventoryItemProto {
	optional PokemonProto pokemon = 1;
	optional ItemProto item = 2;
	optional PokedexEntryProto pokedex_entry = 3;
	optional PlayerStatsProto player_stats = 4;
	optional PlayerCurrencyProto player_currency = 5;
	optional PlayerCameraProto player_camera = 6;
	optional InventoryUpgradesProto inventory_upgrades = 7;
	optional AppliedItemsProto applied_items = 8;
	optional EggIncubatorsProto egg_incubators = 9;
	optional PokemonFamilyProto pokemon_family = 10;
	optional QuestProto quest = 11;
	optional AvatarItemProto avatar_item = 12;
	optional RaidTicketsProto raid_tickets = 13;
	optional QuestsProto quests = 14;
	optional GiftBoxesProto gift_boxes = 15;
	optional BelugaIncenseBoxProto beluga_incense = 16;
	optional RouteMakerProto route_maker = 18;
	optional LimitedPurchaseSkuRecordProto limited_purchase_sku_record = 19;
	optional RoutePlayProto route_play = 20;
	optional MegaEvolvePokemonSpeciesProto mega_evolve_species = 21;
	optional StickerProto sticker = 22;
	optional PokemonHomeProto pokemon_home = 23;
	optional BadgeData badge_data = 24;
	optional PlayerStatsSnapshotsProto player_stats_snapshots = 25;
	optional FakeDataProto fake_data = 26;
	optional PokedexCategoryMilestoneProto pokedex_category_milestone = 27;
	optional PlayerAttributesProto player_attributes = 29;
}

message HoloInventoryKeyProto {
	optional fixed64 pokemon_id = 1;
	optional Item item = 2;
	optional HoloPokemonId pokedex_entry_id = 3;
	optional bool player_stats = 4;
	optional bool player_currency = 5;
	optional bool player_camera = 6;
	optional bool inventory_upgrades = 7;
	optional bool applied_items = 8;
	optional bool egg_incubators = 9;
	optional HoloPokemonFamilyId pokemon_family_id = 10;
	optional QuestType quest_type = 11;
	optional string avatar_template_id = 12;
	optional bool raid_tickets = 13;
	optional bool quests = 14;
	optional bool gift_boxes = 15;
	optional bool beluga_incense_box = 16;
	optional bool vs_seeker_upgrades = 17;
	optional bool route_maker = 18;
	optional bool limited_purchase_sku_record = 19;
	optional bool route_play = 20;
	optional int32 mega_evo_pokemon_species_id = 21;
	optional string sticker_id = 22;
	optional bool pokemon_home = 23;
	optional HoloBadgeType badge = 24;
	optional bool player_stats_snapshot = 25;
	optional int64 unknown_key = 26;
	optional fixed64 fake_data = 27;
	optional PokedexCategory pokedex_category = 28;
	optional bool player_attributes = 30;
}

message HoloholoClientTelemetryOmniProto {
	optional BootTime boot_time = 1;
	optional FrameRate frame_rate = 2;
	optional GenericClickTelemetry generic_click_telemetry = 3;
	optional MapEventsTelemetry map_events_telemetry = 4;
	optional SpinPokestopTelemetry spin_pokestop_telemetry = 5;
	optional ProfilePageTelemetry profile_page_telemetry = 6;
	optional ShoppingPageTelemetry shopping_page_telemetry = 7;
	optional EncounterPokemonTelemetry encounter_pokemon_telemetry = 8;
	optional CatchPokemonTelemetry catch_pokemon_telemetry = 9;
	optional DeployPokemonTelemetry deploy_pokemon_telemetry = 10;
	optional FeedPokemonTelemetry feed_pokemon_telemetry = 11;
	optional EvolvePokemonTelemetry evolve_pokemon_telemetry = 12;
	optional ReleasePokemonTelemetry release_pokemon_telemetry = 13;
	optional NicknamePokemonTelemetry nickname_pokemon_telemetry = 14;
	optional NewsPageTelemetry news_page_telemetry = 15;
	optional ItemTelemetry item_telemetry = 16;
	optional BattlePartyTelemetry battle_party_telemetry = 17;
	optional PasscodeRedeemTelemetry passcode_redeem_telemetry = 18;
	optional LinkLoginTelemetry link_login_telemetry = 19;
	optional RaidTelemetry raid_telemetry = 20;
	optional PushNotificationTelemetry push_notification_telemetry = 21;
	optional AvatarCustomizationTelemetry avatar_customization_telemetry = 22;
	optional ReadPointOfInterestDescriptionTelemetry read_point_of_interest_description_telemetry = 23;
	optional WebTelemetry web_telemetry = 24;
	optional ChangeArTelemetry change_ar_telemetry = 25;
	optional WeatherDetailClickTelemetry weather_detail_click_telemetry = 26;
	optional UserIssueWeatherReport user_issue_weather_report = 27;
	optional PokemonInventoryTelemetry pokemon_inventory_telemetry = 28;
	optional SocialTelemetry social_telemetry = 29;
	optional CheckEncounterTrayInfoTelemetry check_encounter_info_telemetry = 30;
	optional PokemonGoPlusTelemetry pokemon_go_plus_telemetry = 31;
	optional RpcResponseTelemetry rpc_timing_telemetry = 32;
	optional SocialGiftCountTelemetry social_gift_count_telemetry = 33;
	optional AssetBundleDownloadTelemetry asset_bundle_telemetry = 34;
	optional AssetPoiDownloadTelemetry asset_poi_download_telemetry = 35;
	optional AssetStreamDownloadTelemetry asset_stream_download_telemetry = 36;
	optional AssetStreamCacheCulledTelemetry asset_stream_cache_culled_telemetry = 37;
	optional RpcSocketResponseTelemetry rpc_socket_timing_telemetry = 38;
	optional PermissionsFlowTelemetry permissions_flow = 39;
	optional DeviceServiceToggleTelemetry device_service_toggle = 40;
	optional BootTelemetry boot_telemetry = 41;
	optional UserAttributesProto user_attributes = 42;
	optional OnboardingTelemetry onboarding_telemetry = 43;
	optional LoginActionTelemetry login_action_telemetry = 44;
	optional ArPhotoSessionProto ar_photo_session_telemetry = 45;
	optional InvasionTelemetry invasion_telemetry = 46;
	optional CombatMinigameTelemetry combat_minigame_telemetry = 47;
	optional LeavePointOfInterestTelemetry leave_point_of_interest_telemetry = 48;
	optional ViewPointOfInterestImageTelemetry view_point_of_interest_image_telemetry = 49;
	optional CombatHubEntranceTelemetry combat_hub_entrance_telemetry = 50;
	optional LeaveInteractionRangeTelemetry leave_interaction_range_telemetry = 51;
	optional ShoppingPageClickTelemetry shopping_page_click_telemetry = 52;
	optional ShoppingPageScrollTelemetry shopping_page_scroll_telemetry = 53;
	optional DeviceSpecificationsTelemetry device_specifications_telemetry = 54;
	optional ScreenResolutionTelemetry screen_resolution_telemetry = 55;
	optional ARBuddyMultiplayerSessionTelemetry ar_buddy_multiplayer_session_telemetry = 56;
	optional BuddyMultiplayerConnectionFailedProto buddy_multiplayer_connection_failed_telemetry = 57;
	optional BuddyMultiplayerConnectionSucceededProto buddy_multiplayer_connection_succeeded_telemetry = 58;
	optional BuddyMultiplayerTimeToGetSessionProto buddy_multiplayer_time_to_get_session_telemetry = 59;
	optional PlayerHudNotificationClickTelemetry player_hud_notification_click_telemetry = 60;
	optional MonodepthDownloadTelemetry monodepth_download_telemetry = 61;
	optional ArMappingTelemetryProto ar_mapping_telemetry = 62;
	optional RemoteRaidTelemetry remote_raid_telemetry = 63;
	optional DeviceOSTelemetry device_os_telemetry = 64;
	optional NianticProfileTelemetry niantic_profile_telemetry = 65;
	optional ChangeOnlineStatusTelemetry change_online_status_telemetry = 66;
	optional DeepLinkingTelemetry deep_linking_telemetry = 67;
	optional ArMappingSessionTelemetryProto ar_mapping_session_telemetry = 68;
	optional PokemonHomeTelemetry pokemon_home_telemetry = 69;
	optional PokemonSearchTelemetry pokemon_search_telemetry = 70;
	optional ImageGalleryTelemetry image_gallery_telemetry = 71;
	optional PlayerShownLevelUpShareScreenTelemetry player_shown_level_up_share_screen_telemetry = 72;
	optional ReferralTelemetry referral_telemetry = 73;
	optional UploadManagementTelemetry upload_management_telemetry = 74;
	optional WayspotEditTelemetry wayspot_edit_telemetry = 75;
	optional ClientSettingsTelemetry client_settings_telemetry = 76;
	optional PokedexCategorySelectedTelemetry pokedex_category_selected_telemetry = 77;
	optional PercentScrolledTelemetry percent_scrolled_telemetry = 78;
	optional AddressBookImportTelemetry address_book_import_telemetry = 79;
	optional MissingTranslationTelemetry missing_translation_telemetry = 80;
	optional EggHatchTelemetry egg_hatch_telemetry = 81;
	optional PushGatewayTelemetry push_gateway_telemetry = 82;
	optional PushGatewayUpstreamErrorTelemetry push_gateway_upstream_error_telemetry = 83;
	optional UsernameSuggestionTelemetry username_suggestion_telemetry = 84;
	optional TutorialTelemetry tutorial_telemetry = 85;
	optional PostcardBookTelemetry postcard_book_telemetry = 86;
	optional SocialInboxLatencyTelemetry social_inbox_telemetry = 87;
	optional HomeWidgetTelemetry home_widget_telemetry = 93;
	optional PokemonLoadDelay pokemon_load_delay = 94;
	optional AccountDeletionInitiatedTelemetry account_deletion_initiated_telemetry = 95;
	optional FortUpdateLatencyTelemetry fort_update_latency_telemetry = 96;
	optional GetMapObjectsTriggerTelemetry get_map_objects_trigger_telemetry = 97;
	optional UpdateCombatResponseTimeTelemetry update_combat_response_time_telemetry = 98;
	optional OpenCampfireMapTelemetry open_campfire_map_telemetry = 99;

	optional ServerData server_data = 1001;
	optional CommonFilterProto common_filters = 1002;
}

message HomeWidgetTelemetry {
	enum Status {
		UNUSED = 0;
		IN_USE = 1;
		PAUSED = 2;
	}

	optional WidgetsProto.WidgetType widget_type = 1;
	optional Status status = 2;
	optional Platform platform = 3;
}

message IapItemCategoryDisplayProto {
	optional HoloIapItemCategory category = 1;
	optional string name = 2;
	optional bool hidden = 3;
	optional int32 sort_order = 4;
	optional bool banner_enabled = 5;
	optional string banner_title = 6;
	optional string image_url = 7;
	optional string description = 8;
	optional int32 display_rows = 9;
	optional string subcategory = 10;
}

message IapItemDisplayProto {
	optional string sku = 1;
	optional HoloIapItemCategory category = 2;
	optional int32 sort_order = 3;
	optional bool hidden = 6;
	optional bool sale = 7;
	optional string sprite_id = 8;
	optional string title = 9;
	optional string description = 10;
	optional string sku_enable_time = 11;
	optional string sku_disable_time = 12;
	optional int64 sku_enable_time_utc_ms = 13;
	optional int64 sku_disable_time_utc_ms = 14;
	repeated string subcategories = 15;
	optional string image_url = 16;
}

message IapSettingsProto {
	optional int32 daily_bonus_coins = 1;
	repeated int32 daily_defender_bonus_per_pokemon = 2;
	optional int32 daily_defender_bonus_max_defenders = 3;
	repeated string daily_defender_bonus_currency = 4;
	optional int64 min_time_between_claims_ms = 5;
	optional bool daily_bonus_enabled = 6;
	optional bool daily_defender_bonus_enabled = 7;
}

message IdfaSettingsProto {
	optional bool optin_enabled = 1;
}

message ImageGalleryTelemetry {
	enum ImageGalleryEventId {
		UNKNOWN = 0;
		ENTER_IMAGE_GALLERY = 1;
		ENTER_IMAGE_DETAILS_PAGE = 2;
		VOTE_FROM_MAIN_GALLERY_PAGE = 3;
		UNVOTE_FROM_MAIN_GALLERY_PAGE = 4;
		VOTE_FROM_IMAGE_DETAILS_PAGE = 5;
		UNVOTE_FROM_IMAGE_DETAILS_PAGE = 6;
		ENTER_IMAGE_EDIT_FROM_GALLERY = 7;
	}

	optional ImageGalleryEventId image_gallery_telemetry_id = 1;
}

message ImageTextCreativeProto {
	optional string name = 1;
	optional string title = 2;
	optional string description = 3;
	optional string preview_image_url = 4;
	optional string fullscreen_image_url = 5;
	optional string cta_link = 6;
	optional string web_ar_url = 7;
}

message ImpressionTrackingSettingsProto {
	optional bool ob_bool_1 = 1;
	optional bool ob_bool_2 = 2;
	optional bool ob_bool_3 = 3;
	optional bool ob_bool_4 = 4;
	optional bool ob_bool_5 = 5;
	optional bool ob_bool_6 = 6;
}

message ImpressionTrackingTag {
	optional string tag_id = 1;
	optional string base_url = 2;
	optional StaticTags static_tags = 3;
	optional ServerTags server_tags = 4;
	optional ClientTags client_tags = 5;

	message StaticTags {
		optional string key = 1;
		optional string value = 2;
	}
	message ServerTags {
		optional string key = 1;
		optional string value = 2;
	}
	message ClientTags {
		optional string key = 1;
		optional string value = 2;
	}
}

message InAppPurchaseSubscriptionInfo {
	enum NativeStoreVendor {
		UNKNOWN_STORE = 0;
		GOOGLE = 1;
		APPLE = 2;
		DESKTOP = 3;
	}

	enum PaymentState {
		UNKNOWN_STATE = 0;
		SUCCESS = 1;
		BILLING_ISSUE = 2;
	}

	enum State {
		UNKNOWN = 0;
		ACTIVE = 1;
		CANCELLED = 2;
		EXPIRED = 3;
		GRACE_PERIOD = 4;
		FREE_TRIAL = 5;
		PENDING_PURCHASE = 6;
		REVOKED = 7;
		ON_HOLD = 8;
	}

	message PurchasePeriod {
		optional int64 subscription_end_time_ms = 1;
		optional int64 receipt_timestamp_ms = 2;
		optional string receipt = 3;
		optional SkuStorePrice store_price = 4;
		optional string country_code = 5;
	}

	optional string subscription_id = 1;
	optional string sku_id = 2;
	repeated PurchasePeriod purchase_period = 3;
	optional int64 last_notification_time_ms = 4;
	optional string lookup_id = 5;
}

message InGamePurchaseDetails {
	optional string ingame_type = 1;
	optional int64 ingame_price = 2;
	optional int64 remaining_ingame_balance = 3;
}

message IncenseAttributesProto {
	optional int32 incense_lifetime_seconds = 1;
	repeated HoloPokemonType pokemon_type = 2;
	optional float pokemon_incense_type_probability = 3;
	optional int32 standing_time_between_encounters_sec = 4;
	optional int32 moving_time_between_encounter_sec = 5;
	optional int32 distance_required_for_shorter_interval_meters = 6;
	optional int32 pokemon_attracted_length_sec = 7;
	repeated SpawnTablePokemonProto spawn_table = 8;
	optional float spawn_table_probability = 9;
}

message IncenseEncounterOutProto {
	enum Result {
		INCENSE_ENCOUNTER_UNKNOWN = 0;
		INCENSE_ENCOUNTER_SUCCESS = 1;
		INCENSE_ENCOUNTER_NOT_AVAILABLE = 2;
		POKEMON_INVENTORY_FULL = 3;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional int32 arplus_attempts_until_flee = 5;
}

message IncenseEncounterProto {
	optional int64 encounter_id = 1;
	optional string encounter_location = 2;
}

message IncidentGlobalSettingsProto {
	optional int32 min_player_level = 1;
	optional int32 min_player_level_for_v2 = 2;
}

message IncidentLookupProto {
	optional string incident_id = 1;
	optional string fort_id = 2;
	optional double fort_lat = 3;
	optional double fort_lng = 4;
	optional EnumWrapper.InvasionContext context = 5;
}

message IncidentPrioritySettingsProto {
	message IncidentPriority {
		optional int32 priority = 1;
		optional IncidentDisplayType display_type = 2;
		repeated HoloBadgeType one_of_badge_types = 3;
	}

	repeated IncidentPriority incident_priority = 1;
}

message IncidentRewardProto {
	optional string invasion_spawn_group_template_id = 1;
}

message IncidentTicketAttributesProto {
	optional bool ignore_full_inventory = 1;
	optional int32 upgrade_requirement_count = 2;
	optional Item upgraded_item = 3;
}

message IncidentVisibilitySettingsProto {
	repeated EnumWrapper.InvasionCharacter visibility_character = 1;
}

message IncomingFriendInviteDisplayProto {
	optional IncomingFriendInviteProto invite = 1;
	optional PlayerSummaryProto player = 2;
}

message IncomingFriendInviteProto {
	enum Status {
		UNSET = 0;
		PENDING = 1;
		DECLINED = 2;
		CANCELLED = 3;
	}

	optional Status status = 1;
	optional string player_id = 2;
	optional int64 created_ms = 3;
	optional string full_name = 5;
	optional string nia_account_id = 7;
}

message InputSettingsProto {
	optional bool enable_frame_independent_spin = 1;
	optional int32 milliseconds_processed_spin_force = 2;
	optional float spin_speed_multiplier = 3;
}

message InternalAuthProto {
	optional string email = 1;
	optional string player_id = 2;
	optional string app_id = 3;
	optional string key = 4;
}

message InvasionAvailabilitySettingsProto {
	enum InvasionAvailabilitySettingsId {
		INVASION_AVAILABILITY_SETTINGS_UNSET = 0;
		INVASION_AVAILABILITY_SETTINGS_MONDAY = 1;
		INVASION_AVAILABILITY_SETTINGS_TUESDAY = 2;
		INVASION_AVAILABILITY_SETTINGS_WEDNESDAY = 3;
		INVASION_AVAILABILITY_SETTINGS_THURSDAY = 4;
		INVASION_AVAILABILITY_SETTINGS_FRIDAY = 5;
		INVASION_AVAILABILITY_SETTINGS_SATURDAY = 6;
		INVASION_AVAILABILITY_SETTINGS_SUNDAY = 7;
	}

	optional int64 availability_start_minute = 1;
	optional int64 availability_end_minute = 2;
}

message InvasionBattleResponseUpdateProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional InvasionStatus.Status status = 3;
}

message InvasionBattleUpdateProto {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
	optional bool ob_bool = 3;
	optional UpdateInvasionBattleProto.UpdateType update_type = 4;
	optional uint32 ob_uint32 = 5;
}

message InvasionCreateDetail {
	optional EnumWrapper.InvasionCharacter origin = 1;
}

message InvasionEncounterOutProto {
	message PremierBallsDisplayProto {
		optional int32 base_num_balls = 1;
		optional int32 pokemon_purified_num_balls = 2;
		optional int32 grunts_defeated_num_balls = 3;
		optional int32 pokemon_remaining_num_balls = 4;
	}

	optional InvasionStatus.Status status = 1;
	optional PokemonProto encounter_pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional int32 throws_remaining = 5;
	optional fixed64 encounter_id = 6;
	optional string spawn_point_guid = 7;
	optional PremierBallsDisplayProto balls_display = 8;
}

message InvasionEncounterProto {
	optional IncidentLookupProto incident_lookup = 1;
	optional int32 step = 2;
}

message InvasionFinishedDisplayProto {
	optional EnumWrapper.PokestopStyle style = 1;
}

message InvasionNpcDisplaySettingsProto {
	optional string trainer_name = 1;
	optional PlayerAvatarProto avatar = 2;
	optional string trainer_title = 3;
	optional string trainer_quote = 4;
	optional string icon_url = 5;
	optional string backdrop_image_bundle = 6;
	optional string model_name = 7;
	optional string tutorial_on_loss_string = 8;
	optional bool is_male = 9;
	optional string party_selection_music = 10;
	optional string combat_music = 11;
}

message InvasionOpenCombatSessionDataProto {
	optional int32 ob_int32_1 = 1;
	optional CombatType type = 2;
	repeated int32 ob_list_int32 = 3;
	optional uint32 ob_uint32 = 4;
	optional int32 ob_int32_2 = 5;
}

message InvasionOpenCombatSessionResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional InvasionStatus.Status result = 3;
	optional ObCommunWebCombatStateProto ob_commun_web_combat_state = 4;
}

message InvasionStatus {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
		ERROR_FORT_NOT_FOUND = 3;
		ERROR_INCIDENT_NOT_FOUND = 4;
		ERROR_STEP_ALREADY_COMPLETED = 5;
		ERROR_WRONG_STEP = 6;
		ERROR_PLAYER_BELOW_MIN_LEVEL = 7;
		ERROR_INCIDENT_EXPIRED = 8;
		ERROR_MISSING_INCIDENT_TICKET = 9;
		ERROR_ENCOUNTER_POKEMON_INVENTORY_FULL = 10;
		ERROR_PLAYER_BELOW_V2_MIN_LEVEL = 11;
		ERROR_RETRY = 12;
		ERROR_INVALID_HEALTH_UPDATES = 20;
		ERROR_ATTACKING_POKEMON_INVALID = 30;
	}

	optional Status status = 1;
}

message InvasionTelemetry {
	optional InvasionTelemetryIds invasion_telemetry_id = 1;
	optional EnumWrapper.InvasionCharacter npc_id = 2;
	optional bool battle_success = 3;
	optional int32 post_battle_friendly_remaining = 4;
	optional int32 post_battle_enemy_remaining = 5;
	optional int32 encounter_pokemon = 6;
	optional bool encounter_success = 7;
	optional string invasion_id = 8;
	optional bool player_tapped_npc = 9;
	optional string radar = 10;
	optional bool curfew = 11;
	optional float duration = 12;
	optional float distance = 13;
	optional EnumWrapper.InvasionContext invasion_context = 14;
	optional RocketBalloonDisplayProto.BalloonType balloon_type = 15;
}

message InvasionVictoryLogEntry {
	optional LootProto rewards = 1;
	optional EnumWrapper.InvasionCharacter invasion_npc = 2;
}

message InventoryDeltaProto {
	optional int64 original_timestamp = 1;
	optional int64 new_timestamp = 2;
	repeated InventoryItemProto inventory_item = 3;
}

message InventoryItemProto {
	optional HoloInventoryKeyProto deleted_item_key = 2;
	optional HoloInventoryItemProto inventory_item_data = 3;

	optional int64 modified_timestamp = 1;
}

message InventoryProto {
	repeated InventoryItemProto inventory_item = 1;
}

message InventorySettingsProto {
	optional int32 max_pokemon = 1;
	optional int32 max_bag_items = 2;
	optional int32 base_pokemon = 3;
	optional int32 base_bag_items = 4;
	optional int32 base_eggs = 5;
	optional int32 max_team_changes = 6;
	optional int64 team_change_item_reset_period_in_days = 7;
	optional int64 max_item_boost_duration_ms = 8;
	optional int32 default_sticker_max_count = 9;
	optional bool enable_eggs_not_inventory = 10;
	optional int32 special_egg_overflow_spots = 11;
	optional bool enable_overflow_spot_sliding = 12;
	optional bool enable_raid_pass_overflow = 13;
	optional int32 base_postcard_storage = 14;
	optional int32 max_postcard_storage = 15;
}

message InventoryUpgradeAttributesProto {
	optional int32 additional_storage = 1;
	optional InventoryUpgradeType upgrade_type = 2;
}

message InventoryUpgradeProto {
	optional Item item = 1;
	optional InventoryUpgradeType upgrade_type = 2;
	optional int32 additional_storage = 3;
}

message InventoryUpgradesProto {
	repeated InventoryUpgradeProto inventory_upgrade = 1;
}

message InviteFacebookFriendOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
		ERROR_PLAYER_OUTBOX_FULL = 4;
		ERROR_PLAYER_INBOX_FULL = 5;
		ERROR_SENDER_HAS_MAX_FRIENDS = 6;
		ERROR_RECEIVER_HAS_MAX_FRIENDS = 7;
		ERROR_ALREADY_A_FRIEND = 8;
		ERROR_INVITE_ALREADY_SENT = 9;
		ERROR_INVITE_ALREADY_RECEIVED = 10;
		ERROR_CANNOT_SEND_INVITES_TO_YOURSELF = 11;
		ERROR_FRIEND_CACHE_EXPIRED = 12;
		ERROR_FRIEND_NOT_CACHED = 13;
		ERROR_INVALID_SENDER_FACEBOOK_ID = 14;
	}

	optional Result result = 1;
}

message InviteFacebookFriendProto {
	optional string fb_access_token = 1;
	optional string friend_fb_user_id = 2;
}

message InviteGameRequest {
	optional string friend_id = 1;
	optional string friend_nia_account_id = 2;
	optional string app_key = 3;
}

message InviteGameResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_NOT_FRIEND = 3;
		ERROR_EXCEED_LIMIT = 4;
		ERROR_ALREADY_SIGNED_UP = 5;
		ERROR_EMAIL_FAILED = 6;
	}

	optional Status status = 1;
}

message IosDevice {
	optional string name = 8;
	optional string manufacturer = 9;
	optional string model = 10;
	optional string hardware = 11;
	optional string software = 12;
}

message IosSourceRevision {
	optional string name = 1;
	optional string bundle = 2;
	optional string version = 3;
	optional string product = 4;
	optional string os = 5;
}

message IsMyFriendOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND_DELETED = 3;
	}

	optional Result result = 1;
	optional bool is_friend = 2;
}

message IsMyFriendProto {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message IsSkuAvailableOutProto {
	optional bool is_sku_available = 1;
}

message IsSkuAvailableProto {
	optional string sku_id = 1;
	optional bool verify_price = 2;
	optional int32 coin_cost = 3;
}

message ItemProto {
	optional Item item_id = 1;
	optional int32 count = 2;
	optional bool unseen = 3;
}

message ItemRewardProto {
	optional Item item = 1;
	optional int32 amount = 2;
}

message ItemSettingsProto {
	optional Item item_id = 1;
	optional HoloItemType item_type = 2;
	optional HoloItemCategory category = 3;
	optional float drop_freq = 4;
	optional int32 drop_trainer_level = 5;
	optional PokeBallAttributesProto pokeball = 6;
	optional PotionAttributesProto potion = 7;
	optional ReviveAttributesProto revive = 8;
	optional BattleAttributesProto battle = 9;
	optional FoodAttributesProto food = 10;
	optional InventoryUpgradeAttributesProto inventory_upgrade = 11;
	optional ExperienceBoostAttributesProto xp_boost = 12;
	optional IncenseAttributesProto incense = 13;
	optional EggIncubatorAttributesProto egg_incubator = 14;
	optional FortModifierAttributesProto fort_modifier = 15;
	optional StardustBoostAttributesProto stardust_boost = 16;
	optional IncidentTicketAttributesProto incident_ticket = 17;
	optional GlobalEventTicketAttributesProto global_event_ticket = 18;
	optional bool ignore_inventory_space = 19;
}

message ItemTelemetry {
	optional ItemUseTelemetryIds item_use_click_id = 1;
	optional Item item_id = 2;
	optional bool equipped = 3;
	optional bool from_inventory = 4;
	optional string item_id_string = 5;
}

message JoinBuddyMultiplayerSessionOutProto {
	enum Result {
		JOIN_SUCCESS = 0;
		JOIN_LOBBY_FULL = 1;
		JOIN_HOST_TOO_FAR = 2;
		JOIN_LOBBY_NOT_FOUND = 3;
		JOIN_BUDDY_NOT_SET = 4;
		JOIN_BUDDY_NOT_FOUND = 5;
		JOIN_BAD_BUDDY = 6;
		JOIN_BUDDY_V2_NOT_ENABLED = 7;
		JOIN_PLAYER_LEVEL_TOO_LOW = 8;
		JOIN_UNKNOWN_ERROR = 9;
		JOIN_U13_NO_PERMISSION = 10;
	}

	optional Result result = 1;
	optional bytes arbe_join_token = 2;
	optional int64 generation_timestamp = 3;
	optional int32 max_players = 4;
}

message JoinBuddyMultiplayerSessionProto {
	optional string plfe_session_id = 1;
}

message JoinLobbyDataProto {
	optional bool ob_join_lobby_data_bool_1 = 1;
	optional bool ob_join_lobby_data_bool_2 = 2;
	optional int32 ob_join_lobby_data_int32 = 3;
}

message JoinLobbyOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
		ERROR_RAID_UNAVAILABLE = 3;
		ERROR_RAID_COMPLETED = 4;
		ERROR_NO_AVAILABLE_LOBBIES = 5;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 6;
		ERROR_POI_INACCESSIBLE = 7;
		ERROR_GYM_LOCKOUT = 8;
		ERROR_NO_TICKET = 9;
		ERROR_NO_REMOTE_TICKET = 10;
		ERROR_NO_INVITE = 11;
		ERROR_NO_REMOTE_SLOTS_REMAINING = 12;
		ERROR_LOBBY_FULL = 13;
		ERROR_LOBBY_EXPIRED = 14;
	}

	optional Result result = 1;
	optional LobbyProto lobby = 2;
}

message JoinLobbyProto {
	optional int64 raid_seed = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
	optional bool private = 4;
	optional double player_lat_degrees = 5;
	optional double player_lng_degrees = 6;
	optional double gym_lat_degrees = 7;
	optional double gym_lng_degrees = 8;
	optional bool use_remote_pass = 9;
	optional string inviter_id = 10;
}

message JoinLobbyResponseDataProto {
	optional JoinLobbyOutProto.Result result = 1;
	repeated int32 ob_join_lobby_data_repeated_int32_1 = 2;
	optional int32 ob_join_lobby_data_int32_1 = 3;
	optional uint32 ob_join_lobby_data_uint32_1 = 4;
	optional uint32 ob_join_lobby_data_uint32_2 = 5;
	optional uint32 ob_join_lobby_data_uint32_3 = 6;
	optional uint32 ob_join_lobby_data_uint32_4 = 7;
	optional string ob_join_lobby_data_string = 8;
	optional bool ob_join_lobby_data_bool = 9;
	optional uint32 ob_join_lobby_data_uint32_5 = 10;
	optional int32 ob_join_lobby_data_int32_2 = 11;
	optional GameplayWeatherProto.WeatherCondition weather_condition = 12;
	optional int32 ob_join_lobby_data_int32_3 = 13;
	optional uint32 ob_join_lobby_data_uint32_6 = 14;
}

message JournalAddEntryProto {
	optional HashedKeyProto hashed_key = 1;
	optional int64 entry_size = 2;
}

message JournalEntryProto {
	optional JournalAddEntryProto add_entry = 1;
	optional JournalReadEntryProto read_entry = 2;
	optional JournalRemoveEntryProto remove_entry = 3;
}

message JournalReadEntryProto {
	optional HashedKeyProto hashed_key = 1;
}

message JournalRemoveEntryProto {
	optional HashedKeyProto hashed_key = 1;
}

message JournalVersionProto {
	optional int32 version = 1;
}

message KangarooSettingsProto {
	optional bool enable_kangaroo_v2 = 1;
}

message KoalaSettingsProto {
	optional string app_id = 1;
	optional bool use_sandbox = 2;
	optional bool use_koala = 3;
	optional bool ob_koala_bool = 4;
}

message Label {
	optional int32 min_zoom = 1;
	optional int32 max_zoom = 2;
	optional int32 priority = 3;
	repeated LabelContentLocalization localizations = 4;
}

message LabelContent {
	repeated LabelContentLocalization localizations = 1;
}

message LabelContentLocalization {
	optional string language = 1;
	optional string name = 2;
}

message LabelGeometry {
	optional PixelPointProto point = 1;
	optional int32 min_zoom = 2;
	optional int32 max_zoom = 3;
}

message LabelTile {
	repeated Label labels = 1;
}

message LanguageTelemetry {
	optional string selected_language = 1;
}

message Layer {
	repeated Feature features = 1;
}

message LayerRule {
	enum GmmLayerType {
		AREA = 0;
		ROAD = 1;
		BUILDING = 2;
		LINE_MESH = 3;
	}

	enum GmmRoadPriority {
		PRIORITY_NONE = 0;
		PRIORITY_TERMINAL = 1;
		PRIORITY_LOCAL = 2;
		PRIORITY_MINOR_ARTERIAL = 3;
		PRIORITY_MAJOR_ARTERIAL = 4;
		PRIORITY_SECONDARY_ROAD = 5;
		PRIORITY_PRIMARY_HIGHWAY = 6;
		PRIORITY_LIMITED_ACCESS = 7;
		PRIORITY_CONTROLLED_ACCESS = 8;
		PRIORITY_NON_TRAFFIC = 9;
	}

	repeated MaskedColor fill_colors = 1;
	repeated GmmRoadPriority road_priority = 2;
	optional uint32 road_attribute_bitfield = 3;
}

message LeagueIdMismatchDataProto {
	optional string ob_string = 1;
	optional ObCombatMismatchData.MismatchState.Type type = 2;
}

message LeaveBuddyMultiplayerSessionOutProto {
	enum Result {
		LEAVE_SUCCESS = 0;
		LEAVE_NOT_IN_LOBBY = 1;
		LEAVE_LOBBY_NOT_FOUND = 2;
		LEAVE_UNKNOWN_ERROR = 3;
	}

	optional Result result = 1;
}

message LeaveBuddyMultiplayerSessionProto {
	optional string plfe_session_id = 1;
}

message LeaveInteractionRangeTelemetry {
	optional string result = 1;
	optional string fort_id = 2;
	optional int32 fort_type = 3;
	optional int64 client_timestamp = 4;
	optional string partner_id = 5;
	optional int64 time_spent = 6;
	optional string campaign_id = 7;
}

message LeaveLobbyDataProto {
	optional int32 ob_int32 = 1;
}

message LeaveLobbyOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_RAID_UNAVAILABLE = 2;
		ERROR_LOBBY_NOT_FOUND = 3;
	}

	optional Result result = 1;
	optional LobbyProto lobby = 2;
}

message LeaveLobbyProto {
	optional int64 raid_seed = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
}

message LeaveLobbyResponseDataProto {
	optional LeaveLobbyOutProto.Result result = 1;
	optional int32 ob_int32 = 2;
	optional uint32 ob_uint32 = 3;
}

message LeavePointOfInterestTelemetry {
	optional string result = 1;
	optional string fort_id = 2;
	optional int32 fort_type = 3;
	optional int64 client_timestamp = 4;
	optional string partner_id = 5;
	optional int64 time_spent = 6;
	optional string campaign_id = 7;
}

message LevelSettingsProto {
	optional double trainer_cp_modifier = 2;
	optional double trainer_difficulty_modifier = 3;
}

message LevelUpRewardsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		AWARDED_ALREADY = 2;
	}

	optional Result result = 1;
	repeated AwardItemProto items = 2;
	repeated Item items_unlocked = 4;
	repeated string avatar_template_ids = 5;
}

message LevelUpRewardsProto {
	optional int32 level = 1;
}

message LevelUpRewardsSettingsProto {
	optional int32 level = 1;
	repeated Item items = 2;
	repeated int32 items_count = 3;
	repeated Item items_unlocked = 4;
	repeated string avatar_template_ids = 5;
}

message LeveledUpFriendsProto {
	repeated PlayerPublicProfileProto friend_profiles = 1;
	repeated FriendshipLevelDataProto friend_milestone_levels = 2;
}

message LimitedEditionPokemonEncounterRewardProto {
	optional int32 lifetime_max_count = 3;
	optional int32 per_competitive_combat_season_max_count = 4;

	optional PokemonEncounterRewardProto pokemon = 1;
	optional string identifier = 2;
}

message LimitedPurchaseSkuRecordProto {
	enum ChronoUnit {
		UNSET = 0;
		MINUTE = 1;
		HOUR = 2;
		DAY = 3;
		WEEK = 4;
		MONTH = 5;
	}

	message PurchaseProto {
		optional int32 version = 1;
		optional int32 num_purchases = 2;
		optional int64 last_purchase_ms = 4;
		optional int32 total_num_purchases = 5;
	}

	optional PURCHASES purchases = 1;

	message PURCHASES {
		optional string key = 1;
		optional PurchaseProto value = 2;
	}
}

message LimitedPurchaseSkuSettingsProto {
	optional int32 purchase_limit = 1;
	optional int32 version = 2;
	optional LimitedPurchaseSkuRecordProto.ChronoUnit chrono_unit = 3;
	optional string loot_table_id = 4;
	optional int32 reset_interval = 20;
}

message LinkLoginTelemetry {
	optional bool linked = 1;
	optional string success = 2;
	optional string error = 3;
	optional string active_auth_provider_id = 4;
	optional string provider = 5;
}

message LiquidAttribute {
	optional int64 int_value = 1;
	optional double double_value = 2;
	optional string string_value = 3;
	optional bool bool_value = 4;
}

message ListAvatarCustomizationsOutProto {
	enum Label {
		UNSET_LABEL = 0;
		DEFAULT = 1;
		OWNED = 2;
		FEATURED = 3;
		NEW = 4;
		SALE = 5;
		PURCHASABLE = 6;
		UNLOCKABLE = 7;
		VIEWED = 8;
		LOCKED_PURCHASABLE = 9;
	}

	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	message AvatarCustomization {
		optional string avatar_template_id = 1;
		repeated Label labels = 2;
	}

	optional Result result = 1;
	repeated AvatarCustomization avatar_customizations = 2;
}

message ListAvatarCustomizationsProto {
	enum Filter {
		UNSET = 0;
		ALL = 1;
		DEFAULT = 2;
		OWNED = 3;
		FEATURED = 4;
		PURCHASABLE = 5;
		UNLOCKABLE = 6;
	}

	optional PlayerAvatarType avatar_type = 1;
	repeated AvatarCustomizationProto.Slot slot = 2;
	repeated Filter filters = 3;
	optional int32 start = 4;
	optional int32 limit = 5;
}

message ListFriendsRequest {
	optional SocialClientFeatures.CrossGameSocialClientSettingsProto.FeatureType feature = 1;
}

message ListFriendsResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FEATURE_DISABLED = 3;
	}

	message FriendSummaryProto {
		optional string player_id = 1;
		optional bool is_calling_app_friend = 2;
		optional GetFriendsListOutProto.FriendProto calling_game_data = 3;
		optional ProfileSummaryProto profile = 4;
		optional PlayerStatusSummaryProto player_status = 5;
		optional SocialV2Enum.InvitationStatus invitation_status = 6;
		optional string nia_account_id = 7;
	}

	message PlayerStatusSummaryProto {
		enum PlayerStatusResult {
			UNSET = 0;
			SUCCESS = 1;
			ERROR_UNKNOWN = 2;
			ERROR_STATUS_UNKNOWN = 3;
			ERROR_STALE_DATA = 4;
		}

		optional PlayerStatusResult result = 1;
		optional SocialV2Enum.OnlineStatus online_status = 2;
		optional string last_played_app_key = 3;
	}

	message ProfileSummaryProto {
		optional string name = 1;
		optional string nickname = 2;
	}

	optional Result result = 1;
}

message ListGymBadgesOutProto {
	repeated AwardedGymBadge gym_badge = 1;
}

message ListGymBadgesProto {
}

message ListLoginActionOutProto {
	optional bool success = 1;
	repeated LoginDetail login_detail = 2;
}

message ListRouteBadgesOutProto {
	repeated RouteBadgeListEntry route_badges = 1;
}

message ListRouteBadgesProto {
}

message LoadingScreenProto {
	optional string url = 1;
	optional int64 display_after_timestamp_ms = 2;
	optional ColorSettingS color_settings = 3;

	message ColorSettingS {
		optional string key = 1;
		optional string value = 2;
	}
}

message LobbyClientSettingsProto {
	optional int64 lobby_refresh_interval_ms = 1;
}

message LobbyPokemonProto {
	optional int64 id = 1;
	optional HoloPokemonId pokedex_id = 2;
	optional int32 cp = 3;
	optional float percent_health = 4;
}

message LobbyProto {
	repeated int32 lobby_id = 1;
	repeated BattleParticipantProto players = 2;
	optional int64 player_join_end_ms = 3;
	optional int64 pokemon_selection_end_ms = 4;
	optional int64 raid_battle_start_ms = 5;
	optional int64 raid_battle_end_ms = 6;
	optional string raid_battle_id = 8;
	optional string owner_nickname = 9;
	optional bool private = 10;
	optional int64 creation_ms = 11;
	optional int32 battle_plfe_instance = 12;
	optional GameplayWeatherProto.WeatherCondition weather_condition = 13;
	repeated string invited_player_ids = 14;
}

message LobbyVisibilityDataProto {
	optional int32 ob_int32 = 1;
}

message LobbyVisibilityResponseDataProto {
	optional SetLobbyVisibilityOutProto.Result result = 1;
	optional int32 ob_int32 = 2;
	optional uint32 ob_uint32 = 3;
}

message LocationE6Proto {
	optional int32 latitude_e6 = 1;
	optional int32 longitude_e6 = 2;
}

message LocationPingOutProto {
}

message LocationPingProto {
	enum PingReason {
		UNSET = 0;
		ENTRANCE_EVENT = 1;
		EXIT_EVENT = 2;
		DWELL_EVENT = 3;
		VISIT_EVENT = 4;
		FITNESS_WAKEUP = 5;
		OTHER_WAKEUP = 6;
	}

	optional string geofence_identifier = 1;
	optional PingReason reason = 2;
}

message LoginActionTelemetry {
	optional LoginActionTelemetryIds login_action_id = 1;
	optional bool first_time = 2;
	optional bool success = 3;
	optional bool intent_existing = 4;
	optional string error = 5;
	optional string auth_status = 6;
}

message LoginDetail {
	optional IdentityProvider identity_provider = 1;
	optional string email = 2;
	optional string auth_provider_id = 3;
}

message LoginSettingsProto {
	optional bool enable_multi_login_linking = 1;
}

message LootItemProto {
	optional Item item = 1;
	optional bool stardust = 2;
	optional bool pokecoin = 3;
	optional HoloPokemonId pokemon_candy = 4;
	optional bool experience = 6;
	optional PokemonProto pokemon_egg = 7;
	optional string avatar_template_id = 8;
	optional string sticker_id = 9;
	optional HoloPokemonId mega_energy_pokemon_id = 10;
	optional HoloPokemonId xl_candy = 11;

	optional int32 count = 5;
}

message LootProto {
	repeated LootItemProto loot_item = 1;
}

message LuckyPokemonSettingsProto {
	optional float power_up_stardust_discount_percent = 1;
}

message MapArea {
	optional string description = 1;
	optional int32 epoch = 2;
	optional string map_provider = 3;
	repeated BoundingRect bounding_rect = 4;
	optional string minimum_client_version = 5;
}

message MapBuddySettingsProto {
	optional int32 for_buddy_group_number = 1;
	optional float target_offset_min = 2;
	optional float target_offset_max = 3;
	optional float leash_distance = 4;
	optional float max_seconds_to_idle = 5;
	optional float max_rotation_speed = 6;
	optional float walk_threshold = 7;
	optional float run_threshold = 8;
	optional bool should_glide = 9;
	optional float glide_smooth_time = 10;
	optional float glide_max_speed = 11;
}

message MapCompositionRoot {
	repeated MapArea map_area = 1;
	repeated MapProvider map_provider = 2;
	repeated NamedMapSettings named_map_settings = 3;
}

message MapDisplaySettingsProto {
	enum MapEffect {
		EFFECT_NONE = 0;
		EFFECT_CONFETTI_BASIC = 1;
		EFFECT_CONFETTI_FIRE = 2;
		EFFECT_CONFETTI_WATER = 3;
		EFFECT_CONFETTI_GRASS = 4;
		EFFECT_CONFETTI_RAID_BATTLE = 5;
		EFFECT_CONFETTI_FRIENDSHIP = 6;
		EFFECT_CONFETTI_ROCKET = 7;
		EFFECT_FIREWORKS_PLAIN = 8;
		EFFECT_CONFETTI_FLOWER = 9;
		EFFECT_CONFETTI_PLAINS = 10;
		EFFECT_CONFETTI_CITY = 11;
		EFFECT_CONFETTI_TUNDRA = 12;
		EFFECT_CONFETTI_RAINFOREST = 13;
	}

	enum MusicType {
		BGM_UNSET = 0;
		BGM_EVENT = 101;
		BGM_HALLOWEEN = 200;
		BGM_GO_TOUR_00 = 201;
		BGM_GO_TOUR_01 = 202;
		BGM_GO_TOUR_02 = 203;
		BGM_GO_TOUR_03 = 204;
		BGM_GO_TOUR_04 = 205;
		BGM_GO_TOUR_05 = 206;
		BGM_GO_TOUR_06 = 207;
		BGM_GO_TOUR_07 = 208;
		BGM_GO_TOUR_08 = 209;
		BGM_GO_TOUR_09 = 210;
		BGM_TEAM_ROCKET_DEFAULT = 300;
	}

	optional MapEffect map_effect = 1;
	optional string research_icon_url = 2;
	optional MusicType bgm = 3;
	optional bool show_enhanced_sky = 4;
	optional string event_skydome_1 = 5;
	optional string event_skydome_2 = 6;
	optional string fx_map_visual_effect = 7;
	optional bool ob_map_display_bool = 8;
}

message MapEventsTelemetry {
	optional MapEventsTelemetryIds map_event_click_id = 1;
	optional string fort_id = 2;
	repeated int32 guard_pokemon_level = 3;
	optional Team team = 4;
	optional bool is_player_in_range = 5;
}

message MapObjectsInteractionRangeSettings {
	optional double interaction_range_meters = 1;
	optional double far_interaction_range_meters = 2;
	optional double remote_interaction_range_meters = 3;
}

message MapPokemonProto {
	optional string spawnpoint_id = 1;
	optional fixed64 encounter_id = 2;
	optional int32 pokedex_type_id = 3;
	optional int64 expiration_time_ms = 4;
	optional double latitude = 5;
	optional double longitude = 6;
	optional PokemonDisplayProto pokemon_display = 7;
}

message MapProvider {
	enum MapType {
		UNSET = 0;
		GMM = 1;
		OSM = 2;
		BLANK = 3;
		GMM_BUNDLE = 4;
		NIANTIC_BUNDLE = 5;
	}

	optional GmmSettings gmm_settings = 4;
	optional string settings_name = 5;

	message BundleZoomRange {
		optional int32 min_zoom = 1;
		optional int32 max_zoom = 2;
		optional int32 request_zoom_offset = 3;
	}

	optional string name = 1;
	optional string base_url = 2;
	optional string query_format = 3;
	optional MapType map_type = 6;
	optional bool hide_attribution = 7;
	optional int32 min_tile_level = 8;
	optional int32 max_tile_level = 9;
	repeated BundleZoomRange bundle_zoom_range = 10;
}

message MapSettingsProto {
	optional double pokemon_visible_range = 1;
	optional double poke_nav_range_meters = 2;
	optional double encounter_range_meters = 3;
	optional float get_map_objects_min_refresh_seconds = 4;
	optional float get_map_objects_max_refresh_seconds = 5;
	optional float get_map_objects_min_distance_meters = 6;
	optional string google_maps_api_key = 7;
	optional int32 min_nearby_hide_sightings = 8;
	optional bool enable_special_weather = 9;
	optional float special_weather_probability = 10;
	optional string google_maps_client_id = 11;
	optional bool enable_encounter_v2 = 12;
}

message MapTile {
	optional int32 zoom = 1;
	optional int32 x = 2;
	optional int32 y = 3;
	repeated Layer layers = 4;
}

message MapTileBundle {
	optional int32 format_version = 1;
	optional int32 tile_zoom = 2;
	optional int32 bundle_zoom = 3;
	optional int32 bundle_x = 4;
	optional int32 bundle_y = 5;
	optional int32 epoch = 6;
	repeated MapTile tiles = 7;
}

message MapTileDataProto {
	optional MapTileProto map_tile = 1;
	optional MapCompositionRoot tile_data = 2;
	optional LabelTile label_data = 3;
}

message MapTileProto {
	enum TextSizeEnum {
		TEXT_SIZE_ENUM_UNSET = 0;
		SMALL = 1;
		MEDIUM = 2;
		LARGE = 3;
	}

	enum TileTypeEnum {
		TILE_TYPE_ENUM_UNSET = 0;
		MAP_ATLAS = 2;
		SATELLITE = 3;
		TRAFFIC = 4;
		GIF_ATLAS = 5;
		HYBRID = 6;
		TERRAIN = 7;
		CLICKABLE_LAYER = 8;
		STREET_VIEW = 9;
		VECTOR_ATLAS = 10;
		ROAD_GRAPH = 11;
		TERRAIN_NO_LABELS = 12;
		VECTOR_TRANSIT = 13;
		INDOOR = 14;
		LABELS_ONLY = 15;
		PERSONALIZED_SMARTMAPS = 16;
	}

	optional uint32 tile_variant = 1;
	optional int32 tile_index_x = 2;
	optional int32 tile_index_y = 3;
	optional int32 zoom_level = 4;
	optional string indoor_level_id = 5;
	optional int32 pertile_epoch = 6;
}

message MarkMilestoneAsViewedOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_DISABLED = 2;
		ERROR_MILESTONE_NOT_FOUND = 3;
	}

	optional Status status = 1;
}

message MarkMilestoneAsViewedProto {
	message MilestoneLookupProto {
		optional string player_id = 1;
		optional string milestone_id = 2;
	}

	repeated MilestoneLookupProto referrer_milestones_to_mark = 1;
	repeated MilestoneLookupProto referee_milestones_to_mark = 2;
}

message MarkReadNewsArticleOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_NEWS_FOUND = 2;
	}

	optional Result result = 1;
}

message MarkReadNewsArticleProto {
	repeated string news_ids = 1;
}

message MarkTutorialCompleteOutProto {
	optional bool success = 1;
	optional ClientPlayerProto player = 2;
}

message MarkTutorialCompleteProto {
	repeated TutorialCompletion tutorial_complete = 1;
	optional bool send_marketing_emails = 2;
	optional bool send_push_notifications = 3;
}

message MaskedColor {
	optional uint32 color_argb = 1;
	optional uint32 color_mask_argb = 2;
}

message MegaEvoGlobalSettingsProto {
	optional bool enabled = 1;
	optional bool enable_friends_list_mega_info = 2;
	optional bool ob_mega_evo_bool_1 = 3;
	optional bool ob_mega_evo_bool_2 = 4;
}

message MegaEvoInfoProto {
	optional HoloPokemonId pokedex_id = 1;
	optional HoloTemporaryEvolutionId temp_evo_id = 2;
	optional int64 evo_expiration_time_ms = 3;
}

message MegaEvoSettingsProto {
	optional int64 evolution_length_ms = 1;
	optional float attack_boost_from_mega_different_type = 2;
	optional float attack_boost_from_mega_same_type = 3;
	optional int32 max_candy_hoard_size = 4;
	optional bool enable_buddy_walking_mega_energy_award = 5;
	optional int32 active_mega_bonus_catch_candy = 6;
	optional bool ob_mega_evo_bool_1 = 7;
	optional bool ob_mega_evo_bool_2 = 8;
	optional int32 max_mega_levels = 9;
	optional int32 ob_mega_evo_int32_2 = 10;
	optional bool ob_mega_evo_bool_3 = 11;
}

message MegaEvolvePokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILED_POKEMON_MISSING = 2;
		FAILED_INSUFFICIENT_RESOURCES = 3;
		FAILED_POKEMON_CANNOT_EVOLVE = 4;
		FAILED_POKEMON_IS_DEPLOYED = 5;
		FAILED_INVALID_ITEM_REQUIREMENT = 6;
		FAILED_POKEMON_ALREADY_MEGA_EVOLVED = 7;
	}

	optional Result result = 1;
	optional PokemonProto evolved_pokemon = 2;
	optional int32 exp_awarded = 3;
	optional ObMegaEvolvePokemonProtoField ob_mega_evole_pokemon = 4;
}

message MegaEvolvePokemonProto {
	optional fixed64 pokemon_id = 1;
	optional HoloTemporaryEvolutionId temp_evo_id = 2;
}

message MegaEvolvePokemonSpeciesProto {
	optional int32 energy_count = 1;
	optional int32 pokemon_species_id = 2;
}

message MegaLevelCooldownSettingsProto {
	optional int64 duration_ms = 1;
	optional int32 max_mega_candy_required = 2;
	optional int32 ob_int32_2 = 3;
	optional int32 ob_int32_3 = 4;
}

message MegaLevelPerksProto {
	optional float mega_perk_attack_boost_from_mega_different_type = 1;
	optional float mega_perk_attack_boost_from_mega_same_type = 2;
	optional int32 mega_perk_active_mega_bonus_catch_candy = 3;
	optional int32 mega_perk_xp_catch_bonus = 4;
	optional float mega_perk_xl_candy_bonus_chance = 5;
}

message MegaLevelSettingsProto {
	optional int32 level = 1;
	optional HoloPokemonId pokemon_id = 2;
	optional MegaLevelUnlockSettingsProto mega_level_unlock_settings = 3;
	optional MegaLevelCooldownSettingsProto mega_level_cooldown_settings = 4;
	optional MegaLevelPerksProto mega_level_perks = 5;
}

message MegaLevelUnlockSettingsProto {
	optional int32 mega_evolutions_required_to_unlock = 1;
	optional int32 ob_int32_2 = 2;
	optional int32 ob_int32_3 = 3;
}

message MementoAttributesProto {
	optional PostcardDisplayProto postcard_display = 5;

	optional MementoType memento_type = 1;
	optional double latitude = 2;
	optional double longitude = 3;
	optional int64 added_timestamp_ms = 4;
	optional string memento_hash = 6;
}

message MetricData {
	optional int64 long_value = 2;
	optional double double_value = 3;
	optional bool boolean_value = 4;
	optional Distribution distribution = 5;

	enum Kind {
		UNSPECIFIED = 0;
		GAUGE = 1;
		DELTA = 2;
		CUMULATIVE = 3;
	}

	optional TelemetryCommon common_telemetry = 1;
	optional Kind metric_kind = 6;
}

message MiniCollectionBadgeData {
	repeated MiniCollectionBadgeEvent event = 1;
}

message MiniCollectionBadgeEvent {
	optional string event_id = 1;
	optional int64 completed_timestamp = 2;
}

message MiniCollectionPokemon {
	enum CollectType {
		CATCH = 0;
		TRADE = 1;
		EVOLVE = 2;
		CATCH_FROM_RAID = 3;
	}

	optional HoloPokemonId pokedex_id = 1;
	optional PokemonDisplayProto display = 2;
	optional bool caught = 3;
	optional CollectType collection_type = 4;
	optional bool require_alignment_to_match = 5;
}

message MiniCollectionProto {
	repeated MiniCollectionPokemon pokemon = 1;
	optional bool completed = 2;
}

message MiniCollectionSectionProto {
	optional string quest_id = 1;
}

message MissingTranslationTelemetry {
	optional string ob_missing_translation_telemetry_1 = 1;
	optional string ob_missing_translation_telemetry_2 = 2;
}

message MonodepthDownloadTelemetry {
	optional bool downloaded_package = 1;
	optional bool skipped_package = 2;
	optional string model_downloaded = 3;
}

message MonodepthSettingsProto {
	optional bool enable_occlusions = 1;
	optional bool occlusions_default_on = 2;
	optional bool occlusions_toggle_visible = 3;
	optional bool enable_ground_suppression = 4;
	optional float min_ground_suppression_thresh = 5;
	optional uint32 suppression_channel_id = 6;
	optional string suppression_channel_name = 7;
}

message MotivatedPokemonProto {
	optional PokemonProto pokemon = 1;
	optional int64 deploy_ms = 2;
	optional int32 cp_when_deployed = 3;
	optional double motivation_now = 4;
	optional int32 cp_now = 5;
	optional float berry_value = 6;
	optional int64 feed_cooldown_duration_millis = 7;
	repeated FoodValue food_value = 8;
}

message MoveSequenceSettingsProto {
	repeated string sequence = 1;
}

message MoveSettingsProto {
	optional HoloPokemonMove movement_id = 1;
	optional int32 animation_id = 2;
	optional HoloPokemonType pokemon_type = 3;
	optional float power = 4;
	optional float accuracy_chance = 5;
	optional float critical_chance = 6;
	optional float heal_scalar = 7;
	optional float stamina_loss_scalar = 8;
	optional int32 trainer_level_min = 9;
	optional int32 trainer_level_max = 10;
	optional string vfx_name = 11;
	optional int32 duration_ms = 12;
	optional int32 damage_window_start_ms = 13;
	optional int32 damage_window_end_ms = 14;
	optional int32 energy_delta = 15;
	optional bool is_locked = 16;
}

message MultiPartQuestProto {
	repeated QuestProto sub_quests = 1;
}

message MusicSettings {
	optional string special_event_music_1 = 1;
	optional string map_music_override = 2;
	optional string event_music_3 = 3;
	optional string event_music_4 = 4;
	optional string second_special_event_music_choice = 5;
	optional bool ob_bool = 6;
	optional string ob_string_1 = 7;
	optional string ob_string_2 = 8;
}

message NamedMapSettings {
	optional string name = 1;
	optional GmmSettings gmm_settings = 2;
}

message NearbyPokemonProto {
	optional int32 pokedex_number = 1;
	optional float distance_meters = 2;
	optional fixed64 encounter_id = 3;
	optional string fort_id = 4;
	optional string fort_image_url = 5;
	optional PokemonDisplayProto pokemon_display = 6;
}

message NetworkTelemetry {
	optional string network_type = 1;
}

message NewInboxMessage {
}

message NewsArticleProto {
	enum NewsTemplate {
		UNSET = 0;
		DEFAULT_TEMPLATE = 1;
	}

	optional string id = 1;
	repeated string image_url = 2;
	optional string header_key = 3;
	optional string subheader_key = 4;
	optional string main_text_key = 5;
	optional int64 timestamp = 6;
	optional NewsTemplate template = 7;
	optional bool enabled = 8;
	optional bool article_read = 9;
}

message NewsFeedClientSettings {
	optional bool is_news_feed_polling_enabled = 1;
	optional int32 get_news_feed_polling_rate_minutes = 2;
}

message NewsGlobalSettingsProto {
	optional bool enable_news = 1;
}

message NewsPageTelemetry {
	optional NewsPageTelemetryIds news_page_click_id = 1;
}

message NewsProto {
	optional string news_bundle_id = 1;
	repeated string exclusive_countries = 2;
}

message NewsSettingProto {
	repeated NewsProto news_protos = 1;
}

message NewsfeedPost {
	enum NewsfeedChannel {
		NOT_DEFINED = 0;
		NEWSFEED_MESSAGE_CHANNEL = 1;
		IN_APP_MESSAGE_CHANNEL = 2;
	}

	message PreviewMetadata {
		optional ATTRIBUTES attributes = 1;
		optional string player_hashed_id = 2;
		optional string rendered_title = 3;
		optional string rendered_preview_text = 4;
		optional string rendered_post_content = 5;

		message ATTRIBUTES {
			optional string key = 1;
			optional string value = 2;
		}
	}

	optional string title = 1;
	optional string preview_text = 2;
	optional string thumbnail_image_url = 3;
	repeated NewsfeedChannel newsfeed_channel = 4;
	optional string post_content = 5;
	optional int64 start_timestamp = 21;
	optional int64 expiration_timestamp = 22;
	optional int64 creation_timestamp = 23;
	optional bool priority_flag = 51;
	optional bool read_flag = 52;
	optional PreviewMetadata preview_metadata = 100;
}

message NewsfeedPostRecord {
	optional NewsfeedPost newsfeed_post = 1;
	optional string newsfeed_post_id = 2;
}

message NianticProfileTelemetry {
	enum NianticProfileTelemetryIds {
		UNDEFINED = 0;
		OPEN_MY_PROFILE = 1;
		OPEN_FRIEND_PROFILE = 2;
	}

	optional NianticProfileTelemetryIds niantic_profile_telemetry_id = 1;
}

message NianticPublicSharedLoginTokenSettings {
	message AppSettings {
		message TokenConsumerSettings {
			optional bool enabled = 1;
			repeated string allow_originating_auth_provider_id = 2;
			repeated string allow_originating_app_key = 3;
		}

		message TokenProducerSettings {
			optional bool enabled = 1;
			repeated string allow_auth_provider_id = 2;
		}

		optional string app_key = 1;
		optional TokenProducerSettings token_producer_settings = 2;
		optional TokenConsumerSettings token_consumer_settings = 3;
	}

	message ClientSettings {
		repeated string android_provider_id = 1;
	}

	repeated AppSettings app_settings = 1;
	optional ClientSettings client_settings = 2;
}

message NianticSharedLoginProto {
	optional bytes token = 1;
	optional string device_id = 2;
}

message NicknamePokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_NICKNAME = 2;
		ERROR_POKEMON_NOT_FOUND = 3;
		ERROR_POKEMON_IS_EGG = 4;
		ERROR_FILTERED_NICKNAME = 5;
		ERROR_EXCEEDED_CHANGE_LIMIT = 6;
	}

	optional Result result = 1;
}

message NicknamePokemonProto {
	optional fixed64 pokemon_id = 1;
	optional string nickname = 2;
}

message NicknamePokemonTelemetry {
	optional PokemonTelemetry pokemon = 1;
	optional string nickname = 2;
}

message NotificationSettingsProto {
	optional bool pull_notifications = 1;
	optional bool show_notifications = 2;
}

message NotifyContactListFriendsRequest {
	optional int64 notify_timestamp_ms = 1;
}

message NotifyContactListFriendsResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_ALREADY_SENT = 3;
	}

	optional Result result = 1;
}

message NpcDialogueProto {
	repeated DialogueLineProto dialogue_line = 1;
}

message NpcPokemonProto {
	optional HoloPokemonId pokemon_type = 1;
	optional PokemonDisplayProto pokemon_display = 2;
}

message ObCombatMismatchData {
	optional OpenCombatSessionDataProto open_combat_session_data = 2;
	optional OpenCombatSessionResponseDataProto open_combat_session_response_data = 3;
	optional UpdateCombatDataProto update_combat_data = 4;
	optional UpdateCombatResponseDataProto update_combat_response_data = 5;
	optional QuitCombatDataProto quit_combat_data = 6;
	optional QuitCombatResponseDataProto quit_combat_response_data = 7;
	optional WebSocketResponseDataProto web_socket_response_data = 8;
	optional RpcErrorDataProto rpc_error_data = 9;
	optional GetCombatPlayerProfileDataProto get_combat_player_profile_data = 10;
	optional GetCombatPlayerProfileResponseDataProto get_combat_player_profile_response_data = 11;
	optional GenerateCombatChallengeIdDataProto generate_combat_challenge_id_data = 12;
	optional GenerateCombatChallengeIdResponseDataProto generate_combat_challenge_id_response_data = 13;
	optional CreateCombatChallengeDataProto create_combat_challenge_data = 14;
	optional CreateCombatChallengeResponseDataProto create_combat_challenge_response_data = 15;
	optional OpenCombatChallengeDataProto open_combat_challenge_data = 16;
	optional OpenCombatChallengeResponseDataProto open_combat_challenge_response_data = 17;
	optional OpenNpcCombatSessionDataProto open_npc_combat_session_data = 18;
	optional OpenNpcCombatSessionResponseDataProto open_npc_combat_session_response_data = 19;
	optional AcceptCombatChallengeDataProto accept_combat_challenge_data = 20;
	optional AcceptCombatChallengeResponseDataProto accept_combat_challenge_response_data = 21;
	optional SubmitCombatChallengePokemonsDataProto submit_combat_challenge_pokemons_data = 22;
	optional SubmitCombatChallengePokemonsResponseDataProto submit_combat_challenge_pokemons_response_data = 23;
	optional DeclineCombatChallengeDataProto decline_combat_challenge_data = 24;
	optional DeclineCombatChallengeResponseDataProto decline_combat_challenge_response_data = 25;
	optional CancelCombatChallengeDataProto cancel_combat_challenge_data = 26;
	optional CancelCombatChallengeResponseDataProto cancel_combat_challenge_response_data = 27;
	optional GetCombatChallengeDataProto get_combat_challenge_data = 28;
	optional GetCombatChallengeResponseDataProto get_combat_challenge_response_data = 29;
	optional VsSeekerStartMatchmakingDataProto vs_seeker_start_matchmaking_data = 30;
	optional VsSeekerStartMatchmakingResponseDataProto vs_seeker_start_matchmaking_response_data = 31;
	optional GetMatchmakingStatusDataProto get_matchmaking_status_data = 32;
	optional GetMatchmakingStatusResponseDataProto get_matchmaking_status_response_data = 33;
	optional CancelMatchmakingDataProto cancel_matchmaking_data = 34;
	optional CancelMatchmakingResponseDataProto cancel_matchmaking_response_data = 35;
	optional SubmitCombatActionProto submit_combat_action = 36;
	optional InvasionOpenCombatSessionDataProto invasion_open_combat_session_data = 37;
	optional InvasionOpenCombatSessionResponseDataProto invasion_open_combat_session_response_data = 38;
	optional InvasionBattleUpdateProto invasion_battle_update = 39;
	optional InvasionBattleResponseUpdateProto invasion_battle_response_update = 40;
	optional CombatIdMismatchDataProto combat_id_mismatch_data = 41;
	optional LeagueIdMismatchDataProto league_id_mismatch_data = 42;
	optional ChallengeIdMismatchDataProto challenge_id_mismatch_data = 43;
	optional ProgressTokenDataV2 progress_token_data = 44;
	optional OnApplicationFocusDataProto on_application_focus_data = 45;
	optional OnApplicationPauseDataProto on_application_pause_data = 46;
	optional OnApplicationQuitDataProto on_application_quit_data = 47;
	optional ExceptionCaugthDataV2Proto exception_caught_data = 48;
	optional CombatPubSubDataProto combat_pub_sub_data = 49;
	optional CombatEndDataProto combat_end_data = 50;
	optional CombatSyncServerDataProto combat_sync_server_data = 51;
	optional CombatSyncServerResponseDataProto combat_sync_server_response_data = 52;

	message MismatchState {
		enum Type {
			NO_TYPE = 0;
			OPEN_COMBAT_SESSION = 1;
			OPEN_COMBAT_SESSION_RESPONSE = 2;
			UPDATE_COMBAT = 3;
			UPDATE_COMBAT_RESPONSE = 4;
			QUIT_COMBAT = 5;
			QUIT_COMBAT_RESPONSE = 6;
			WEB_SOCKET_RESPONSE = 7;
			RPC_ERROR = 8;
			GET_COMBAT_PLAYER_PROFILE = 9;
			GET_COMBAT_PLAYER_PROFILE_RESPONSE = 10;
			GENERATE_COMBAT_CHALLENGE_ID = 11;
			GENERATE_COMBAT_CHALLENGE_ID_RESPONSE = 12;
			CREATE_COMBAT_CHALLENGE = 13;
			CREATE_COMBAT_CHALLENGE_RESPONSE = 14;
			OPEN_COMBAT_CHALLENGE = 15;
			OPEN_COMBAT_CHALLENGE_RESPONSE = 16;
			OPEN_NPC_COMBAT_SESSION = 17;
			OPEN_NPC_COMBAT_SESSION_RESPONSE = 18;
			ACCEPT_COMBAT_CHALLENGE = 19;
			ACCEPT_COMBAT_CHALLENGE_RESPONSE = 20;
			SUBMIT_COMBAT_CHALLENGE_POKEMONS = 21;
			SUBMIT_COMBAT_CHALLENGE_POKEMONS_RESPONSE = 22;
			DECLINE_COMBAT_CHALLENGE = 23;
			DECLINE_COMBAT_CHALLENGE_RESPONSE = 24;
			CANCEL_COMBAT_CHALLENGE = 25;
			CANCEL_COMBAT_CHALLENGE_RESPONSE = 26;
			GET_COMBAT_CHALLENGE = 27;
			GET_COMBAT_CHALLENGE_RESPONSE = 28;
			VS_SEEKER_START_MATCHMAKING = 29;
			VS_SEEKER_START_MATCHMAKING_RESPONSE = 30;
			GET_MATCHMAKING_STATUS = 31;
			GET_MATCHMAKING_STATUS_RESPONSE = 32;
			CANCEL_MATCHMAKING = 33;
			CANCEL_MATCHMAKING_RESPONSE = 34;
			SUBMIT_COMBAT_ACTION = 35;
			INVASION_OPEN_COMBAT_SESSION = 36;
			INVASION_OPEN_COMBAT_SESSION_RESPONSE = 37;
			INVASION_BATTLE_UPDATE = 38;
			INVASION_BATTLE_UPDATE_RESPONSE = 39;
			COMBAT_ID_MISMATCH = 40;
			LEAGUE_ID_MISMATCH = 41;
			CHALLENGE_ID_MISMATCH = 42;
			PROGRESS_TOKEN = 43;
			ON_APPLICATION_FOCUS = 44;
			ON_APPLICATION_PAUSE = 45;
			ON_APPLICATION_QUIT = 46;
			EXCEPTION_CAUGHT = 47;
			PUB_SUB_MESSAGE = 48;
			PLAYER_END_COMBAT = 49;
			COMBAT_SYNC_SERVER = 50;
			COMBAT_SYNC_SERVER_RESPONSE = 51;
		}

		optional Type type = 1;
		optional uint32 ob_uint32_1 = 2;
		optional uint32 ob_uint32_2 = 3;
		optional float ob_float = 4;
	}

	optional MismatchState state = 1;
}

message ObCombatProto {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
	optional int64 ob_int64 = 3;
	repeated string ob_repeated_list = 4;
}

message ObCombatSettings {
	optional int32 ob_int32 = 1;
	optional bool enabled = 2;
}

message ObCombatSettings1 {
	optional bool ob_bool_1 = 1;
	optional bool ob_bool_2 = 2;
	optional bool ob_bool_3 = 3;
	optional bool ob_bool_4 = 4;
}

message ObCommunCombatChallengeDataProto {
	optional CombatType type = 1;
	repeated int32 ob_int32_list_1 = 2;
	repeated int32 ob_int32_list_2 = 3;
	optional CombatChallengeProto.CombatChallengeState combat_challenge_state = 4;
	optional uint32 ob_uint32_1 = 5;
	optional uint32 ob_uint32_2 = 6;
}

message ObCommunCombatDataProto {
	optional CombatActionProto.ActionType type = 1;
	optional int32 ob_int32_1 = 2;
	optional int32 ob_int32_2 = 3;
	optional int32 ob_int32_3 = 4;
	optional int32 ob_int32_4 = 5;
	optional int32 ob_int32_5 = 6;
	optional int32 ob_int32_6 = 7;
	optional float ob_float = 8;
	optional int32 ob_move = 9;
}

message ObCommunWebCombatStateProto {
	message ObMaybePokemonData {
		optional int32 ob_int32_1 = 1;
		optional int32 ob_int32_2 = 2;
		optional int32 ob_int32_3 = 3;
		optional int32 ob_int32_4 = 4;
		optional int32 ob_int32_5 = 5;
	}

	message ObCommunWebCombatDataProto {
		optional ObMaybePokemonData ob_active_pokemon = 1;
		repeated ObMaybePokemonData ob_active_pokemon_list_1 = 2;
		repeated ObMaybePokemonData ob_active_pokemon_list_2 = 3;
		optional ObCommunCombatDataProto ob_commun_combat_data_1 = 4;
		optional bool ob_bool = 5;
		optional int32 ob_int32_1 = 6;
		optional ObCommunCombatDataProto ob_commun_combat_data_2 = 7;
		optional uint32 ob_uint32 = 8;
		optional int32 ob_int32_2 = 9;
	}

	optional CombatProto.CombatState ob_combat_state = 1;
	optional ObCommunWebCombatDataProto ob_commun_web_combat_data_1 = 3;
	optional ObCommunWebCombatDataProto ob_commun_web_combat_data_2 = 4;
	optional uint32 ob_uint32_1 = 7;
	optional int32 ob_int32 = 8;
	optional uint32 ob_uint32_2 = 9;
	optional uint32 ob_uint32_3 = 10;
	optional uint32 ob_uint32_4 = 11;
	optional uint32 ob_uint32_5 = 12;
	optional uint32 ob_uint32_6 = 13;
	optional uint32 ob_uint32_7 = 14;
	optional int32 ob_int32_2 = 15;
	optional bool ob_bool = 16;
	optional int32 ob_int32_3 = 17;
	optional uint32 ob_uint32_8 = 18;
}

message ObEggIncubators1 {
	optional float ob_float_1 = 1;
	optional float ob_float_2 = 2;
	repeated BuddyStatsShownHearts.BuddyShownHeartType ob_buddy_show_heart_type = 3;
	optional BuddyEmotionLevel ob_buddy_emotion_leve = 4;
	optional int64 ob_int64_1 = 5;
	optional int64 ob_int64_2 = 6;
	optional bool ob_bool = 7;
}

message ObEggIncubatorsInfos {
	optional ObEggIncubatorsStatus egg_incubators = 1;

	optional ObEggIncubatorsStatus ob_egg_incubator_status = 2;
	optional ObEggIncubators1 ob_egg_incubators_1 = 3;
}

message ObEggIncubatorsStatus {
	repeated ObEggStatus ob_egg_status = 1;
}

message ObEggStatus {
	enum Status {
		UNSET = 0;
		HATCHING = 1;
		NOT_HATCHING = 2;
		HATCHED = 3;
	}

	enum Type {
		UNKNOWN = 0;
		UNLIMITED = 901;
		BASIC = 902;
		SUPER = 903;
	}

	optional Status status = 1;
	optional float ob_float_1 = 2;
	optional float ob_float_2 = 3;
	optional Type ob_type = 4;
	optional float ob_float_3 = 5;
}

message ObEvoleField {
	optional float ob_float_1 = 1;
	optional float ob_float_2 = 2;
}

message ObFieldMessageOrResponseProto {
	optional string ob_string_1 = 1;
	optional string ob_string_2 = 2;
	optional string ob_string_3 = 3;
	optional string ob_string_4 = 4;
	optional string ob_string_5 = 5;
	optional string ob_string_6 = 6;
	repeated ObFieldMessageOrResponseProtoOne ob_field_message_or_response_one_1 = 7;
	repeated ObFieldMessageOrResponseProtoOne ob_field_message_or_response_one_2 = 8;
	optional int64 ob_int64_1 = 9;
	optional int64 ob_int64_2 = 10;
	optional int64 ob_int64_3 = 11;
	optional int64 ob_int64_4 = 12;
	optional int64 ob_int64_5 = 13;
}

message ObFieldMessageOrResponseProtoOne {
	optional uint64 ob_uint64 = 1;
	optional int32 ob_int32_1 = 2;
	optional int32 ob_int32_2 = 3;
	optional float ob_float = 4;
	optional int32 ob_int32_3 = 5;
	optional int32 ob_int32_4 = 6;
	optional int32 ob_int32_5 = 7;
	optional int32 ob_int32_6 = 8;
	optional PokemonDisplayProto pokemon_display = 9;
	optional int32 ob_int32_7 = 10;
	optional int32 ob_int32_8 = 11;
	optional int32 ob_int32_9 = 12;
	optional int32 ob_int32_10 = 13;
	optional int32 ob_int32_11 = 14;
	optional string ob_string = 15;
	optional Item pokeball = 16;
}

message ObFieldMessageOrResponseProtoTwo {
	optional ObFieldMessageOrResponseProto ob_field_message_or_response = 1;
	repeated ObCombatMismatchData ob_combat_mismatch_data = 2;
}

message ObMegaEvolvePokemonProtoField {
	message ObField {
		optional int32 ob_field_int32_1 = 1;
		optional int32 ob_field_int32_2 = 2;
	}

	optional ObField ob_field_1 = 1;
	optional ObField ob_field_2 = 2;
	optional int32 ob_field_int32_1 = 3;
	optional int32 ob_field_int32_2 = 4;
}

message ObMethodUpdatePostcardOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POSTCARD_DOES_NOT_EXIST = 2;
		ERROR_NOT_ENABLED = 4;
		ERROR_RATE_LIMITED = 5;
	}

	optional Result result = 1;
	optional PostcardDisplayProto ob_postcard_display = 2;
}

message ObMethodUpdatePostcardOutProto1 {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POSTCARD_DOES_NOT_EXIST = 2;
		ERROR_POSTCARD_FAVORITED = 3;
		ERROR_NOT_ENABLED = 4;
	}

	optional Result result = 1;
	optional PostcardDisplayProto ob_postcard_display = 2;
}

message ObNewGlobalSetting {
	optional bool ob_bool = 1;
	optional int32 ob_int32 = 2;
}

message ObNewGlobalSetting1 {
	optional bool ob_new_global_setting_bool_1 = 1;
	optional bool ob_new_global_setting_bool_2 = 2;
	optional string ob_new_global_setting_string = 3;
	optional bool ob_new_global_setting_bool_3 = 4;
	optional int32 ob_new_global_setting_int32 = 5;
	optional float ob_new_global_setting_float = 6;
}

message ObNewGlobalSetting2 {
	optional bool enabled = 1;
}

message ObNewGlobalSetting4 {
	optional bool ob_enable = 1;
}

message ObNewGlobalSetting5 {
	message ObMessage5 {
		optional string ob_string_1 = 1;
		optional string ob_string_2 = 2;
	}

	repeated ObMessage5 ob_repeated_stuff = 1;
}

message ObNewGlobalSetting6 {
	optional bool ob_enabled = 1;
}

message ObPokemonSetting {
	optional float ob_pokemon_setting_float_1 = 1;
	optional float ob_pokemon_setting_float_2 = 2;
	optional float ob_pokemon_setting_float_3 = 3;
	optional float ob_pokemon_setting_float_4 = 4;
	optional float ob_pokemon_setting_float_5 = 5;
	optional float ob_pokemon_setting_float_6 = 6;
	optional float ob_pokemon_setting_float_7 = 7;
	optional float ob_pokemon_setting_float_8 = 8;
	optional float ob_pokemon_setting_float_9 = 9;
	optional float ob_pokemon_setting_float_10 = 10;
}

message ObRaidClientSetting {
	optional RaidLevel raid_level = 1;
	optional string ob_string = 2;
}

message ObRaidClientSetting1 {
	optional bool ob_bool = 1;
}

message ObSponsoredBalloon {
	optional string ob_string_1 = 1;
	optional string ob_string_2 = 2;
	optional string ob_string_3 = 3;
	optional string ob_string_4 = 4;
}

message OnApplicationFocusDataProto {
	optional bool ob_on_application_focus_bool = 1;
}

message OnApplicationPauseDataProto {
	optional bool ob_on_application_pause_bool = 1;
}

message OnApplicationQuitDataProto {
}

message OnboardingSettingsProto {
	optional bool skip_avatar_customization = 1;
	optional bool disable_initial_ar_prompt = 2;
	optional uint32 ar_prompt_player_level = 3;
	optional int32 ob_int32_1 = 4;
	optional int32 ob_int32_2 = 5;
}

message OnboardingTelemetry {
	optional OnboardingPathIds onboarding_path = 1;
	optional OnboardingEventIds event_id = 2;
	optional int32 data = 3;
	optional string conversation = 4;
	optional OnboardingArStatus ar_status = 5;
}

message OnboardingV2SettingsProto {
	optional bool enable_onboarding_v2 = 1;
	repeated HoloPokemonId pokedex_id = 2;
	optional HoloPokemonId onboarding_egg_pokemon = 3;
	optional int32 egg_km_until_hatch = 4;
}

message OneWaySharedFriendshipDataProto {
	repeated GiftBoxDetailsProto giftbox_details = 1;
	optional int64 open_trade_expire_ms = 2;
}

message OpenBuddyGiftOutProto {
	enum Result {
		UNSET = 0;
		ERROR_BUDDY_NOT_VALID = 1;
		SUCCESS_ADDED_LOOT_TO_INVENTORY = 2;
		SUCCESS_ADDED_SOUVENIR_TO_COLLECTIONS = 3;
		ERROR_BUDDY_HAS_NOT_PICKED_UP_ANY_SOUVENIRS = 4;
		ERROR_INVENTORY_IS_FULL = 5;
		ERROR_BUDDY_NOT_ON_MAP = 6;
	}

	optional Result result = 1;
	optional BuddyGiftProto buddy_gift = 2;
	optional BuddyObservedData observed_data = 4;
	optional BuddyStatsShownHearts.BuddyShownHeartType shown_hearts = 5;
}

message OpenBuddyGiftProto {
}

message OpenCampfireMapTelemetry {
	enum SourcePage {
		UNKNOWN = 0;
		MAP = 1;
		NEARBY_RAIDS = 2;
		GYM_APPROACH = 3;
		RAID_APPROACH = 4;
	}

	optional SourcePage source = 1;
	optional bool is_standalone = 2;
}

message OpenCombatChallengeDataProto {
	optional int32 ob_int32 = 1;
	optional CombatType type = 2;
	repeated int32 ob_list_int32 = 3;
}

message OpenCombatChallengeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
		ERROR_POKEMON_NOT_IN_INVENTORY = 4;
		ERROR_NOT_ELIGIBLE_LEAGUE = 5;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 6;
		ERROR_ALREADY_TIMEDOUT = 8;
		ERROR_ALREADY_CANCELLED = 9;
		ERROR_FRIEND_NOT_FOUND = 10;
		ERROR_FAILED_TO_SEND_NOTIFICATION = 11;
		ERROR_ACCESS_DENIED = 12;
		ERROR_INELIGIBLE_OPPONENT = 13;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
}

message OpenCombatChallengeProto {
	optional CombatType type = 1;
	optional string challenge_id = 2;
	optional string combat_league_template_id = 3;
	optional string opponent_player_id = 4;
	repeated fixed64 attacking_pokemon_id = 5;
}

message OpenCombatChallengeResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional OpenCombatChallengeOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message OpenCombatSessionDataProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_list_int32 = 2;
	optional uint32 ob_uint32 = 3;
	optional CombatType combat_type = 4;
}

message OpenCombatSessionOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_COMBAT_STATE = 2;
		ERROR_COMBAT_SESSION_FULL = 3;
		ERROR_POKEMON_NOT_IN_INVENTORY = 4;
		ERROR_OPPONENT_NOT_IN_RANGE = 5;
		ERROR_CHALLENGE_EXPIRED = 6;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 7;
		ERROR_OPPONENT_QUIT = 8;
		ERROR_POKEMON_LINEUP_INELIGIBLE_FOR_LEAGUE = 9;
		ERROR_COMBAT_LEAGUE_UNSPECIFIED = 10;
		ERROR_ACCESS_DENIED = 11;
		ERROR_PLAYER_HAS_NO_BATTLE_PASSES = 12;
	}

	optional Result result = 1;
	optional CombatProto combat = 2;
	optional bool should_debug_log = 3;
	repeated CombatRefactorToggleProto combat_refactor_toggle = 4;
	optional string ob_string = 5;
}

message OpenCombatSessionProto {
	optional string combat_id = 1;
	repeated fixed64 attacking_pokemon_id = 2;
	optional string combat_league_template_id = 3;
	optional int64 lobby_join_time_ms = 4;
	optional CombatType combat_type = 5;
}

message OpenCombatSessionResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional OpenCombatSessionOutProto ob_open_combat_session_response = 3;
}

message OpenGiftLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string friend_codename = 2;
	optional LootProto items = 3;
	repeated PokemonProto pokemon_eggs = 4;
}

message OpenGiftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_BAG_FULL = 3;
		ERROR_PLAYER_LIMIT_REACHED = 4;
		ERROR_GIFT_DOES_NOT_EXIST = 5;
		ERROR_FRIEND_NOT_FOUND = 6;
		ERROR_INVALID_PLAYER_ID = 7;
		ERROR_FRIEND_UPDATE = 8;
	}

	optional Result result = 1;
	optional LootProto items = 2;
	optional PokemonProto egg_pokemon = 3;
	optional FriendshipLevelDataProto updated_friendship_data = 4;
	optional PlayerPublicProfileProto friend_profile = 5;
}

message OpenGiftProto {
	optional string player_id = 1;
	optional uint64 giftbox_id = 2;
	optional bool convert_to_stardust = 3;
}

message OpenInvasionCombatSessionOutProto {
	optional InvasionStatus.Status status = 1;
	optional CombatProto combat = 2;
}

message OpenInvasionCombatSessionProto {
	optional IncidentLookupProto incident_lookup = 1;
	optional int32 step = 2;
	repeated fixed64 attacking_pokemon_id = 3;
	optional int64 lobby_join_time_ms = 4;
}

message OpenNpcCombatSessionDataProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_list_int32 = 2;
	optional uint32 ob_uint32 = 3;
}

message OpenNpcCombatSessionOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 2;
		ERROR_POKEMON_LINEUP_INELIGIBLE_FOR_LEAGUE = 3;
		ERROR_ACCESS_DENIED = 4;
	}

	optional Result result = 1;
	optional CombatProto combat = 2;
}

message OpenNpcCombatSessionProto {
	repeated fixed64 attacking_pokemon_id = 1;
	optional string combat_npc_template_id = 2;
	optional int64 lobby_join_time_ms = 3;
}

message OpenNpcCombatSessionResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional OpenNpcCombatSessionOutProto.Result result = 3;
	optional ObCommunWebCombatStateProto ob_commun_web_combat_state = 4;
}

message OpenSponsoredGiftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_BAG_FULL = 3;
		ERROR_GIFT_REDEEMED = 4;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
}

message OpenSponsoredGiftProto {
	optional bytes encrypted_ad_token = 1;
	optional bytes gift_token = 2;
}

message OpenTradingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FRIEND_NOT_FOUND = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_INVALID_STATE = 5;
		ERROR_STATE_HANDLER = 6;
		ERROR_TRADING_EXPIRED = 7;
		ERROR_TRADING_COOLDOWN = 8;
		ERROR_PLAYER_ALREADY_OPENED = 9;
		ERROR_FRIEND_OUT_OF_RANGE = 10;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 11;
		ERROR_PLAYER_REACHED_DAILY_LIMIT = 12;
		ERROR_FRIEND_REACHED_DAILY_LIMIT = 13;
		ERROR_PLAYER_NOT_ENOUGH_STARDUST = 14;
		ERROR_FRIEND_NOT_ENOUGH_STARDUST = 15;
		ERROR_FRIEND_BELOW_MINIMUM_LEVEL = 16;
	}

	optional Result result = 1;
	optional TradingProto trading = 2;
}

message OpenTradingProto {
	optional string player_id = 1;
}

message OptOutProto {
}

message OutgoingFriendInviteDisplayProto {
	optional OutgoingFriendInviteProto invite = 1;
	optional PlayerSummaryProto player = 2;
}

message OutgoingFriendInviteProto {
	enum Status {
		UNSET = 0;
		PENDING = 1;
		CANCELLED = 2;
		DECLINED = 3;
	}

	optional Status status = 1;
	optional string player_id = 2;
	optional int64 created_ms = 3;
	optional string full_name = 4;
	optional string nia_account_id = 5;
}

message ParticipationProto {
	optional int32 individual_damage_pokeballs = 1;
	optional int32 team_damage_pokeballs = 2;
	optional int32 gym_ownership_pokeballs = 3;
	optional int32 base_pokeballs = 4;
	optional double blue_percentage = 5;
	optional double red_percentage = 6;
	optional double yellow_percentage = 7;
	optional float bonus_item_multiplier = 8;
	optional FriendshipLevelMilestone highest_friendship_milestone = 9;
	optional int32 highest_friendship_pokeballs = 10;
	optional int32 speed_completion_pokeballs = 11;
	optional int32 speed_completion_mega_resource = 12;
	optional bool mega_resource_capped = 13;
	optional int32 fort_powerup_pokeballs = 14;
}

message PartyRecommendationSettingsProto {
	enum PartyRcommendationMode {
		UNSET = 0;
		PARTY_RECOMMENDATION_MODE_1 = 1;
		PARTY_RECOMMENDATION_MODE_2 = 2;
		PARTY_RECOMMENDATION_MODE_3 = 3;
		PARTY_RECOMMENDATION_MODE_4 = 4;
	}

	optional PartyRcommendationMode mode = 1;
	optional float variance = 2;
	optional float third_move_weight = 3;
	optional float mega_evo_combat_rating_scale = 4;
}

message PasscodeRedeemTelemetry {
	optional string result = 1;
	optional string passcode = 2;
	optional string country_code = 3;
	optional string language_code = 4;
	optional string bundle_version = 5;
}

message PasscodeRedemptionFlowRequest {
	enum DevicePlatform {
		PLATFORM_UNKNOWN = 0;
		PLATFORM_ANDROID = 1;
		PLATFORM_IOS = 2;
		PLATFORM_WEB = 3;
	}

	optional string passcode = 1;
	optional string poi_guid = 2;
	optional DevicePlatform device_platform = 3;
	optional string carrier = 4;
}

message PasscodeRedemptionFlowResponse {
	enum Status {
		STATUS_UNKNOWN = 0;
		STATUS_SUCCESS = 1;
		STATUS_ALREADY_REDEEMED = 2;
		STATUS_FAILED_INVENTORY_CHECK = 3;
		STATUS_OUT_OF_RANGE = 4;
		STATUS_WRONG_LOCATION = 5;
		STATUS_RATE_LIMITED = 6;
		STATUS_INVALID = 7;
		STATUS_FULLY_REDEEMED = 8;
		STATUS_EXPIRED = 9;
	}

	message Reward {
		optional string item = 1;
		optional int32 count = 2;
	}

	optional Status status = 1;
	optional int32 inventory_check_failed_reason = 2;
	repeated Reward rewards = 3;
	optional string passcode_batch_id = 5;
	optional bytes in_game_reward = 6;
}

message PasscodeRewardsLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string passcode = 2;
	optional RedeemPasscodeRewardProto rewards = 3;
}

message PasscodeSettingsProto {
	optional bool show_passcode_in_store = 1;
	optional bool use_passcode_v2 = 2;
}

message PercentScrolledTelemetry {
	optional double percent_scrolled_telemetry_double = 1;
	optional string percent_scrolled_telemetry_string = 2;
}

message PermissionsFlowTelemetry {
	optional PermissionContextTelemetryIds permission_context_telemetry_ids = 1;
	optional DeviceServiceTelemetryIds device_service_telemetry_ids = 2;
	optional PermissionFlowStepTelemetryIds permission_flow_step_telemetry_ids = 3;
	optional bool success = 4;
}

message PgoAsyncFileUploadCompleteProto {
	optional int32 power_up_points_added = 1;
	optional int32 power_up_progress_points = 2;
	optional int64 power_up_level_expiration_ms = 3;
	optional int64 next_fort_close_ms = 4;
}

message PhoneNumberCountryProto {
	optional string english_name = 1;
	optional string localized_name = 2;
	optional string country_code = 3;
	optional string calling_code = 4;
}

message PhotobombCreateDetail {
	optional bool caught_in_photobomb = 1;
}

message PingRequestProto {
	optional int32 response_size_bytes = 1;
	optional string random_request_bytes = 2;
	optional bool use_cache_for_random_request_bytes = 3;
	optional string return_value = 4;
}

message PingResponseProto {
	optional string user_info = 1;
	optional string server_info = 2;
	optional string random_response_bytes = 3;
	optional string return_value = 4;
}

message PixelPointProto {
	optional int32 pixel_x = 1;
	optional int32 pixel_y = 2;
	optional int32 zoom_level = 3;
}

message PlannedDowntimeSettingsProto {
	optional int64 downtime_timestamp_ms = 1;
	optional int64 no_actions_window_sec_from_downtime = 2;
}

message PlatypusRolloutSettingsProto {
	optional int32 buddy_v2_min_player_level = 1;
	optional int32 buddy_multiplayer_min_player_level = 2;
	optional bool enable_monodepth = 3;
	optional WallabySettingsProto wallaby_settings = 4;
}

message PlayerAttributeRewardProto {
	optional string key = 1;
	optional string value = 2;
	optional bool overwrite_existing_attribute = 3;
}

message PlayerAttributesProto {
	optional ATTRIBUTES attributes = 1;

	message ATTRIBUTES {
		optional string key = 1;
		optional string value = 2;
	}
}

message PlayerAvatarProto {
	optional int32 skin = 2;
	optional int32 hair = 3;
	optional int32 shirt = 4;
	optional int32 pants = 5;
	optional int32 hat = 6;
	optional int32 shoes = 7;
	optional int32 avatar = 8;
	optional int32 eyes = 9;
	optional int32 backpack = 10;
	optional string avatar_hair = 11;
	optional string avatar_shirt = 12;
	optional string avatar_pants = 13;
	optional string avatar_hat = 14;
	optional string avatar_shoes = 15;
	optional string avatar_eyes = 16;
	optional string avatar_backpack = 17;
	optional string avatar_gloves = 18;
	optional string avatar_socks = 19;
	optional string avatar_belt = 20;
	optional string avatar_glasses = 21;
	optional string avatar_necklace = 22;
	optional string avatar_skin = 23;
	optional string avatar_pose = 24;
	optional string avatar_face = 25;
	optional string avatar_prop = 26;
}

message PlayerBadgeProto {
	optional HoloBadgeType badge_type = 1;
	optional int32 rank = 2;
	optional int32 start_value = 3;
	optional int32 end_value = 4;
	optional double current_value = 5;
}

message PlayerCameraProto {
	optional bool default_camera = 1;
}

message PlayerCombatBadgeStatsProto {
	optional int32 num_won = 1;
	optional int32 num_total = 2;
}

message PlayerCombatStatsProto {
	optional BADGES badges = 1;

	message BADGES {
		optional int32 key = 1;
		optional PlayerCombatBadgeStatsProto value = 2;
	}
}

message PlayerCurrencyProto {
	optional int32 gems = 1;
}

message PlayerFriendDisplayProto {
	optional PokemonDisplayProto buddy = 1;
	optional int32 buddy_display_pokemon_id = 2;
	optional string buddy_pokemon_nickname = 3;
	optional PokemonDisplayProto last_pokemon_caught = 4;
	optional int32 last_pokemon_caught_display_id = 5;
	optional int64 last_pokemon_caught_timestamp = 6;
	optional int32 buddy_candy_awarded = 7;
	optional MegaEvoInfoProto active_mega_evo_info = 8;
}

message PlayerHudNotificationClickTelemetry {
	optional string notification_category = 1;
}

message PlayerLevelSettingsProto {
	repeated int32 rank_num = 1;
	repeated int32 required_experience = 2;
	repeated float cp_multiplier = 3;
	optional int32 max_egg_player_level = 4;
	optional int32 max_encounter_player_level = 5;
	optional int32 max_raid_encounter_player_level = 6;
	optional int32 max_quest_encounter_player_level = 7;
	optional int32 max_vs_seeker_encounter_player_level = 8;
	optional int32 max_mega_level = 9;
}

message PlayerLocaleProto {
	optional string country = 1;
	optional string language = 2;
	optional string timezone = 3;
}

message PlayerPreferencesProto {
	enum PostcardTrainerInfoSharingPreference {
		UNSET = 0;
		SHARE_WITH_FRIENDS = 1;
		DO_NOT_SHARE = 2;
	}

	optional bool opt_out_of_sponsored_gifts = 1;
	optional BattlePartiesProto battle_parties = 2;
	optional string search_filter_preference_base_64 = 3;
	optional PostcardTrainerInfoSharingPreference postcard_trainer_info_sharing_preference = 4;
}

message PlayerProfileOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	message GymBadges {
		repeated AwardedGymBadge gym_badge = 1;
		optional int32 total = 2;
	}

	optional Result result = 1;
	optional int64 start_time = 2;
	repeated PlayerBadgeProto badges = 3;
	optional GymBadges gym_badges = 4;
}

message PlayerProfileProto {
	optional string player_name = 1;
}

message PlayerPublicProfileProto {
	optional string name = 1;
	optional int32 level = 2;
	optional PlayerAvatarProto avatar = 3;
	optional Team team = 4;
	optional int32 battles_won = 5;
	optional float km_walked = 6;
	optional int32 caught_pokemon = 7;
	optional GymBadgeType gym_badge_type = 8;
	repeated PlayerBadgeProto badges = 9;
	optional int64 experience = 10;
	optional bool has_shared_ex_pass = 11;
	optional int32 combat_rank = 12;
	optional float combat_rating = 13;
	optional TimedGroupChallengePlayerStatsProto timed_group_challenge_stats = 14;
}

message PlayerRaidInfoProto {
	optional int32 total_completed_raids = 3;
	optional int32 total_completed_legendary_raids = 4;
	repeated RaidProto raids = 5;
	optional int32 total_remote_raids = 6;
}

message PlayerSettingsProto {
	optional bool opt_out_online_status = 1;
	repeated SocialSettings.TutorialType completed_tutorials = 2;
}

message PlayerShownLevelUpShareScreenTelemetry {
	optional bool player_viewed_photo = 1;
	optional bool player_shared_photo = 2;
	optional int32 player_level = 3;
}

message PlayerStatsProto {
	optional int32 level = 1;
	optional int64 experience = 2;
	optional int64 prev_level_exp = 3;
	optional int64 next_level_exp = 4;
	optional float km_walked = 5;
	optional int32 num_pokemon_encountered = 6;
	optional int32 num_unique_pokedex_entries = 7;
	optional int32 num_pokemon_captured = 8;
	optional int32 num_evolutions = 9;
	optional int32 poke_stop_visits = 10;
	optional int32 number_of_pokeball_thrown = 11;
	optional int32 num_eggs_hatched = 12;
	optional int32 big_magikarp_caught = 13;
	optional int32 num_battle_attack_won = 14;
	optional int32 num_battle_attack_total = 15;
	optional int32 num_battle_defended_won = 16;
	optional int32 num_battle_training_won = 17;
	optional int32 num_battle_training_total = 18;
	optional int32 prestige_raised_total = 19;
	optional int32 prestige_dropped_total = 20;
	optional int32 num_pokemon_deployed = 21;
	repeated int32 num_pokemon_caught_by_type = 22;
	optional int32 small_rattata_caught = 23;
	optional double used_km_pool = 24;
	optional int64 last_km_refill_ms = 25;
	optional int32 num_raid_battle_won = 26;
	optional int32 num_raid_battle_total = 27;
	optional int32 num_legendary_battle_won = 28;
	optional int32 num_legendary_battle_total = 29;
	optional int32 num_berries_fed = 30;
	optional int64 total_defended_ms = 31;
	repeated HoloBadgeType event_badges = 32;
	optional float km_walked_past_active_day = 33;
	optional int32 num_challenge_quests_completed = 34;
	optional int32 num_trades = 35;
	optional int32 num_max_level_friends = 36;
	optional int64 trade_accumulated_distance_km = 37;
	optional int64 fitness_report_last_check_bucket = 38;
	optional PlayerCombatStatsProto combat_stats = 39;
	optional int32 num_npc_combats_won = 40;
	optional int32 num_npc_combats_total = 41;
	optional int32 num_photobomb_seen = 42;
	optional int32 num_pokemon_purified = 43;
	optional int32 num_grunts_defeated = 44;
	optional int32 num_best_buddies = 47;
	optional int32 level_cap = 48;
	optional int32 seven_day_streaks = 49;
	optional int32 unique_raid_bosses_defeated = 50;
	optional int32 unique_pokestops_visited = 51;
	optional int32 raids_won_with_friends = 52;
	optional int32 pokemon_caught_at_your_lures = 53;
	optional int32 num_wayfarer_agreement = 54;
	optional int64 wayfarer_agreement_update_ms = 55;
	optional int32 num_total_mega_evolutions = 56;
	optional int32 num_unique_mega_evolutions = 57;
	optional int32 num_mini_collection_event_completed = 60;
	optional int32 num_pokemon_form_changes = 61;
	optional int32 num_rocket_balloon_battles_won = 62;
	optional int32 num_rocket_balloon_battles_total = 63;
	optional int32 num_routes_accepted = 64;
	optional int32 num_players_referred = 65;
	optional int32 num_pokestops_ar_video_scanned = 67;
	optional int32 num_on_raid_achievements_screen = 68;
	optional int32 num_total_route_play = 69;
	optional int32 num_unique_route_play = 70;
}

message PlayerStatsSnapshotsProto {
	message PlayerStatsSnapshotProto {
		enum Reason {
			UNSET = 0;
			LEVEL_UP = 1;
		}

		optional Reason reason = 1;
		optional PlayerStatsProto stats = 2;
	}

	repeated PlayerStatsSnapshotProto snap_shot = 1;
}

message PlayerSubmissionResponseProto {
	enum Status {
		STATUS_UNSPECIFIED = 0;
		SUCCESS = 1;
		INTERNAL_ERROR = 2;
		TOO_MANY_RECENT_SUBMISSIONS = 3;
		MINOR = 4;
		NOT_AVAILABLE = 5;
		INVALID_INPUT = 6;
		MISSING_IMAGE = 7;
		DISTANCE_VALIDATION_FAILED = 8;
	}

	optional Status status = 1;
	optional string submission_id = 2;
	repeated string messages = 3;
}

message PlayerSummaryProto {
	optional string player_id = 1;
	optional string codename = 2;
	optional bytes public_data = 3;
	optional string team = 4;
	optional string fb_user_id = 5;
	optional int32 level = 6;
	optional int64 experience = 7;
	optional string nia_account_id = 8;
}

message PoiCategorizationEntryTelemetry {
	enum EntryType {
		UNSET = 0;
		EDIT = 1;
		NOMINATION = 2;
	}

	optional EntryType entry_type = 1;
	optional int64 session_start_time = 2;
	optional string lang_country_code = 3;
}

message PoiCategorizationOperationTelemetry {
	enum OperationType {
		UNSET = 0;
		EDIT_SUBMITTED = 1;
		EDIT_CANCELLED = 2;
		NOMINATION_EXIT_FORWARD = 3;
		NOMINATION_EXIT_BACKWARD = 4;
	}

	optional OperationType operation_type = 1;
	optional int64 session_start_time = 2;
	repeated string selected_ids = 3;
	optional string lang_country_code = 4;
}

message PoiCategoryRemovedTelemetry {
	optional int64 session_start_time = 1;
	optional string removed_id = 2;
	repeated string remaining_ids = 3;
	optional string lang_country_code = 4;
}

message PoiCategorySelectedTelemetry {
	optional int64 session_start_time = 1;
	optional string selected_id = 2;
	optional int32 selected_index = 3;
	optional bool search_entered = 4;
	optional bool parent_selected = 5;
	optional string lang_country_code = 6;
}

message PoiGlobalSettingsProto {
	optional bool is_enabled = 1;
	repeated string player_submission_type_enabled = 2;
}

message PoiPlayerMetadataTelemetry {
	optional string device_model = 1;
	optional string device_os = 2;
}

message PoiSubmissionPhotoUploadErrorTelemetry {
	enum PoiSubmissionPhotoUploadErrorIds {
		UNSET = 0;
		POI_PHOTO_UPLOAD_ERROR = 1;
		POI_PHOTO_UPLOAD_TIMEOUT = 2;
	}

	optional PoiSubmissionPhotoUploadErrorIds error_id = 1;
	optional PoiImageType image_type = 2;
	optional string error_message = 3;
}

message PoiSubmissionTelemetry {
	enum PoiCameraStepIds {
		UNSET = 0;
		ENTER = 1;
		RETAKE = 2;
		CONFIRM = 3;
		EXIT = 4;
	}

	enum PoiSubmissionGuiEventId {
		UNKNOWN = 0;
		POI_NOMINATION_ENTER = 1;
		POI_TUTORIAL_COMPLETE = 2;
		POI_MAP_CHANGEDVIEW_MAP = 3;
		POI_MAP_CHANGEDVIEW_SATELLITE = 4;
		POI_MAP_CENTER_LOCATION = 5;
		POI_LOCATION_SET = 6;
		POI_PHOTO_CAMERA_ENTER = 7;
		POI_PHOTO_CAMERA_EXIT = 8;
		POI_TITLE_ENTERED = 9;
		POI_DESCRIPTION_ENTER = 10;
		POI_DETAILS_CONFIRM = 11;
		POI_SUPPORTINGINFO_ENTER = 12;
		POI_SUBMIT_BUTTON_HIT = 13;
		POI_EXIT_BUTTON_HIT = 14;
	}

	optional PoiSubmissionGuiEventId gui_event_id = 1;
	optional PoiImageType image_type = 2;
	optional PoiCameraStepIds camera_step_id = 3;
}

message PoiVideoSubmissionMetadataProto {
	optional string poi_id = 1;
	optional LocationE6Proto location = 2;
	optional int32 player_level = 3;
}

message PointList {
	repeated uint32 coords = 1;
}

message PokeBallAttributesProto {
	optional HoloItemEffect item_effect = 1;
	optional float capture_multi = 2;
	optional float capture_multi_effect = 3;
	optional float item_effect_mod = 4;
}

message PokeCandyProto {
	optional fixed64 pokemon_id = 1;
	optional int32 candy_count = 2;
}

message PokecoinPurchaseDisplayGmtProto {
	optional bool feature_enabled = 1;
}

message PokecoinPurchaseDisplaySettingsProto {
	optional bool feature_enabled = 1;
	repeated string enabled_countries = 2;
	repeated string enabled_currencies = 3;
	optional bool use_pokecoin_purchase_display_gmt = 4;
}

message PokecoinSectionProto {
	optional int32 coins_earned_today = 1;
	optional int32 max_coins_per_day = 2;
	optional string coins_quest_id = 3;
}

message PokedexCategoriesSettings {
	message PokedexCategoryData {
		optional PokedexCategory pokedex_category = 1;
		optional int32 requirements_to_unlock = 2;
		optional bool unlocked = 3;
	}

	optional bool enabled = 1;
	repeated PokedexCategoryData pokedex_category_data = 2;
	optional bool ob_bool = 3;
}

message PokedexCategoryMilestoneProto {
	enum Status {
		UNSET = 0;
		ACTIVE = 1;
		UNLOCKED = 2;
	}

	optional PokedexCategory pokedex_category = 1;
	optional Status status = 2;
	optional int32 progress = 3;
}

message PokedexCategorySelectedTelemetry {
	optional PokedexCategory pokedex_category = 1;
}

message PokedexEntryProto {
	message PokedexCategoryStatus {
		optional PokedexCategory pokedex_category = 1;
		optional bool encountered = 2;
		optional bool acquired = 3;
	}

	message TempEvoData {
		optional HoloTemporaryEvolutionId temp_evo_id = 1;
		optional int32 times_encountered = 2;
		optional int32 times_obtained = 3;
		repeated PokemonDisplayProto.Gender genders_encountered = 4;
		repeated PokemonDisplayProto.Gender genders_obtained = 5;
		optional int32 times_encountered_shiny = 6;
		optional int32 times_obtained_shiny = 7;
	}

	optional int32 pokedex_entry_number = 1;
	optional int32 times_encountered = 2;
	optional int32 times_captured = 3;
	optional int32 evolution_stone_pieces = 4;
	optional int32 evolution_stones = 5;
	repeated PokemonDisplayProto.Costume captured_costumes = 6;
	repeated PokemonDisplayProto.Form captured_forms = 7;
	repeated PokemonDisplayProto.Gender captured_genders = 8;
	optional bool captured_shiny = 9;
	repeated PokemonDisplayProto.Costume encountered_costumes = 10;
	repeated PokemonDisplayProto.Form encountered_forms = 11;
	repeated PokemonDisplayProto.Gender encountered_genders = 12;
	optional bool encountered_shiny = 13;
	optional int32 times_lucky_received = 14;
	optional int32 times_purified = 15;
	repeated TempEvoData temp_evo_data = 16;
	repeated PokemonDisplayProto.Form captured_shiny_forms = 17;
	optional CategoryStatuS category_status = 18;
	repeated PokemonDisplayProto.Alignment captured_shiny_alignments = 19;

	message CategoryStatuS {
		optional string key = 1;
		optional PokedexCategoryStatus value = 2;
	}
}

message PokemonBulkUpgradeSettingsProto {
	optional bool enable_client_side_change = 1;
}

message PokemonCameraAttributesProto {
	optional float disk_radius_m = 1;
	optional float cylinder_radius_m = 2;
	optional float cylinder_height_m = 3;
	optional float cylinder_ground_m = 4;
	optional float shoulder_mode_scale = 5;
}

message PokemonCandyRewardProto {
	optional HoloPokemonId pokemon_id = 1;
	optional int32 amount = 2;
}

message PokemonCombatStatsProto {
	optional int32 num_won = 1;
	optional int32 num_total = 2;
}

message PokemonCompareChallenge {
	enum CompareOperation {
		UNSET_OPERATION = 0;
		GREATER_WIN = 1;
		LESSER_WIN = 2;
	}

	enum CompareStat {
		UNSET_STAT = 0;
		WEIGHT = 1;
		HEIGHT = 2;
		AGE = 3;
		WALKED_DISTANCE_KM = 4;
		CP = 5;
		MAX_HP = 6;
	}

	optional CompareStat compare_stat = 1;
	optional CompareOperation compare_operation = 2;
}

message PokemonCreateDetail {
	optional WildCreateDetail wild_detail = 1;
	optional EggCreateDetail egg_detail = 2;
	optional RaidCreateDetail raid_detail = 3;
	optional QuestCreateDetail quest_detail = 4;
	optional VsSeekerCreateDetail vs_seeker_detail = 5;
	optional InvasionCreateDetail invasion_detail = 6;
	optional PhotobombCreateDetail photobomb_detail = 7;
	optional TutorialCreateDetail tutorial_detail = 8;
}

message PokemonDisplayProto {
	enum Alignment {
		ALIGNMENT_UNSET = 0;
		SHADOW = 1;
		PURIFIED = 2;
	}

	enum Costume {
		UNSET = 0;
		HOLIDAY_2016 = 1;
		ANNIVERSARY = 2;
		ONE_YEAR_ANNIVERSARY = 3;
		HALLOWEEN_2017 = 4;
		SUMMER_2018 = 5;
		FALL_2018 = 6;
		NOVEMBER_2018 = 7;
		WINTER_2018 = 8;
		FEB_2019 = 9;
		MAY_2019_NOEVOLVE = 10;
		JAN_2020_NOEVOLVE = 11;
		APRIL_2020_NOEVOLVE = 12;
		SAFARI_2020_NOEVOLVE = 13;
		SPRING_2020_NOEVOLVE = 14;
		SUMMER_2020_NOEVOLVE = 15;
		FALL_2020_NOEVOLVE = 16;
		WINTER_2020_NOEVOLVE = 17;
		NOT_FOR_RELEASE_ALPHA = 18;
		NOT_FOR_RELEASE_BETA = 19;
		NOT_FOR_RELEASE_GAMMA = 20;
		NOT_FOR_RELEASE_NOEVOLVE = 21;
		KANTO_2020_NOEVOLVE = 22;
		JOHTO_2020_NOEVOLVE = 23;
		HOENN_2020_NOEVOLVE = 24;
		SINNOH_2020_NOEVOLVE = 25;
		HALLOWEEN_2020_NOEVOLVE = 26;
		COSTUME_1 = 27;
		COSTUME_2 = 28;
		COSTUME_3 = 29;
		COSTUME_4 = 30;
		COSTUME_5 = 31;
		COSTUME_6 = 32;
		COSTUME_7 = 33;
		COSTUME_8 = 34;
		COSTUME_9 = 35;
		COSTUME_10 = 36;
		COSTUME_1_NOEVOLVE = 37;
		COSTUME_2_NOEVOLVE = 38;
		COSTUME_3_NOEVOLVE = 39;
		COSTUME_4_NOEVOLVE = 40;
		COSTUME_5_NOEVOLVE = 41;
		COSTUME_6_NOEVOLVE = 42;
		COSTUME_7_NOEVOLVE = 43;
		COSTUME_8_NOEVOLVE = 44;
		COSTUME_9_NOEVOLVE = 45;
		COSTUME_10_NOEVOLVE = 46;
		GOFEST_2021_NOEVOLVE = 47;
		FASHION_2021_NOEVOLVE = 48;
		HALLOWEEN_2021_NOEVOLVE = 49;
		GEMS_1_2021_NOEVOLVE = 50;
		GEMS_2_2021_NOEVOLVE = 51;
		HOLIDAY_2021_NOEVOLVE = 52;
		TCG_2022_NOEVOLVE = 53;
		JAN_2022_NOEVOLVE = 54;
		GOFEST_2022_NOEVOLVE = 55;
		ANNIVERSARY_2022_NOEVOLVE = 56;
	}

	enum Form {
		FORM_UNSET = 0;
		UNOWN_A = 1;
		UNOWN_B = 2;
		UNOWN_C = 3;
		UNOWN_D = 4;
		UNOWN_E = 5;
		UNOWN_F = 6;
		UNOWN_G = 7;
		UNOWN_H = 8;
		UNOWN_I = 9;
		UNOWN_J = 10;
		UNOWN_K = 11;
		UNOWN_L = 12;
		UNOWN_M = 13;
		UNOWN_N = 14;
		UNOWN_O = 15;
		UNOWN_P = 16;
		UNOWN_Q = 17;
		UNOWN_R = 18;
		UNOWN_S = 19;
		UNOWN_T = 20;
		UNOWN_U = 21;
		UNOWN_V = 22;
		UNOWN_W = 23;
		UNOWN_X = 24;
		UNOWN_Y = 25;
		UNOWN_Z = 26;
		UNOWN_EXCLAMATION_POINT = 27;
		UNOWN_QUESTION_MARK = 28;
		CASTFORM_NORMAL = 29;
		CASTFORM_SUNNY = 30;
		CASTFORM_RAINY = 31;
		CASTFORM_SNOWY = 32;
		DEOXYS_NORMAL = 33;
		DEOXYS_ATTACK = 34;
		DEOXYS_DEFENSE = 35;
		DEOXYS_SPEED = 36;
		SPINDA_00 = 37;
		SPINDA_01 = 38;
		SPINDA_02 = 39;
		SPINDA_03 = 40;
		SPINDA_04 = 41;
		SPINDA_05 = 42;
		SPINDA_06 = 43;
		SPINDA_07 = 44;
		RATTATA_NORMAL = 45;
		RATTATA_ALOLA = 46;
		RATICATE_NORMAL = 47;
		RATICATE_ALOLA = 48;
		RAICHU_NORMAL = 49;
		RAICHU_ALOLA = 50;
		SANDSHREW_NORMAL = 51;
		SANDSHREW_ALOLA = 52;
		SANDSLASH_NORMAL = 53;
		SANDSLASH_ALOLA = 54;
		VULPIX_NORMAL = 55;
		VULPIX_ALOLA = 56;
		NINETALES_NORMAL = 57;
		NINETALES_ALOLA = 58;
		DIGLETT_NORMAL = 59;
		DIGLETT_ALOLA = 60;
		DUGTRIO_NORMAL = 61;
		DUGTRIO_ALOLA = 62;
		MEOWTH_NORMAL = 63;
		MEOWTH_ALOLA = 64;
		PERSIAN_NORMAL = 65;
		PERSIAN_ALOLA = 66;
		GEODUDE_NORMAL = 67;
		GEODUDE_ALOLA = 68;
		GRAVELER_NORMAL = 69;
		GRAVELER_ALOLA = 70;
		GOLEM_NORMAL = 71;
		GOLEM_ALOLA = 72;
		GRIMER_NORMAL = 73;
		GRIMER_ALOLA = 74;
		MUK_NORMAL = 75;
		MUK_ALOLA = 76;
		EXEGGUTOR_NORMAL = 77;
		EXEGGUTOR_ALOLA = 78;
		MAROWAK_NORMAL = 79;
		MAROWAK_ALOLA = 80;
		ROTOM_NORMAL = 81;
		ROTOM_FROST = 82;
		ROTOM_FAN = 83;
		ROTOM_MOW = 84;
		ROTOM_WASH = 85;
		ROTOM_HEAT = 86;
		WORMADAM_PLANT = 87;
		WORMADAM_SANDY = 88;
		WORMADAM_TRASH = 89;
		GIRATINA_ALTERED = 90;
		GIRATINA_ORIGIN = 91;
		SHAYMIN_SKY = 92;
		SHAYMIN_LAND = 93;
		CHERRIM_OVERCAST = 94;
		CHERRIM_SUNNY = 95;
		SHELLOS_WEST_SEA = 96;
		SHELLOS_EAST_SEA = 97;
		GASTRODON_WEST_SEA = 98;
		GASTRODON_EAST_SEA = 99;
		ARCEUS_NORMAL = 100;
		ARCEUS_FIGHTING = 101;
		ARCEUS_FLYING = 102;
		ARCEUS_POISON = 103;
		ARCEUS_GROUND = 104;
		ARCEUS_ROCK = 105;
		ARCEUS_BUG = 106;
		ARCEUS_GHOST = 107;
		ARCEUS_STEEL = 108;
		ARCEUS_FIRE = 109;
		ARCEUS_WATER = 110;
		ARCEUS_GRASS = 111;
		ARCEUS_ELECTRIC = 112;
		ARCEUS_PSYCHIC = 113;
		ARCEUS_ICE = 114;
		ARCEUS_DRAGON = 115;
		ARCEUS_DARK = 116;
		ARCEUS_FAIRY = 117;
		BURMY_PLANT = 118;
		BURMY_SANDY = 119;
		BURMY_TRASH = 120;
		SPINDA_08 = 121;
		SPINDA_09 = 122;
		SPINDA_10 = 123;
		SPINDA_11 = 124;
		SPINDA_12 = 125;
		SPINDA_13 = 126;
		SPINDA_14 = 127;
		SPINDA_15 = 128;
		SPINDA_16 = 129;
		SPINDA_17 = 130;
		SPINDA_18 = 131;
		SPINDA_19 = 132;
		MEWTWO_A = 133;
		MEWTWO_NORMAL = 135;
		BASCULIN_RED_STRIPED = 136;
		BASCULIN_BLUE_STRIPED = 137;
		DARMANITAN_STANDARD = 138;
		DARMANITAN_ZEN = 139;
		TORNADUS_INCARNATE = 140;
		TORNADUS_THERIAN = 141;
		THUNDURUS_INCARNATE = 142;
		THUNDURUS_THERIAN = 143;
		LANDORUS_INCARNATE = 144;
		LANDORUS_THERIAN = 145;
		KYUREM_NORMAL = 146;
		KYUREM_BLACK = 147;
		KYUREM_WHITE = 148;
		KELDEO_ORDINARY = 149;
		KELDEO_RESOLUTE = 150;
		MELOETTA_ARIA = 151;
		MELOETTA_PIROUETTE = 152;
		RATTATA_SHADOW = 153;
		RATTATA_PURIFIED = 154;
		RATICATE_SHADOW = 155;
		RATICATE_PURIFIED = 156;
		ZUBAT_NORMAL = 157;
		ZUBAT_SHADOW = 158;
		ZUBAT_PURIFIED = 159;
		GOLBAT_NORMAL = 160;
		GOLBAT_SHADOW = 161;
		GOLBAT_PURIFIED = 162;
		BULBASAUR_NORMAL = 163;
		BULBASAUR_SHADOW = 164;
		BULBASAUR_PURIFIED = 165;
		IVYSAUR_NORMAL = 166;
		IVYSAUR_SHADOW = 167;
		IVYSAUR_PURIFIED = 168;
		VENUSAUR_NORMAL = 169;
		VENUSAUR_SHADOW = 170;
		VENUSAUR_PURIFIED = 171;
		CHARMANDER_NORMAL = 172;
		CHARMANDER_SHADOW = 173;
		CHARMANDER_PURIFIED = 174;
		CHARMELEON_NORMAL = 175;
		CHARMELEON_SHADOW = 176;
		CHARMELEON_PURIFIED = 177;
		CHARIZARD_NORMAL = 178;
		CHARIZARD_SHADOW = 179;
		CHARIZARD_PURIFIED = 180;
		SQUIRTLE_NORMAL = 181;
		SQUIRTLE_SHADOW = 182;
		SQUIRTLE_PURIFIED = 183;
		WARTORTLE_NORMAL = 184;
		WARTORTLE_SHADOW = 185;
		WARTORTLE_PURIFIED = 186;
		BLASTOISE_NORMAL = 187;
		BLASTOISE_SHADOW = 188;
		BLASTOISE_PURIFIED = 189;
		DRATINI_NORMAL = 190;
		DRATINI_SHADOW = 191;
		DRATINI_PURIFIED = 192;
		DRAGONAIR_NORMAL = 193;
		DRAGONAIR_SHADOW = 194;
		DRAGONAIR_PURIFIED = 195;
		DRAGONITE_NORMAL = 196;
		DRAGONITE_SHADOW = 197;
		DRAGONITE_PURIFIED = 198;
		SNORLAX_NORMAL = 199;
		SNORLAX_SHADOW = 200;
		SNORLAX_PURIFIED = 201;
		CROBAT_NORMAL = 202;
		CROBAT_SHADOW = 203;
		CROBAT_PURIFIED = 204;
		MUDKIP_NORMAL = 205;
		MUDKIP_SHADOW = 206;
		MUDKIP_PURIFIED = 207;
		MARSHTOMP_NORMAL = 208;
		MARSHTOMP_SHADOW = 209;
		MARSHTOMP_PURIFIED = 210;
		SWAMPERT_NORMAL = 211;
		SWAMPERT_SHADOW = 212;
		SWAMPERT_PURIFIED = 213;
		DROWZEE_NORMAL = 214;
		DROWZEE_SHADOW = 215;
		DROWZEE_PURIFIED = 216;
		HYPNO_NORMAL = 217;
		HYPNO_SHADOW = 218;
		HYPNO_PURIFIED = 219;
		GRIMER_SHADOW = 220;
		GRIMER_PURIFIED = 221;
		MUK_SHADOW = 222;
		MUK_PURIFIED = 223;
		CUBONE_NORMAL = 224;
		CUBONE_SHADOW = 225;
		CUBONE_PURIFIED = 226;
		MAROWAK_SHADOW = 227;
		MAROWAK_PURIFIED = 228;
		HOUNDOUR_NORMAL = 229;
		HOUNDOUR_SHADOW = 230;
		HOUNDOUR_PURIFIED = 231;
		HOUNDOOM_NORMAL = 232;
		HOUNDOOM_SHADOW = 233;
		HOUNDOOM_PURIFIED = 234;
		POLIWAG_NORMAL = 235;
		POLIWAG_SHADOW = 236;
		POLIWAG_PURIFIED = 237;
		POLIWHIRL_NORMAL = 238;
		POLIWHIRL_SHADOW = 239;
		POLIWHIRL_PURIFIED = 240;
		POLIWRATH_NORMAL = 241;
		POLIWRATH_SHADOW = 242;
		POLIWRATH_PURIFIED = 243;
		POLITOED_NORMAL = 244;
		POLITOED_SHADOW = 245;
		POLITOED_PURIFIED = 246;
		SCYTHER_NORMAL = 247;
		SCYTHER_SHADOW = 248;
		SCYTHER_PURIFIED = 249;
		SCIZOR_NORMAL = 250;
		SCIZOR_SHADOW = 251;
		SCIZOR_PURIFIED = 252;
		MAGIKARP_NORMAL = 253;
		MAGIKARP_SHADOW = 254;
		MAGIKARP_PURIFIED = 255;
		GYARADOS_NORMAL = 256;
		GYARADOS_SHADOW = 257;
		GYARADOS_PURIFIED = 258;
		VENONAT_NORMAL = 259;
		VENONAT_SHADOW = 260;
		VENONAT_PURIFIED = 261;
		VENOMOTH_NORMAL = 262;
		VENOMOTH_SHADOW = 263;
		VENOMOTH_PURIFIED = 264;
		ODDISH_NORMAL = 265;
		ODDISH_SHADOW = 266;
		ODDISH_PURIFIED = 267;
		GLOOM_NORMAL = 268;
		GLOOM_SHADOW = 269;
		GLOOM_PURIFIED = 270;
		VILEPLUME_NORMAL = 271;
		VILEPLUME_SHADOW = 272;
		VILEPLUME_PURIFIED = 273;
		BELLOSSOM_NORMAL = 274;
		BELLOSSOM_SHADOW = 275;
		BELLOSSOM_PURIFIED = 276;
		HITMONCHAN_NORMAL = 277;
		HITMONCHAN_SHADOW = 278;
		HITMONCHAN_PURIFIED = 279;
		GROWLITHE_NORMAL = 280;
		GROWLITHE_SHADOW = 281;
		GROWLITHE_PURIFIED = 282;
		ARCANINE_NORMAL = 283;
		ARCANINE_SHADOW = 284;
		ARCANINE_PURIFIED = 285;
		PSYDUCK_NORMAL = 286;
		PSYDUCK_SHADOW = 287;
		PSYDUCK_PURIFIED = 288;
		GOLDUCK_NORMAL = 289;
		GOLDUCK_SHADOW = 290;
		GOLDUCK_PURIFIED = 291;
		RALTS_NORMAL = 292;
		RALTS_SHADOW = 293;
		RALTS_PURIFIED = 294;
		KIRLIA_NORMAL = 295;
		KIRLIA_SHADOW = 296;
		KIRLIA_PURIFIED = 297;
		GARDEVOIR_NORMAL = 298;
		GARDEVOIR_SHADOW = 299;
		GARDEVOIR_PURIFIED = 300;
		GALLADE_NORMAL = 301;
		GALLADE_SHADOW = 302;
		GALLADE_PURIFIED = 303;
		ABRA_NORMAL = 304;
		ABRA_SHADOW = 305;
		ABRA_PURIFIED = 306;
		KADABRA_NORMAL = 307;
		KADABRA_SHADOW = 308;
		KADABRA_PURIFIED = 309;
		ALAKAZAM_NORMAL = 310;
		ALAKAZAM_SHADOW = 311;
		ALAKAZAM_PURIFIED = 312;
		LARVITAR_NORMAL = 313;
		LARVITAR_SHADOW = 314;
		LARVITAR_PURIFIED = 315;
		PUPITAR_NORMAL = 316;
		PUPITAR_SHADOW = 317;
		PUPITAR_PURIFIED = 318;
		TYRANITAR_NORMAL = 319;
		TYRANITAR_SHADOW = 320;
		TYRANITAR_PURIFIED = 321;
		LAPRAS_NORMAL = 322;
		LAPRAS_SHADOW = 323;
		LAPRAS_PURIFIED = 324;
		DEERLING_SPRING = 585;
		DEERLING_SUMMER = 586;
		DEERLING_AUTUMN = 587;
		DEERLING_WINTER = 588;
		SAWSBUCK_SPRING = 589;
		SAWSBUCK_SUMMER = 590;
		SAWSBUCK_AUTUMN = 591;
		SAWSBUCK_WINTER = 592;
		GENESECT_NORMAL = 593;
		GENESECT_SHOCK = 594;
		GENESECT_BURN = 595;
		GENESECT_CHILL = 596;
		GENESECT_DOUSE = 597;
		PIKACHU_NORMAL = 598;
		WURMPLE_NORMAL = 600;
		WOBBUFFET_NORMAL = 602;
		CACNEA_NORMAL = 610;
		CACNEA_SHADOW = 611;
		CACNEA_PURIFIED = 612;
		CACTURNE_NORMAL = 613;
		CACTURNE_SHADOW = 614;
		CACTURNE_PURIFIED = 615;
		WEEDLE_NORMAL = 616;
		WEEDLE_SHADOW = 617;
		WEEDLE_PURIFIED = 618;
		KAKUNA_NORMAL = 619;
		KAKUNA_SHADOW = 620;
		KAKUNA_PURIFIED = 621;
		BEEDRILL_NORMAL = 622;
		BEEDRILL_SHADOW = 623;
		BEEDRILL_PURIFIED = 624;
		SEEDOT_NORMAL = 625;
		SEEDOT_SHADOW = 626;
		SEEDOT_PURIFIED = 627;
		NUZLEAF_NORMAL = 628;
		NUZLEAF_SHADOW = 629;
		NUZLEAF_PURIFIED = 630;
		SHIFTRY_NORMAL = 631;
		SHIFTRY_SHADOW = 632;
		SHIFTRY_PURIFIED = 633;
		MAGMAR_NORMAL = 634;
		MAGMAR_SHADOW = 635;
		MAGMAR_PURIFIED = 636;
		MAGMORTAR_NORMAL = 637;
		MAGMORTAR_SHADOW = 638;
		MAGMORTAR_PURIFIED = 639;
		ELECTABUZZ_NORMAL = 640;
		ELECTABUZZ_SHADOW = 641;
		ELECTABUZZ_PURIFIED = 642;
		ELECTIVIRE_NORMAL = 643;
		ELECTIVIRE_SHADOW = 644;
		ELECTIVIRE_PURIFIED = 645;
		MAREEP_NORMAL = 646;
		MAREEP_SHADOW = 647;
		MAREEP_PURIFIED = 648;
		FLAAFFY_NORMAL = 649;
		FLAAFFY_SHADOW = 650;
		FLAAFFY_PURIFIED = 651;
		AMPHAROS_NORMAL = 652;
		AMPHAROS_SHADOW = 653;
		AMPHAROS_PURIFIED = 654;
		MAGNEMITE_NORMAL = 655;
		MAGNEMITE_SHADOW = 656;
		MAGNEMITE_PURIFIED = 657;
		MAGNETON_NORMAL = 658;
		MAGNETON_SHADOW = 659;
		MAGNETON_PURIFIED = 660;
		MAGNEZONE_NORMAL = 661;
		MAGNEZONE_SHADOW = 662;
		MAGNEZONE_PURIFIED = 663;
		BELLSPROUT_NORMAL = 664;
		BELLSPROUT_SHADOW = 665;
		BELLSPROUT_PURIFIED = 666;
		WEEPINBELL_NORMAL = 667;
		WEEPINBELL_SHADOW = 668;
		WEEPINBELL_PURIFIED = 669;
		VICTREEBEL_NORMAL = 670;
		VICTREEBEL_SHADOW = 671;
		VICTREEBEL_PURIFIED = 672;
		SANDSHREW_SHADOW = 673;
		SANDSHREW_PURIFIED = 674;
		SANDSLASH_SHADOW = 675;
		SANDSLASH_PURIFIED = 676;
		PORYGON_NORMAL = 677;
		PORYGON_SHADOW = 678;
		PORYGON_PURIFIED = 679;
		PORYGON2_NORMAL = 680;
		PORYGON2_SHADOW = 681;
		PORYGON2_PURIFIED = 682;
		PORYGON_Z_NORMAL = 683;
		PORYGON_Z_SHADOW = 684;
		PORYGON_Z_PURIFIED = 685;
		WOBBUFFET_SHADOW = 686;
		WOBBUFFET_PURIFIED = 687;
		TURTWIG_NORMAL = 688;
		TURTWIG_SHADOW = 689;
		TURTWIG_PURIFIED = 690;
		GROTLE_NORMAL = 691;
		GROTLE_SHADOW = 692;
		GROTLE_PURIFIED = 693;
		TORTERRA_NORMAL = 694;
		TORTERRA_SHADOW = 695;
		TORTERRA_PURIFIED = 696;
		EKANS_NORMAL = 697;
		EKANS_SHADOW = 698;
		EKANS_PURIFIED = 699;
		ARBOK_NORMAL = 700;
		ARBOK_SHADOW = 701;
		ARBOK_PURIFIED = 702;
		KOFFING_NORMAL = 703;
		KOFFING_SHADOW = 704;
		KOFFING_PURIFIED = 705;
		WEEZING_NORMAL = 706;
		WEEZING_SHADOW = 707;
		WEEZING_PURIFIED = 708;
		MEOWTH_SHADOW = 709;
		MEOWTH_PURIFIED = 710;
		PERSIAN_SHADOW = 711;
		PERSIAN_PURIFIED = 712;
		HITMONLEE_NORMAL = 713;
		HITMONLEE_SHADOW = 714;
		HITMONLEE_PURIFIED = 715;
		ARTICUNO_NORMAL = 716;
		ARTICUNO_SHADOW = 717;
		ARTICUNO_PURIFIED = 718;
		MISDREAVUS_NORMAL = 719;
		MISDREAVUS_SHADOW = 720;
		MISDREAVUS_PURIFIED = 721;
		MISMAGIUS_NORMAL = 722;
		MISMAGIUS_SHADOW = 723;
		MISMAGIUS_PURIFIED = 724;
		VULPIX_SHADOW = 725;
		VULPIX_PURIFIED = 726;
		NINETALES_SHADOW = 727;
		NINETALES_PURIFIED = 728;
		EXEGGCUTE_NORMAL = 729;
		EXEGGCUTE_SHADOW = 730;
		EXEGGCUTE_PURIFIED = 731;
		EXEGGUTOR_SHADOW = 732;
		EXEGGUTOR_PURIFIED = 733;
		CARVANHA_NORMAL = 734;
		CARVANHA_SHADOW = 735;
		CARVANHA_PURIFIED = 736;
		SHARPEDO_NORMAL = 737;
		SHARPEDO_SHADOW = 738;
		SHARPEDO_PURIFIED = 739;
		OMANYTE_NORMAL = 740;
		OMANYTE_SHADOW = 741;
		OMANYTE_PURIFIED = 742;
		OMASTAR_NORMAL = 743;
		OMASTAR_SHADOW = 744;
		OMASTAR_PURIFIED = 745;
		TRAPINCH_NORMAL = 746;
		TRAPINCH_SHADOW = 747;
		TRAPINCH_PURIFIED = 748;
		VIBRAVA_NORMAL = 749;
		VIBRAVA_SHADOW = 750;
		VIBRAVA_PURIFIED = 751;
		FLYGON_NORMAL = 752;
		FLYGON_SHADOW = 753;
		FLYGON_PURIFIED = 754;
		BAGON_NORMAL = 755;
		BAGON_SHADOW = 756;
		BAGON_PURIFIED = 757;
		SHELGON_NORMAL = 758;
		SHELGON_SHADOW = 759;
		SHELGON_PURIFIED = 760;
		SALAMENCE_NORMAL = 761;
		SALAMENCE_SHADOW = 762;
		SALAMENCE_PURIFIED = 763;
		BELDUM_NORMAL = 764;
		BELDUM_SHADOW = 765;
		BELDUM_PURIFIED = 766;
		METANG_NORMAL = 767;
		METANG_SHADOW = 768;
		METANG_PURIFIED = 769;
		METAGROSS_NORMAL = 770;
		METAGROSS_SHADOW = 771;
		METAGROSS_PURIFIED = 772;
		ZAPDOS_NORMAL = 773;
		ZAPDOS_SHADOW = 774;
		ZAPDOS_PURIFIED = 775;
		NIDORAN_NORMAL = 776;
		NIDORAN_SHADOW = 777;
		NIDORAN_PURIFIED = 778;
		NIDORINA_NORMAL = 779;
		NIDORINA_SHADOW = 780;
		NIDORINA_PURIFIED = 781;
		NIDOQUEEN_NORMAL = 782;
		NIDOQUEEN_SHADOW = 783;
		NIDOQUEEN_PURIFIED = 784;
		NIDORINO_NORMAL = 785;
		NIDORINO_SHADOW = 786;
		NIDORINO_PURIFIED = 787;
		NIDOKING_NORMAL = 788;
		NIDOKING_SHADOW = 789;
		NIDOKING_PURIFIED = 790;
		STUNKY_NORMAL = 791;
		STUNKY_SHADOW = 792;
		STUNKY_PURIFIED = 793;
		SKUNTANK_NORMAL = 794;
		SKUNTANK_SHADOW = 795;
		SKUNTANK_PURIFIED = 796;
		SNEASEL_NORMAL = 797;
		SNEASEL_SHADOW = 798;
		SNEASEL_PURIFIED = 799;
		WEAVILE_NORMAL = 800;
		WEAVILE_SHADOW = 801;
		WEAVILE_PURIFIED = 802;
		GLIGAR_NORMAL = 803;
		GLIGAR_SHADOW = 804;
		GLIGAR_PURIFIED = 805;
		GLISCOR_NORMAL = 806;
		GLISCOR_SHADOW = 807;
		GLISCOR_PURIFIED = 808;
		MACHOP_NORMAL = 809;
		MACHOP_SHADOW = 810;
		MACHOP_PURIFIED = 811;
		MACHOKE_NORMAL = 812;
		MACHOKE_SHADOW = 813;
		MACHOKE_PURIFIED = 814;
		MACHAMP_NORMAL = 815;
		MACHAMP_SHADOW = 816;
		MACHAMP_PURIFIED = 817;
		CHIMCHAR_NORMAL = 818;
		CHIMCHAR_SHADOW = 819;
		CHIMCHAR_PURIFIED = 820;
		MONFERNO_NORMAL = 821;
		MONFERNO_SHADOW = 822;
		MONFERNO_PURIFIED = 823;
		INFERNAPE_NORMAL = 824;
		INFERNAPE_SHADOW = 825;
		INFERNAPE_PURIFIED = 826;
		SHUCKLE_NORMAL = 827;
		SHUCKLE_SHADOW = 828;
		SHUCKLE_PURIFIED = 829;
		ABSOL_NORMAL = 830;
		ABSOL_SHADOW = 831;
		ABSOL_PURIFIED = 832;
		MAWILE_NORMAL = 833;
		MAWILE_SHADOW = 834;
		MAWILE_PURIFIED = 835;
		MOLTRES_NORMAL = 836;
		MOLTRES_SHADOW = 837;
		MOLTRES_PURIFIED = 838;
		KANGASKHAN_NORMAL = 839;
		KANGASKHAN_SHADOW = 840;
		KANGASKHAN_PURIFIED = 841;
		DIGLETT_SHADOW = 842;
		DIGLETT_PURIFIED = 843;
		DUGTRIO_SHADOW = 844;
		DUGTRIO_PURIFIED = 845;
		RHYHORN_NORMAL = 846;
		RHYHORN_SHADOW = 847;
		RHYHORN_PURIFIED = 848;
		RHYDON_NORMAL = 849;
		RHYDON_SHADOW = 850;
		RHYDON_PURIFIED = 851;
		RHYPERIOR_NORMAL = 852;
		RHYPERIOR_SHADOW = 853;
		RHYPERIOR_PURIFIED = 854;
		MURKROW_NORMAL = 855;
		MURKROW_SHADOW = 856;
		MURKROW_PURIFIED = 857;
		HONCHKROW_NORMAL = 858;
		HONCHKROW_SHADOW = 859;
		HONCHKROW_PURIFIED = 860;
		GIBLE_NORMAL = 861;
		GIBLE_SHADOW = 862;
		GIBLE_PURIFIED = 863;
		GABITE_NORMAL = 864;
		GABITE_SHADOW = 865;
		GABITE_PURIFIED = 866;
		GARCHOMP_NORMAL = 867;
		GARCHOMP_SHADOW = 868;
		GARCHOMP_PURIFIED = 869;
		KRABBY_NORMAL = 870;
		KRABBY_SHADOW = 871;
		KRABBY_PURIFIED = 872;
		KINGLER_NORMAL = 873;
		KINGLER_SHADOW = 874;
		KINGLER_PURIFIED = 875;
		SHELLDER_NORMAL = 876;
		SHELLDER_SHADOW = 877;
		SHELLDER_PURIFIED = 878;
		CLOYSTER_NORMAL = 879;
		CLOYSTER_SHADOW = 880;
		CLOYSTER_PURIFIED = 881;
		GEODUDE_SHADOW = 882;
		GEODUDE_PURIFIED = 883;
		GRAVELER_SHADOW = 884;
		GRAVELER_PURIFIED = 885;
		GOLEM_SHADOW = 886;
		GOLEM_PURIFIED = 887;
		HIPPOPOTAS_NORMAL = 888;
		HIPPOPOTAS_SHADOW = 889;
		HIPPOPOTAS_PURIFIED = 890;
		HIPPOWDON_NORMAL = 891;
		HIPPOWDON_SHADOW = 892;
		HIPPOWDON_PURIFIED = 893;
		PIKACHU_FALL_2019 = 894;
		SQUIRTLE_FALL_2019 = 895;
		CHARMANDER_FALL_2019 = 896;
		BULBASAUR_FALL_2019 = 897;
		PINSIR_NORMAL = 898;
		PINSIR_SHADOW = 899;
		PINSIR_PURIFIED = 900;
		PIKACHU_VS_2019 = 901;
		ONIX_NORMAL = 902;
		ONIX_SHADOW = 903;
		ONIX_PURIFIED = 904;
		STEELIX_NORMAL = 905;
		STEELIX_SHADOW = 906;
		STEELIX_PURIFIED = 907;
		SHUPPET_NORMAL = 908;
		SHUPPET_SHADOW = 909;
		SHUPPET_PURIFIED = 910;
		BANETTE_NORMAL = 911;
		BANETTE_SHADOW = 912;
		BANETTE_PURIFIED = 913;
		DUSKULL_NORMAL = 914;
		DUSKULL_SHADOW = 915;
		DUSKULL_PURIFIED = 916;
		DUSCLOPS_NORMAL = 917;
		DUSCLOPS_SHADOW = 918;
		DUSCLOPS_PURIFIED = 919;
		DUSKNOIR_NORMAL = 920;
		DUSKNOIR_SHADOW = 921;
		DUSKNOIR_PURIFIED = 922;
		SABLEYE_NORMAL = 923;
		SABLEYE_SHADOW = 924;
		SABLEYE_PURIFIED = 925;
		SNORUNT_NORMAL = 926;
		SNORUNT_SHADOW = 927;
		SNORUNT_PURIFIED = 928;
		GLALIE_NORMAL = 929;
		GLALIE_SHADOW = 930;
		GLALIE_PURIFIED = 931;
		SNOVER_NORMAL = 932;
		SNOVER_SHADOW = 933;
		SNOVER_PURIFIED = 934;
		ABOMASNOW_NORMAL = 935;
		ABOMASNOW_SHADOW = 936;
		ABOMASNOW_PURIFIED = 937;
		DELIBIRD_NORMAL = 938;
		DELIBIRD_SHADOW = 939;
		DELIBIRD_PURIFIED = 940;
		STANTLER_NORMAL = 941;
		STANTLER_SHADOW = 942;
		STANTLER_PURIFIED = 943;
		WEEZING_GALARIAN = 944;
		ZIGZAGOON_NORMAL = 945;
		ZIGZAGOON_GALARIAN = 946;
		LINOONE_NORMAL = 947;
		LINOONE_GALARIAN = 948;
		PIKACHU_COPY_2019 = 949;
		VENUSAUR_COPY_2019 = 950;
		CHARIZARD_COPY_2019 = 951;
		BLASTOISE_COPY_2019 = 952;
		CATERPIE_NORMAL = 953;
		CATERPIE_SHADOW = 954;
		CATERPIE_PURIFIED = 955;
		METAPOD_NORMAL = 956;
		METAPOD_SHADOW = 957;
		METAPOD_PURIFIED = 958;
		BUTTERFREE_NORMAL = 959;
		BUTTERFREE_SHADOW = 960;
		BUTTERFREE_PURIFIED = 961;
		PIDGEY_NORMAL = 962;
		PIDGEY_SHADOW = 963;
		PIDGEY_PURIFIED = 964;
		PIDGEOTTO_NORMAL = 965;
		PIDGEOTTO_SHADOW = 966;
		PIDGEOTTO_PURIFIED = 967;
		PIDGEOT_NORMAL = 968;
		PIDGEOT_SHADOW = 969;
		PIDGEOT_PURIFIED = 970;
		SPEAROW_NORMAL = 971;
		SPEAROW_SHADOW = 972;
		SPEAROW_PURIFIED = 973;
		FEAROW_NORMAL = 974;
		FEAROW_SHADOW = 975;
		FEAROW_PURIFIED = 976;
		PIKACHU_SHADOW = 977;
		PIKACHU_PURIFIED = 978;
		RAICHU_SHADOW = 979;
		RAICHU_PURIFIED = 980;
		CLEFAIRY_NORMAL = 981;
		CLEFAIRY_SHADOW = 982;
		CLEFAIRY_PURIFIED = 983;
		CLEFABLE_NORMAL = 984;
		CLEFABLE_SHADOW = 985;
		CLEFABLE_PURIFIED = 986;
		JIGGLYPUFF_NORMAL = 987;
		JIGGLYPUFF_SHADOW = 988;
		JIGGLYPUFF_PURIFIED = 989;
		WIGGLYTUFF_NORMAL = 990;
		WIGGLYTUFF_SHADOW = 991;
		WIGGLYTUFF_PURIFIED = 992;
		PARAS_NORMAL = 993;
		PARAS_SHADOW = 994;
		PARAS_PURIFIED = 995;
		PARASECT_NORMAL = 996;
		PARASECT_SHADOW = 997;
		PARASECT_PURIFIED = 998;
		MANKEY_NORMAL = 999;
		MANKEY_SHADOW = 1000;
		MANKEY_PURIFIED = 1001;
		PRIMEAPE_NORMAL = 1002;
		PRIMEAPE_SHADOW = 1003;
		PRIMEAPE_PURIFIED = 1004;
		TENTACOOL_NORMAL = 1005;
		TENTACOOL_SHADOW = 1006;
		TENTACOOL_PURIFIED = 1007;
		TENTACRUEL_NORMAL = 1008;
		TENTACRUEL_SHADOW = 1009;
		TENTACRUEL_PURIFIED = 1010;
		PONYTA_NORMAL = 1011;
		PONYTA_SHADOW = 1012;
		PONYTA_PURIFIED = 1013;
		RAPIDASH_NORMAL = 1014;
		RAPIDASH_SHADOW = 1015;
		RAPIDASH_PURIFIED = 1016;
		SLOWPOKE_NORMAL = 1017;
		SLOWPOKE_SHADOW = 1018;
		SLOWPOKE_PURIFIED = 1019;
		SLOWBRO_NORMAL = 1020;
		SLOWBRO_SHADOW = 1021;
		SLOWBRO_PURIFIED = 1022;
		FARFETCHD_NORMAL = 1023;
		FARFETCHD_SHADOW = 1024;
		FARFETCHD_PURIFIED = 1025;
		DODUO_NORMAL = 1026;
		DODUO_SHADOW = 1027;
		DODUO_PURIFIED = 1028;
		DODRIO_NORMAL = 1029;
		DODRIO_SHADOW = 1030;
		DODRIO_PURIFIED = 1031;
		SEEL_NORMAL = 1032;
		SEEL_SHADOW = 1033;
		SEEL_PURIFIED = 1034;
		DEWGONG_NORMAL = 1035;
		DEWGONG_SHADOW = 1036;
		DEWGONG_PURIFIED = 1037;
		GASTLY_NORMAL = 1038;
		GASTLY_SHADOW = 1039;
		GASTLY_PURIFIED = 1040;
		HAUNTER_NORMAL = 1041;
		HAUNTER_SHADOW = 1042;
		HAUNTER_PURIFIED = 1043;
		GENGAR_NORMAL = 1044;
		GENGAR_SHADOW = 1045;
		GENGAR_PURIFIED = 1046;
		VOLTORB_NORMAL = 1047;
		VOLTORB_SHADOW = 1048;
		VOLTORB_PURIFIED = 1049;
		ELECTRODE_NORMAL = 1050;
		ELECTRODE_SHADOW = 1051;
		ELECTRODE_PURIFIED = 1052;
		LICKITUNG_NORMAL = 1053;
		LICKITUNG_SHADOW = 1054;
		LICKITUNG_PURIFIED = 1055;
		CHANSEY_NORMAL = 1056;
		CHANSEY_SHADOW = 1057;
		CHANSEY_PURIFIED = 1058;
		TANGELA_NORMAL = 1059;
		TANGELA_SHADOW = 1060;
		TANGELA_PURIFIED = 1061;
		HORSEA_NORMAL = 1062;
		HORSEA_SHADOW = 1063;
		HORSEA_PURIFIED = 1064;
		SEADRA_NORMAL = 1065;
		SEADRA_SHADOW = 1066;
		SEADRA_PURIFIED = 1067;
		GOLDEEN_NORMAL = 1068;
		GOLDEEN_SHADOW = 1069;
		GOLDEEN_PURIFIED = 1070;
		SEAKING_NORMAL = 1071;
		SEAKING_SHADOW = 1072;
		SEAKING_PURIFIED = 1073;
		STARYU_NORMAL = 1074;
		STARYU_SHADOW = 1075;
		STARYU_PURIFIED = 1076;
		STARMIE_NORMAL = 1077;
		STARMIE_SHADOW = 1078;
		STARMIE_PURIFIED = 1079;
		MR_MIME_NORMAL = 1080;
		MR_MIME_SHADOW = 1081;
		MR_MIME_PURIFIED = 1082;
		JYNX_NORMAL = 1083;
		JYNX_SHADOW = 1084;
		JYNX_PURIFIED = 1085;
		TAUROS_NORMAL = 1086;
		TAUROS_SHADOW = 1087;
		TAUROS_PURIFIED = 1088;
		DITTO_NORMAL = 1089;
		DITTO_SHADOW = 1090;
		DITTO_PURIFIED = 1091;
		EEVEE_NORMAL = 1092;
		EEVEE_SHADOW = 1093;
		EEVEE_PURIFIED = 1094;
		VAPOREON_NORMAL = 1095;
		VAPOREON_SHADOW = 1096;
		VAPOREON_PURIFIED = 1097;
		JOLTEON_NORMAL = 1098;
		JOLTEON_SHADOW = 1099;
		JOLTEON_PURIFIED = 1100;
		FLAREON_NORMAL = 1101;
		FLAREON_SHADOW = 1102;
		FLAREON_PURIFIED = 1103;
		KABUTO_NORMAL = 1104;
		KABUTO_SHADOW = 1105;
		KABUTO_PURIFIED = 1106;
		KABUTOPS_NORMAL = 1107;
		KABUTOPS_SHADOW = 1108;
		KABUTOPS_PURIFIED = 1109;
		AERODACTYL_NORMAL = 1110;
		AERODACTYL_SHADOW = 1111;
		AERODACTYL_PURIFIED = 1112;
		MEWTWO_SHADOW = 1113;
		MEWTWO_PURIFIED = 1114;
		MEW_NORMAL = 1115;
		MEW_SHADOW = 1116;
		MEW_PURIFIED = 1117;
		CHIKORITA_NORMAL = 1118;
		CHIKORITA_SHADOW = 1119;
		CHIKORITA_PURIFIED = 1120;
		BAYLEEF_NORMAL = 1121;
		BAYLEEF_SHADOW = 1122;
		BAYLEEF_PURIFIED = 1123;
		MEGANIUM_NORMAL = 1124;
		MEGANIUM_SHADOW = 1125;
		MEGANIUM_PURIFIED = 1126;
		CYNDAQUIL_NORMAL = 1127;
		CYNDAQUIL_SHADOW = 1128;
		CYNDAQUIL_PURIFIED = 1129;
		QUILAVA_NORMAL = 1130;
		QUILAVA_SHADOW = 1131;
		QUILAVA_PURIFIED = 1132;
		TYPHLOSION_NORMAL = 1133;
		TYPHLOSION_SHADOW = 1134;
		TYPHLOSION_PURIFIED = 1135;
		TOTODILE_NORMAL = 1136;
		TOTODILE_SHADOW = 1137;
		TOTODILE_PURIFIED = 1138;
		CROCONAW_NORMAL = 1139;
		CROCONAW_SHADOW = 1140;
		CROCONAW_PURIFIED = 1141;
		FERALIGATR_NORMAL = 1142;
		FERALIGATR_SHADOW = 1143;
		FERALIGATR_PURIFIED = 1144;
		SENTRET_NORMAL = 1145;
		SENTRET_SHADOW = 1146;
		SENTRET_PURIFIED = 1147;
		FURRET_NORMAL = 1148;
		FURRET_SHADOW = 1149;
		FURRET_PURIFIED = 1150;
		HOOTHOOT_NORMAL = 1151;
		HOOTHOOT_SHADOW = 1152;
		HOOTHOOT_PURIFIED = 1153;
		NOCTOWL_NORMAL = 1154;
		NOCTOWL_SHADOW = 1155;
		NOCTOWL_PURIFIED = 1156;
		LEDYBA_NORMAL = 1157;
		LEDYBA_SHADOW = 1158;
		LEDYBA_PURIFIED = 1159;
		LEDIAN_NORMAL = 1160;
		LEDIAN_SHADOW = 1161;
		LEDIAN_PURIFIED = 1162;
		SPINARAK_NORMAL = 1163;
		SPINARAK_SHADOW = 1164;
		SPINARAK_PURIFIED = 1165;
		ARIADOS_NORMAL = 1166;
		ARIADOS_SHADOW = 1167;
		ARIADOS_PURIFIED = 1168;
		CHINCHOU_NORMAL = 1169;
		CHINCHOU_SHADOW = 1170;
		CHINCHOU_PURIFIED = 1171;
		LANTURN_NORMAL = 1172;
		LANTURN_SHADOW = 1173;
		LANTURN_PURIFIED = 1174;
		PICHU_NORMAL = 1175;
		PICHU_SHADOW = 1176;
		PICHU_PURIFIED = 1177;
		CLEFFA_NORMAL = 1178;
		CLEFFA_SHADOW = 1179;
		CLEFFA_PURIFIED = 1180;
		IGGLYBUFF_NORMAL = 1181;
		IGGLYBUFF_SHADOW = 1182;
		IGGLYBUFF_PURIFIED = 1183;
		TOGEPI_NORMAL = 1184;
		TOGEPI_SHADOW = 1185;
		TOGEPI_PURIFIED = 1186;
		TOGETIC_NORMAL = 1187;
		TOGETIC_SHADOW = 1188;
		TOGETIC_PURIFIED = 1189;
		NATU_NORMAL = 1190;
		NATU_SHADOW = 1191;
		NATU_PURIFIED = 1192;
		XATU_NORMAL = 1193;
		XATU_SHADOW = 1194;
		XATU_PURIFIED = 1195;
		MARILL_NORMAL = 1196;
		MARILL_SHADOW = 1197;
		MARILL_PURIFIED = 1198;
		AZUMARILL_NORMAL = 1199;
		AZUMARILL_SHADOW = 1200;
		AZUMARILL_PURIFIED = 1201;
		SUDOWOODO_NORMAL = 1202;
		SUDOWOODO_SHADOW = 1203;
		SUDOWOODO_PURIFIED = 1204;
		HOPPIP_NORMAL = 1205;
		HOPPIP_SHADOW = 1206;
		HOPPIP_PURIFIED = 1207;
		SKIPLOOM_NORMAL = 1208;
		SKIPLOOM_SHADOW = 1209;
		SKIPLOOM_PURIFIED = 1210;
		JUMPLUFF_NORMAL = 1211;
		JUMPLUFF_SHADOW = 1212;
		JUMPLUFF_PURIFIED = 1213;
		AIPOM_NORMAL = 1214;
		AIPOM_SHADOW = 1215;
		AIPOM_PURIFIED = 1216;
		SUNKERN_NORMAL = 1217;
		SUNKERN_SHADOW = 1218;
		SUNKERN_PURIFIED = 1219;
		SUNFLORA_NORMAL = 1220;
		SUNFLORA_SHADOW = 1221;
		SUNFLORA_PURIFIED = 1222;
		YANMA_NORMAL = 1223;
		YANMA_SHADOW = 1224;
		YANMA_PURIFIED = 1225;
		WOOPER_NORMAL = 1226;
		WOOPER_SHADOW = 1227;
		WOOPER_PURIFIED = 1228;
		QUAGSIRE_NORMAL = 1229;
		QUAGSIRE_SHADOW = 1230;
		QUAGSIRE_PURIFIED = 1231;
		ESPEON_NORMAL = 1232;
		ESPEON_SHADOW = 1233;
		ESPEON_PURIFIED = 1234;
		UMBREON_NORMAL = 1235;
		UMBREON_SHADOW = 1236;
		UMBREON_PURIFIED = 1237;
		SLOWKING_NORMAL = 1238;
		SLOWKING_SHADOW = 1239;
		SLOWKING_PURIFIED = 1240;
		GIRAFARIG_NORMAL = 1241;
		GIRAFARIG_SHADOW = 1242;
		GIRAFARIG_PURIFIED = 1243;
		PINECO_NORMAL = 1244;
		PINECO_SHADOW = 1245;
		PINECO_PURIFIED = 1246;
		FORRETRESS_NORMAL = 1247;
		FORRETRESS_SHADOW = 1248;
		FORRETRESS_PURIFIED = 1249;
		DUNSPARCE_NORMAL = 1250;
		DUNSPARCE_SHADOW = 1251;
		DUNSPARCE_PURIFIED = 1252;
		SNUBBULL_NORMAL = 1253;
		SNUBBULL_SHADOW = 1254;
		SNUBBULL_PURIFIED = 1255;
		GRANBULL_NORMAL = 1256;
		GRANBULL_SHADOW = 1257;
		GRANBULL_PURIFIED = 1258;
		QWILFISH_NORMAL = 1259;
		QWILFISH_SHADOW = 1260;
		QWILFISH_PURIFIED = 1261;
		HERACROSS_NORMAL = 1262;
		HERACROSS_SHADOW = 1263;
		HERACROSS_PURIFIED = 1264;
		TEDDIURSA_NORMAL = 1265;
		TEDDIURSA_SHADOW = 1266;
		TEDDIURSA_PURIFIED = 1267;
		URSARING_NORMAL = 1268;
		URSARING_SHADOW = 1269;
		URSARING_PURIFIED = 1270;
		SLUGMA_NORMAL = 1271;
		SLUGMA_SHADOW = 1272;
		SLUGMA_PURIFIED = 1273;
		MAGCARGO_NORMAL = 1274;
		MAGCARGO_SHADOW = 1275;
		MAGCARGO_PURIFIED = 1276;
		SWINUB_NORMAL = 1277;
		SWINUB_SHADOW = 1278;
		SWINUB_PURIFIED = 1279;
		PILOSWINE_NORMAL = 1280;
		PILOSWINE_SHADOW = 1281;
		PILOSWINE_PURIFIED = 1282;
		CORSOLA_NORMAL = 1283;
		CORSOLA_SHADOW = 1284;
		CORSOLA_PURIFIED = 1285;
		REMORAID_NORMAL = 1286;
		REMORAID_SHADOW = 1287;
		REMORAID_PURIFIED = 1288;
		OCTILLERY_NORMAL = 1289;
		OCTILLERY_SHADOW = 1290;
		OCTILLERY_PURIFIED = 1291;
		MANTINE_NORMAL = 1292;
		MANTINE_SHADOW = 1293;
		MANTINE_PURIFIED = 1294;
		SKARMORY_NORMAL = 1295;
		SKARMORY_SHADOW = 1296;
		SKARMORY_PURIFIED = 1297;
		KINGDRA_NORMAL = 1298;
		KINGDRA_SHADOW = 1299;
		KINGDRA_PURIFIED = 1300;
		PHANPY_NORMAL = 1301;
		PHANPY_SHADOW = 1302;
		PHANPY_PURIFIED = 1303;
		DONPHAN_NORMAL = 1304;
		DONPHAN_SHADOW = 1305;
		DONPHAN_PURIFIED = 1306;
		SMEARGLE_NORMAL = 1307;
		SMEARGLE_SHADOW = 1308;
		SMEARGLE_PURIFIED = 1309;
		TYROGUE_NORMAL = 1310;
		TYROGUE_SHADOW = 1311;
		TYROGUE_PURIFIED = 1312;
		HITMONTOP_NORMAL = 1313;
		HITMONTOP_SHADOW = 1314;
		HITMONTOP_PURIFIED = 1315;
		SMOOCHUM_NORMAL = 1316;
		SMOOCHUM_SHADOW = 1317;
		SMOOCHUM_PURIFIED = 1318;
		ELEKID_NORMAL = 1319;
		ELEKID_SHADOW = 1320;
		ELEKID_PURIFIED = 1321;
		MAGBY_NORMAL = 1322;
		MAGBY_SHADOW = 1323;
		MAGBY_PURIFIED = 1324;
		MILTANK_NORMAL = 1325;
		MILTANK_SHADOW = 1326;
		MILTANK_PURIFIED = 1327;
		BLISSEY_NORMAL = 1328;
		BLISSEY_SHADOW = 1329;
		BLISSEY_PURIFIED = 1330;
		RAIKOU_NORMAL = 1331;
		RAIKOU_SHADOW = 1332;
		RAIKOU_PURIFIED = 1333;
		ENTEI_NORMAL = 1334;
		ENTEI_SHADOW = 1335;
		ENTEI_PURIFIED = 1336;
		SUICUNE_NORMAL = 1337;
		SUICUNE_SHADOW = 1338;
		SUICUNE_PURIFIED = 1339;
		LUGIA_NORMAL = 1340;
		LUGIA_SHADOW = 1341;
		LUGIA_PURIFIED = 1342;
		HO_OH_NORMAL = 1343;
		HO_OH_SHADOW = 1344;
		HO_OH_PURIFIED = 1345;
		CELEBI_NORMAL = 1346;
		CELEBI_SHADOW = 1347;
		CELEBI_PURIFIED = 1348;
		TREECKO_NORMAL = 1349;
		TREECKO_SHADOW = 1350;
		TREECKO_PURIFIED = 1351;
		GROVYLE_NORMAL = 1352;
		GROVYLE_SHADOW = 1353;
		GROVYLE_PURIFIED = 1354;
		SCEPTILE_NORMAL = 1355;
		SCEPTILE_SHADOW = 1356;
		SCEPTILE_PURIFIED = 1357;
		TORCHIC_NORMAL = 1358;
		TORCHIC_SHADOW = 1359;
		TORCHIC_PURIFIED = 1360;
		COMBUSKEN_NORMAL = 1361;
		COMBUSKEN_SHADOW = 1362;
		COMBUSKEN_PURIFIED = 1363;
		BLAZIKEN_NORMAL = 1364;
		BLAZIKEN_SHADOW = 1365;
		BLAZIKEN_PURIFIED = 1366;
		POOCHYENA_NORMAL = 1367;
		POOCHYENA_SHADOW = 1368;
		POOCHYENA_PURIFIED = 1369;
		MIGHTYENA_NORMAL = 1370;
		MIGHTYENA_SHADOW = 1371;
		MIGHTYENA_PURIFIED = 1372;
		ZIGZAGOON_SHADOW = 1373;
		ZIGZAGOON_PURIFIED = 1374;
		LINOONE_SHADOW = 1375;
		LINOONE_PURIFIED = 1376;
		WURMPLE_SHADOW = 1377;
		WURMPLE_PURIFIED = 1378;
		SILCOON_NORMAL = 1379;
		SILCOON_SHADOW = 1380;
		SILCOON_PURIFIED = 1381;
		BEAUTIFLY_NORMAL = 1382;
		BEAUTIFLY_SHADOW = 1383;
		BEAUTIFLY_PURIFIED = 1384;
		CASCOON_NORMAL = 1385;
		CASCOON_SHADOW = 1386;
		CASCOON_PURIFIED = 1387;
		DUSTOX_NORMAL = 1388;
		DUSTOX_SHADOW = 1389;
		DUSTOX_PURIFIED = 1390;
		LOTAD_NORMAL = 1391;
		LOTAD_SHADOW = 1392;
		LOTAD_PURIFIED = 1393;
		LOMBRE_NORMAL = 1394;
		LOMBRE_SHADOW = 1395;
		LOMBRE_PURIFIED = 1396;
		LUDICOLO_NORMAL = 1397;
		LUDICOLO_SHADOW = 1398;
		LUDICOLO_PURIFIED = 1399;
		TAILLOW_NORMAL = 1400;
		TAILLOW_SHADOW = 1401;
		TAILLOW_PURIFIED = 1402;
		SWELLOW_NORMAL = 1403;
		SWELLOW_SHADOW = 1404;
		SWELLOW_PURIFIED = 1405;
		WINGULL_NORMAL = 1406;
		WINGULL_SHADOW = 1407;
		WINGULL_PURIFIED = 1408;
		PELIPPER_NORMAL = 1409;
		PELIPPER_SHADOW = 1410;
		PELIPPER_PURIFIED = 1411;
		SURSKIT_NORMAL = 1412;
		SURSKIT_SHADOW = 1413;
		SURSKIT_PURIFIED = 1414;
		MASQUERAIN_NORMAL = 1415;
		MASQUERAIN_SHADOW = 1416;
		MASQUERAIN_PURIFIED = 1417;
		SHROOMISH_NORMAL = 1418;
		SHROOMISH_SHADOW = 1419;
		SHROOMISH_PURIFIED = 1420;
		BRELOOM_NORMAL = 1421;
		BRELOOM_SHADOW = 1422;
		BRELOOM_PURIFIED = 1423;
		SLAKOTH_NORMAL = 1424;
		SLAKOTH_SHADOW = 1425;
		SLAKOTH_PURIFIED = 1426;
		VIGOROTH_NORMAL = 1427;
		VIGOROTH_SHADOW = 1428;
		VIGOROTH_PURIFIED = 1429;
		SLAKING_NORMAL = 1430;
		SLAKING_SHADOW = 1431;
		SLAKING_PURIFIED = 1432;
		NINCADA_NORMAL = 1433;
		NINCADA_SHADOW = 1434;
		NINCADA_PURIFIED = 1435;
		NINJASK_NORMAL = 1436;
		NINJASK_SHADOW = 1437;
		NINJASK_PURIFIED = 1438;
		SHEDINJA_NORMAL = 1439;
		SHEDINJA_SHADOW = 1440;
		SHEDINJA_PURIFIED = 1441;
		WHISMUR_NORMAL = 1442;
		WHISMUR_SHADOW = 1443;
		WHISMUR_PURIFIED = 1444;
		LOUDRED_NORMAL = 1445;
		LOUDRED_SHADOW = 1446;
		LOUDRED_PURIFIED = 1447;
		EXPLOUD_NORMAL = 1448;
		EXPLOUD_SHADOW = 1449;
		EXPLOUD_PURIFIED = 1450;
		MAKUHITA_NORMAL = 1451;
		MAKUHITA_SHADOW = 1452;
		MAKUHITA_PURIFIED = 1453;
		HARIYAMA_NORMAL = 1454;
		HARIYAMA_SHADOW = 1455;
		HARIYAMA_PURIFIED = 1456;
		AZURILL_NORMAL = 1457;
		AZURILL_SHADOW = 1458;
		AZURILL_PURIFIED = 1459;
		NOSEPASS_NORMAL = 1460;
		NOSEPASS_SHADOW = 1461;
		NOSEPASS_PURIFIED = 1462;
		SKITTY_NORMAL = 1463;
		SKITTY_SHADOW = 1464;
		SKITTY_PURIFIED = 1465;
		DELCATTY_NORMAL = 1466;
		DELCATTY_SHADOW = 1467;
		DELCATTY_PURIFIED = 1468;
		ARON_NORMAL = 1469;
		ARON_SHADOW = 1470;
		ARON_PURIFIED = 1471;
		LAIRON_NORMAL = 1472;
		LAIRON_SHADOW = 1473;
		LAIRON_PURIFIED = 1474;
		AGGRON_NORMAL = 1475;
		AGGRON_SHADOW = 1476;
		AGGRON_PURIFIED = 1477;
		MEDITITE_NORMAL = 1478;
		MEDITITE_SHADOW = 1479;
		MEDITITE_PURIFIED = 1480;
		MEDICHAM_NORMAL = 1481;
		MEDICHAM_SHADOW = 1482;
		MEDICHAM_PURIFIED = 1483;
		ELECTRIKE_NORMAL = 1484;
		ELECTRIKE_SHADOW = 1485;
		ELECTRIKE_PURIFIED = 1486;
		MANECTRIC_NORMAL = 1487;
		MANECTRIC_SHADOW = 1488;
		MANECTRIC_PURIFIED = 1489;
		PLUSLE_NORMAL = 1490;
		PLUSLE_SHADOW = 1491;
		PLUSLE_PURIFIED = 1492;
		MINUN_NORMAL = 1493;
		MINUN_SHADOW = 1494;
		MINUN_PURIFIED = 1495;
		VOLBEAT_NORMAL = 1496;
		VOLBEAT_SHADOW = 1497;
		VOLBEAT_PURIFIED = 1498;
		ILLUMISE_NORMAL = 1499;
		ILLUMISE_SHADOW = 1500;
		ILLUMISE_PURIFIED = 1501;
		ROSELIA_NORMAL = 1502;
		ROSELIA_SHADOW = 1503;
		ROSELIA_PURIFIED = 1504;
		GULPIN_NORMAL = 1505;
		GULPIN_SHADOW = 1506;
		GULPIN_PURIFIED = 1507;
		SWALOT_NORMAL = 1508;
		SWALOT_SHADOW = 1509;
		SWALOT_PURIFIED = 1510;
		WAILMER_NORMAL = 1511;
		WAILMER_SHADOW = 1512;
		WAILMER_PURIFIED = 1513;
		WAILORD_NORMAL = 1514;
		WAILORD_SHADOW = 1515;
		WAILORD_PURIFIED = 1516;
		NUMEL_NORMAL = 1517;
		NUMEL_SHADOW = 1518;
		NUMEL_PURIFIED = 1519;
		CAMERUPT_NORMAL = 1520;
		CAMERUPT_SHADOW = 1521;
		CAMERUPT_PURIFIED = 1522;
		TORKOAL_NORMAL = 1523;
		TORKOAL_SHADOW = 1524;
		TORKOAL_PURIFIED = 1525;
		SPOINK_NORMAL = 1526;
		SPOINK_SHADOW = 1527;
		SPOINK_PURIFIED = 1528;
		GRUMPIG_NORMAL = 1529;
		GRUMPIG_SHADOW = 1530;
		GRUMPIG_PURIFIED = 1531;
		SWABLU_NORMAL = 1532;
		SWABLU_SHADOW = 1533;
		SWABLU_PURIFIED = 1534;
		ALTARIA_NORMAL = 1535;
		ALTARIA_SHADOW = 1536;
		ALTARIA_PURIFIED = 1537;
		ZANGOOSE_NORMAL = 1538;
		ZANGOOSE_SHADOW = 1539;
		ZANGOOSE_PURIFIED = 1540;
		SEVIPER_NORMAL = 1541;
		SEVIPER_SHADOW = 1542;
		SEVIPER_PURIFIED = 1543;
		LUNATONE_NORMAL = 1544;
		LUNATONE_SHADOW = 1545;
		LUNATONE_PURIFIED = 1546;
		SOLROCK_NORMAL = 1547;
		SOLROCK_SHADOW = 1548;
		SOLROCK_PURIFIED = 1549;
		BARBOACH_NORMAL = 1550;
		BARBOACH_SHADOW = 1551;
		BARBOACH_PURIFIED = 1552;
		WHISCASH_NORMAL = 1553;
		WHISCASH_SHADOW = 1554;
		WHISCASH_PURIFIED = 1555;
		CORPHISH_NORMAL = 1556;
		CORPHISH_SHADOW = 1557;
		CORPHISH_PURIFIED = 1558;
		CRAWDAUNT_NORMAL = 1559;
		CRAWDAUNT_SHADOW = 1560;
		CRAWDAUNT_PURIFIED = 1561;
		BALTOY_NORMAL = 1562;
		BALTOY_SHADOW = 1563;
		BALTOY_PURIFIED = 1564;
		CLAYDOL_NORMAL = 1565;
		CLAYDOL_SHADOW = 1566;
		CLAYDOL_PURIFIED = 1567;
		LILEEP_NORMAL = 1568;
		LILEEP_SHADOW = 1569;
		LILEEP_PURIFIED = 1570;
		CRADILY_NORMAL = 1571;
		CRADILY_SHADOW = 1572;
		CRADILY_PURIFIED = 1573;
		ANORITH_NORMAL = 1574;
		ANORITH_SHADOW = 1575;
		ANORITH_PURIFIED = 1576;
		ARMALDO_NORMAL = 1577;
		ARMALDO_SHADOW = 1578;
		ARMALDO_PURIFIED = 1579;
		FEEBAS_NORMAL = 1580;
		FEEBAS_SHADOW = 1581;
		FEEBAS_PURIFIED = 1582;
		MILOTIC_NORMAL = 1583;
		MILOTIC_SHADOW = 1584;
		MILOTIC_PURIFIED = 1585;
		KECLEON_NORMAL = 1586;
		KECLEON_SHADOW = 1587;
		KECLEON_PURIFIED = 1588;
		TROPIUS_NORMAL = 1589;
		TROPIUS_SHADOW = 1590;
		TROPIUS_PURIFIED = 1591;
		CHIMECHO_NORMAL = 1592;
		CHIMECHO_SHADOW = 1593;
		CHIMECHO_PURIFIED = 1594;
		WYNAUT_NORMAL = 1595;
		WYNAUT_SHADOW = 1596;
		WYNAUT_PURIFIED = 1597;
		SPHEAL_NORMAL = 1598;
		SPHEAL_SHADOW = 1599;
		SPHEAL_PURIFIED = 1600;
		SEALEO_NORMAL = 1601;
		SEALEO_SHADOW = 1602;
		SEALEO_PURIFIED = 1603;
		WALREIN_NORMAL = 1604;
		WALREIN_SHADOW = 1605;
		WALREIN_PURIFIED = 1606;
		CLAMPERL_NORMAL = 1607;
		CLAMPERL_SHADOW = 1608;
		CLAMPERL_PURIFIED = 1609;
		HUNTAIL_NORMAL = 1610;
		HUNTAIL_SHADOW = 1611;
		HUNTAIL_PURIFIED = 1612;
		GOREBYSS_NORMAL = 1613;
		GOREBYSS_SHADOW = 1614;
		GOREBYSS_PURIFIED = 1615;
		RELICANTH_NORMAL = 1616;
		RELICANTH_SHADOW = 1617;
		RELICANTH_PURIFIED = 1618;
		LUVDISC_NORMAL = 1619;
		LUVDISC_SHADOW = 1620;
		LUVDISC_PURIFIED = 1621;
		REGIROCK_NORMAL = 1622;
		REGIROCK_SHADOW = 1623;
		REGIROCK_PURIFIED = 1624;
		REGICE_NORMAL = 1625;
		REGICE_SHADOW = 1626;
		REGICE_PURIFIED = 1627;
		REGISTEEL_NORMAL = 1628;
		REGISTEEL_SHADOW = 1629;
		REGISTEEL_PURIFIED = 1630;
		LATIAS_NORMAL = 1631;
		LATIAS_SHADOW = 1632;
		LATIAS_PURIFIED = 1633;
		LATIOS_NORMAL = 1634;
		LATIOS_SHADOW = 1635;
		LATIOS_PURIFIED = 1636;
		KYOGRE_NORMAL = 1637;
		KYOGRE_SHADOW = 1638;
		KYOGRE_PURIFIED = 1639;
		GROUDON_NORMAL = 1640;
		GROUDON_SHADOW = 1641;
		GROUDON_PURIFIED = 1642;
		RAYQUAZA_NORMAL = 1643;
		RAYQUAZA_SHADOW = 1644;
		RAYQUAZA_PURIFIED = 1645;
		JIRACHI_NORMAL = 1646;
		JIRACHI_SHADOW = 1647;
		JIRACHI_PURIFIED = 1648;
		PIPLUP_NORMAL = 1649;
		PIPLUP_SHADOW = 1650;
		PIPLUP_PURIFIED = 1651;
		PRINPLUP_NORMAL = 1652;
		PRINPLUP_SHADOW = 1653;
		PRINPLUP_PURIFIED = 1654;
		EMPOLEON_NORMAL = 1655;
		EMPOLEON_SHADOW = 1656;
		EMPOLEON_PURIFIED = 1657;
		STARLY_NORMAL = 1658;
		STARLY_SHADOW = 1659;
		STARLY_PURIFIED = 1660;
		STARAVIA_NORMAL = 1661;
		STARAVIA_SHADOW = 1662;
		STARAVIA_PURIFIED = 1663;
		STARAPTOR_NORMAL = 1664;
		STARAPTOR_SHADOW = 1665;
		STARAPTOR_PURIFIED = 1666;
		BIDOOF_NORMAL = 1667;
		BIDOOF_SHADOW = 1668;
		BIDOOF_PURIFIED = 1669;
		BIBAREL_NORMAL = 1670;
		BIBAREL_SHADOW = 1671;
		BIBAREL_PURIFIED = 1672;
		KRICKETOT_NORMAL = 1673;
		KRICKETOT_SHADOW = 1674;
		KRICKETOT_PURIFIED = 1675;
		KRICKETUNE_NORMAL = 1676;
		KRICKETUNE_SHADOW = 1677;
		KRICKETUNE_PURIFIED = 1678;
		SHINX_NORMAL = 1679;
		SHINX_SHADOW = 1680;
		SHINX_PURIFIED = 1681;
		LUXIO_NORMAL = 1682;
		LUXIO_SHADOW = 1683;
		LUXIO_PURIFIED = 1684;
		LUXRAY_NORMAL = 1685;
		LUXRAY_SHADOW = 1686;
		LUXRAY_PURIFIED = 1687;
		BUDEW_NORMAL = 1688;
		BUDEW_SHADOW = 1689;
		BUDEW_PURIFIED = 1690;
		ROSERADE_NORMAL = 1691;
		ROSERADE_SHADOW = 1692;
		ROSERADE_PURIFIED = 1693;
		CRANIDOS_NORMAL = 1694;
		CRANIDOS_SHADOW = 1695;
		CRANIDOS_PURIFIED = 1696;
		RAMPARDOS_NORMAL = 1697;
		RAMPARDOS_SHADOW = 1698;
		RAMPARDOS_PURIFIED = 1699;
		SHIELDON_NORMAL = 1700;
		SHIELDON_SHADOW = 1701;
		SHIELDON_PURIFIED = 1702;
		BASTIODON_NORMAL = 1703;
		BASTIODON_SHADOW = 1704;
		BASTIODON_PURIFIED = 1705;
		BURMY_NORMAL = 1706;
		BURMY_SHADOW = 1707;
		BURMY_PURIFIED = 1708;
		WORMADAM_NORMAL = 1709;
		WORMADAM_SHADOW = 1710;
		WORMADAM_PURIFIED = 1711;
		MOTHIM_NORMAL = 1712;
		MOTHIM_SHADOW = 1713;
		MOTHIM_PURIFIED = 1714;
		COMBEE_NORMAL = 1715;
		COMBEE_SHADOW = 1716;
		COMBEE_PURIFIED = 1717;
		VESPIQUEN_NORMAL = 1718;
		VESPIQUEN_SHADOW = 1719;
		VESPIQUEN_PURIFIED = 1720;
		PACHIRISU_NORMAL = 1721;
		PACHIRISU_SHADOW = 1722;
		PACHIRISU_PURIFIED = 1723;
		BUIZEL_NORMAL = 1724;
		BUIZEL_SHADOW = 1725;
		BUIZEL_PURIFIED = 1726;
		FLOATZEL_NORMAL = 1727;
		FLOATZEL_SHADOW = 1728;
		FLOATZEL_PURIFIED = 1729;
		CHERUBI_NORMAL = 1730;
		CHERUBI_SHADOW = 1731;
		CHERUBI_PURIFIED = 1732;
		CHERRIM_NORMAL = 1733;
		CHERRIM_SHADOW = 1734;
		CHERRIM_PURIFIED = 1735;
		SHELLOS_NORMAL = 1736;
		SHELLOS_SHADOW = 1737;
		SHELLOS_PURIFIED = 1738;
		GASTRODON_NORMAL = 1739;
		GASTRODON_SHADOW = 1740;
		GASTRODON_PURIFIED = 1741;
		AMBIPOM_NORMAL = 1742;
		AMBIPOM_SHADOW = 1743;
		AMBIPOM_PURIFIED = 1744;
		DRIFLOON_NORMAL = 1745;
		DRIFLOON_SHADOW = 1746;
		DRIFLOON_PURIFIED = 1747;
		DRIFBLIM_NORMAL = 1748;
		DRIFBLIM_SHADOW = 1749;
		DRIFBLIM_PURIFIED = 1750;
		BUNEARY_NORMAL = 1751;
		BUNEARY_SHADOW = 1752;
		BUNEARY_PURIFIED = 1753;
		LOPUNNY_NORMAL = 1754;
		LOPUNNY_SHADOW = 1755;
		LOPUNNY_PURIFIED = 1756;
		GLAMEOW_NORMAL = 1757;
		GLAMEOW_SHADOW = 1758;
		GLAMEOW_PURIFIED = 1759;
		PURUGLY_NORMAL = 1760;
		PURUGLY_SHADOW = 1761;
		PURUGLY_PURIFIED = 1762;
		CHINGLING_NORMAL = 1763;
		CHINGLING_SHADOW = 1764;
		CHINGLING_PURIFIED = 1765;
		BRONZOR_NORMAL = 1766;
		BRONZOR_SHADOW = 1767;
		BRONZOR_PURIFIED = 1768;
		BRONZONG_NORMAL = 1769;
		BRONZONG_SHADOW = 1770;
		BRONZONG_PURIFIED = 1771;
		BONSLY_NORMAL = 1772;
		BONSLY_SHADOW = 1773;
		BONSLY_PURIFIED = 1774;
		MIME_JR_NORMAL = 1775;
		MIME_JR_SHADOW = 1776;
		MIME_JR_PURIFIED = 1777;
		HAPPINY_NORMAL = 1778;
		HAPPINY_SHADOW = 1779;
		HAPPINY_PURIFIED = 1780;
		CHATOT_NORMAL = 1781;
		CHATOT_SHADOW = 1782;
		CHATOT_PURIFIED = 1783;
		SPIRITOMB_NORMAL = 1784;
		SPIRITOMB_SHADOW = 1785;
		SPIRITOMB_PURIFIED = 1786;
		MUNCHLAX_NORMAL = 1787;
		MUNCHLAX_SHADOW = 1788;
		MUNCHLAX_PURIFIED = 1789;
		RIOLU_NORMAL = 1790;
		RIOLU_SHADOW = 1791;
		RIOLU_PURIFIED = 1792;
		LUCARIO_NORMAL = 1793;
		LUCARIO_SHADOW = 1794;
		LUCARIO_PURIFIED = 1795;
		SKORUPI_NORMAL = 1796;
		SKORUPI_SHADOW = 1797;
		SKORUPI_PURIFIED = 1798;
		DRAPION_NORMAL = 1799;
		DRAPION_SHADOW = 1800;
		DRAPION_PURIFIED = 1801;
		CROAGUNK_NORMAL = 1802;
		CROAGUNK_SHADOW = 1803;
		CROAGUNK_PURIFIED = 1804;
		TOXICROAK_NORMAL = 1805;
		TOXICROAK_SHADOW = 1806;
		TOXICROAK_PURIFIED = 1807;
		CARNIVINE_NORMAL = 1808;
		CARNIVINE_SHADOW = 1809;
		CARNIVINE_PURIFIED = 1810;
		FINNEON_NORMAL = 1811;
		FINNEON_SHADOW = 1812;
		FINNEON_PURIFIED = 1813;
		LUMINEON_NORMAL = 1814;
		LUMINEON_SHADOW = 1815;
		LUMINEON_PURIFIED = 1816;
		MANTYKE_NORMAL = 1817;
		MANTYKE_SHADOW = 1818;
		MANTYKE_PURIFIED = 1819;
		LICKILICKY_NORMAL = 1820;
		LICKILICKY_SHADOW = 1821;
		LICKILICKY_PURIFIED = 1822;
		TANGROWTH_NORMAL = 1823;
		TANGROWTH_SHADOW = 1824;
		TANGROWTH_PURIFIED = 1825;
		TOGEKISS_NORMAL = 1826;
		TOGEKISS_SHADOW = 1827;
		TOGEKISS_PURIFIED = 1828;
		YANMEGA_NORMAL = 1829;
		YANMEGA_SHADOW = 1830;
		YANMEGA_PURIFIED = 1831;
		LEAFEON_NORMAL = 1832;
		LEAFEON_SHADOW = 1833;
		LEAFEON_PURIFIED = 1834;
		GLACEON_NORMAL = 1835;
		GLACEON_SHADOW = 1836;
		GLACEON_PURIFIED = 1837;
		MAMOSWINE_NORMAL = 1838;
		MAMOSWINE_SHADOW = 1839;
		MAMOSWINE_PURIFIED = 1840;
		PROBOPASS_NORMAL = 1841;
		PROBOPASS_SHADOW = 1842;
		PROBOPASS_PURIFIED = 1843;
		FROSLASS_NORMAL = 1844;
		FROSLASS_SHADOW = 1845;
		FROSLASS_PURIFIED = 1846;
		UXIE_NORMAL = 1847;
		UXIE_SHADOW = 1848;
		UXIE_PURIFIED = 1849;
		MESPRIT_NORMAL = 1850;
		MESPRIT_SHADOW = 1851;
		MESPRIT_PURIFIED = 1852;
		AZELF_NORMAL = 1853;
		AZELF_SHADOW = 1854;
		AZELF_PURIFIED = 1855;
		DIALGA_NORMAL = 1856;
		DIALGA_SHADOW = 1857;
		DIALGA_PURIFIED = 1858;
		PALKIA_NORMAL = 1859;
		PALKIA_SHADOW = 1860;
		PALKIA_PURIFIED = 1861;
		HEATRAN_NORMAL = 1862;
		HEATRAN_SHADOW = 1863;
		HEATRAN_PURIFIED = 1864;
		REGIGIGAS_NORMAL = 1865;
		REGIGIGAS_SHADOW = 1866;
		REGIGIGAS_PURIFIED = 1867;
		GIRATINA_NORMAL = 1868;
		GIRATINA_SHADOW = 1869;
		GIRATINA_PURIFIED = 1870;
		CRESSELIA_NORMAL = 1871;
		CRESSELIA_SHADOW = 1872;
		CRESSELIA_PURIFIED = 1873;
		PHIONE_NORMAL = 1874;
		PHIONE_SHADOW = 1875;
		PHIONE_PURIFIED = 1876;
		MANAPHY_NORMAL = 1877;
		MANAPHY_SHADOW = 1878;
		MANAPHY_PURIFIED = 1879;
		DARKRAI_NORMAL = 1880;
		DARKRAI_SHADOW = 1881;
		DARKRAI_PURIFIED = 1882;
		SHAYMIN_NORMAL = 1883;
		SHAYMIN_SHADOW = 1884;
		SHAYMIN_PURIFIED = 1885;
		VICTINI_NORMAL = 1886;
		VICTINI_SHADOW = 1887;
		VICTINI_PURIFIED = 1888;
		SNIVY_NORMAL = 1889;
		SNIVY_SHADOW = 1890;
		SNIVY_PURIFIED = 1891;
		SERVINE_NORMAL = 1892;
		SERVINE_SHADOW = 1893;
		SERVINE_PURIFIED = 1894;
		SERPERIOR_NORMAL = 1895;
		SERPERIOR_SHADOW = 1896;
		SERPERIOR_PURIFIED = 1897;
		TEPIG_NORMAL = 1898;
		TEPIG_SHADOW = 1899;
		TEPIG_PURIFIED = 1900;
		PIGNITE_NORMAL = 1901;
		PIGNITE_SHADOW = 1902;
		PIGNITE_PURIFIED = 1903;
		EMBOAR_NORMAL = 1904;
		EMBOAR_SHADOW = 1905;
		EMBOAR_PURIFIED = 1906;
		OSHAWOTT_NORMAL = 1907;
		OSHAWOTT_SHADOW = 1908;
		OSHAWOTT_PURIFIED = 1909;
		DEWOTT_NORMAL = 1910;
		DEWOTT_SHADOW = 1911;
		DEWOTT_PURIFIED = 1912;
		SAMUROTT_NORMAL = 1913;
		SAMUROTT_SHADOW = 1914;
		SAMUROTT_PURIFIED = 1915;
		PATRAT_NORMAL = 1916;
		PATRAT_SHADOW = 1917;
		PATRAT_PURIFIED = 1918;
		WATCHOG_NORMAL = 1919;
		WATCHOG_SHADOW = 1920;
		WATCHOG_PURIFIED = 1921;
		LILLIPUP_NORMAL = 1922;
		LILLIPUP_SHADOW = 1923;
		LILLIPUP_PURIFIED = 1924;
		HERDIER_NORMAL = 1925;
		HERDIER_SHADOW = 1926;
		HERDIER_PURIFIED = 1927;
		STOUTLAND_NORMAL = 1928;
		STOUTLAND_SHADOW = 1929;
		STOUTLAND_PURIFIED = 1930;
		PURRLOIN_NORMAL = 1931;
		PURRLOIN_SHADOW = 1932;
		PURRLOIN_PURIFIED = 1933;
		LIEPARD_NORMAL = 1934;
		LIEPARD_SHADOW = 1935;
		LIEPARD_PURIFIED = 1936;
		PANSAGE_NORMAL = 1937;
		PANSAGE_SHADOW = 1938;
		PANSAGE_PURIFIED = 1939;
		SIMISAGE_NORMAL = 1940;
		SIMISAGE_SHADOW = 1941;
		SIMISAGE_PURIFIED = 1942;
		PANSEAR_NORMAL = 1943;
		PANSEAR_SHADOW = 1944;
		PANSEAR_PURIFIED = 1945;
		SIMISEAR_NORMAL = 1946;
		SIMISEAR_SHADOW = 1947;
		SIMISEAR_PURIFIED = 1948;
		PANPOUR_NORMAL = 1949;
		PANPOUR_SHADOW = 1950;
		PANPOUR_PURIFIED = 1951;
		SIMIPOUR_NORMAL = 1952;
		SIMIPOUR_SHADOW = 1953;
		SIMIPOUR_PURIFIED = 1954;
		MUNNA_NORMAL = 1955;
		MUNNA_SHADOW = 1956;
		MUNNA_PURIFIED = 1957;
		MUSHARNA_NORMAL = 1958;
		MUSHARNA_SHADOW = 1959;
		MUSHARNA_PURIFIED = 1960;
		PIDOVE_NORMAL = 1961;
		PIDOVE_SHADOW = 1962;
		PIDOVE_PURIFIED = 1963;
		TRANQUILL_NORMAL = 1964;
		TRANQUILL_SHADOW = 1965;
		TRANQUILL_PURIFIED = 1966;
		UNFEZANT_NORMAL = 1967;
		UNFEZANT_SHADOW = 1968;
		UNFEZANT_PURIFIED = 1969;
		BLITZLE_NORMAL = 1970;
		BLITZLE_SHADOW = 1971;
		BLITZLE_PURIFIED = 1972;
		ZEBSTRIKA_NORMAL = 1973;
		ZEBSTRIKA_SHADOW = 1974;
		ZEBSTRIKA_PURIFIED = 1975;
		ROGGENROLA_NORMAL = 1976;
		ROGGENROLA_SHADOW = 1977;
		ROGGENROLA_PURIFIED = 1978;
		BOLDORE_NORMAL = 1979;
		BOLDORE_SHADOW = 1980;
		BOLDORE_PURIFIED = 1981;
		GIGALITH_NORMAL = 1982;
		GIGALITH_SHADOW = 1983;
		GIGALITH_PURIFIED = 1984;
		WOOBAT_NORMAL = 1985;
		WOOBAT_SHADOW = 1986;
		WOOBAT_PURIFIED = 1987;
		SWOOBAT_NORMAL = 1988;
		SWOOBAT_SHADOW = 1989;
		SWOOBAT_PURIFIED = 1990;
		DRILBUR_NORMAL = 1991;
		DRILBUR_SHADOW = 1992;
		DRILBUR_PURIFIED = 1993;
		EXCADRILL_NORMAL = 1994;
		EXCADRILL_SHADOW = 1995;
		EXCADRILL_PURIFIED = 1996;
		AUDINO_NORMAL = 1997;
		AUDINO_SHADOW = 1998;
		AUDINO_PURIFIED = 1999;
		TIMBURR_NORMAL = 2000;
		TIMBURR_SHADOW = 2001;
		TIMBURR_PURIFIED = 2002;
		GURDURR_NORMAL = 2003;
		GURDURR_SHADOW = 2004;
		GURDURR_PURIFIED = 2005;
		CONKELDURR_NORMAL = 2006;
		CONKELDURR_SHADOW = 2007;
		CONKELDURR_PURIFIED = 2008;
		TYMPOLE_NORMAL = 2009;
		TYMPOLE_SHADOW = 2010;
		TYMPOLE_PURIFIED = 2011;
		PALPITOAD_NORMAL = 2012;
		PALPITOAD_SHADOW = 2013;
		PALPITOAD_PURIFIED = 2014;
		SEISMITOAD_NORMAL = 2015;
		SEISMITOAD_SHADOW = 2016;
		SEISMITOAD_PURIFIED = 2017;
		THROH_NORMAL = 2018;
		THROH_SHADOW = 2019;
		THROH_PURIFIED = 2020;
		SAWK_NORMAL = 2021;
		SAWK_SHADOW = 2022;
		SAWK_PURIFIED = 2023;
		SEWADDLE_NORMAL = 2024;
		SEWADDLE_SHADOW = 2025;
		SEWADDLE_PURIFIED = 2026;
		SWADLOON_NORMAL = 2027;
		SWADLOON_SHADOW = 2028;
		SWADLOON_PURIFIED = 2029;
		LEAVANNY_NORMAL = 2030;
		LEAVANNY_SHADOW = 2031;
		LEAVANNY_PURIFIED = 2032;
		VENIPEDE_NORMAL = 2033;
		VENIPEDE_SHADOW = 2034;
		VENIPEDE_PURIFIED = 2035;
		WHIRLIPEDE_NORMAL = 2036;
		WHIRLIPEDE_SHADOW = 2037;
		WHIRLIPEDE_PURIFIED = 2038;
		SCOLIPEDE_NORMAL = 2039;
		SCOLIPEDE_SHADOW = 2040;
		SCOLIPEDE_PURIFIED = 2041;
		COTTONEE_NORMAL = 2042;
		COTTONEE_SHADOW = 2043;
		COTTONEE_PURIFIED = 2044;
		WHIMSICOTT_NORMAL = 2045;
		WHIMSICOTT_SHADOW = 2046;
		WHIMSICOTT_PURIFIED = 2047;
		PETILIL_NORMAL = 2048;
		PETILIL_SHADOW = 2049;
		PETILIL_PURIFIED = 2050;
		LILLIGANT_NORMAL = 2051;
		LILLIGANT_SHADOW = 2052;
		LILLIGANT_PURIFIED = 2053;
		SANDILE_NORMAL = 2054;
		SANDILE_SHADOW = 2055;
		SANDILE_PURIFIED = 2056;
		KROKOROK_NORMAL = 2057;
		KROKOROK_SHADOW = 2058;
		KROKOROK_PURIFIED = 2059;
		KROOKODILE_NORMAL = 2060;
		KROOKODILE_SHADOW = 2061;
		KROOKODILE_PURIFIED = 2062;
		DARUMAKA_NORMAL = 2063;
		DARUMAKA_SHADOW = 2064;
		DARUMAKA_PURIFIED = 2065;
		MARACTUS_NORMAL = 2066;
		MARACTUS_SHADOW = 2067;
		MARACTUS_PURIFIED = 2068;
		DWEBBLE_NORMAL = 2069;
		DWEBBLE_SHADOW = 2070;
		DWEBBLE_PURIFIED = 2071;
		CRUSTLE_NORMAL = 2072;
		CRUSTLE_SHADOW = 2073;
		CRUSTLE_PURIFIED = 2074;
		SCRAGGY_NORMAL = 2075;
		SCRAGGY_SHADOW = 2076;
		SCRAGGY_PURIFIED = 2077;
		SCRAFTY_NORMAL = 2078;
		SCRAFTY_SHADOW = 2079;
		SCRAFTY_PURIFIED = 2080;
		SIGILYPH_NORMAL = 2081;
		SIGILYPH_SHADOW = 2082;
		SIGILYPH_PURIFIED = 2083;
		YAMASK_NORMAL = 2084;
		YAMASK_SHADOW = 2085;
		YAMASK_PURIFIED = 2086;
		COFAGRIGUS_NORMAL = 2087;
		COFAGRIGUS_SHADOW = 2088;
		COFAGRIGUS_PURIFIED = 2089;
		TIRTOUGA_NORMAL = 2090;
		TIRTOUGA_SHADOW = 2091;
		TIRTOUGA_PURIFIED = 2092;
		CARRACOSTA_NORMAL = 2093;
		CARRACOSTA_SHADOW = 2094;
		CARRACOSTA_PURIFIED = 2095;
		ARCHEN_NORMAL = 2096;
		ARCHEN_SHADOW = 2097;
		ARCHEN_PURIFIED = 2098;
		ARCHEOPS_NORMAL = 2099;
		ARCHEOPS_SHADOW = 2100;
		ARCHEOPS_PURIFIED = 2101;
		TRUBBISH_NORMAL = 2102;
		TRUBBISH_SHADOW = 2103;
		TRUBBISH_PURIFIED = 2104;
		GARBODOR_NORMAL = 2105;
		GARBODOR_SHADOW = 2106;
		GARBODOR_PURIFIED = 2107;
		ZORUA_NORMAL = 2108;
		ZORUA_SHADOW = 2109;
		ZORUA_PURIFIED = 2110;
		ZOROARK_NORMAL = 2111;
		ZOROARK_SHADOW = 2112;
		ZOROARK_PURIFIED = 2113;
		MINCCINO_NORMAL = 2114;
		MINCCINO_SHADOW = 2115;
		MINCCINO_PURIFIED = 2116;
		CINCCINO_NORMAL = 2117;
		CINCCINO_SHADOW = 2118;
		CINCCINO_PURIFIED = 2119;
		GOTHITA_NORMAL = 2120;
		GOTHITA_SHADOW = 2121;
		GOTHITA_PURIFIED = 2122;
		GOTHORITA_NORMAL = 2123;
		GOTHORITA_SHADOW = 2124;
		GOTHORITA_PURIFIED = 2125;
		GOTHITELLE_NORMAL = 2126;
		GOTHITELLE_SHADOW = 2127;
		GOTHITELLE_PURIFIED = 2128;
		SOLOSIS_NORMAL = 2129;
		SOLOSIS_SHADOW = 2130;
		SOLOSIS_PURIFIED = 2131;
		DUOSION_NORMAL = 2132;
		DUOSION_SHADOW = 2133;
		DUOSION_PURIFIED = 2134;
		REUNICLUS_NORMAL = 2135;
		REUNICLUS_SHADOW = 2136;
		REUNICLUS_PURIFIED = 2137;
		DUCKLETT_NORMAL = 2138;
		DUCKLETT_SHADOW = 2139;
		DUCKLETT_PURIFIED = 2140;
		SWANNA_NORMAL = 2141;
		SWANNA_SHADOW = 2142;
		SWANNA_PURIFIED = 2143;
		VANILLITE_NORMAL = 2144;
		VANILLITE_SHADOW = 2145;
		VANILLITE_PURIFIED = 2146;
		VANILLISH_NORMAL = 2147;
		VANILLISH_SHADOW = 2148;
		VANILLISH_PURIFIED = 2149;
		VANILLUXE_NORMAL = 2150;
		VANILLUXE_SHADOW = 2151;
		VANILLUXE_PURIFIED = 2152;
		EMOLGA_NORMAL = 2153;
		EMOLGA_SHADOW = 2154;
		EMOLGA_PURIFIED = 2155;
		KARRABLAST_NORMAL = 2156;
		KARRABLAST_SHADOW = 2157;
		KARRABLAST_PURIFIED = 2158;
		ESCAVALIER_NORMAL = 2159;
		ESCAVALIER_SHADOW = 2160;
		ESCAVALIER_PURIFIED = 2161;
		FOONGUS_NORMAL = 2162;
		FOONGUS_SHADOW = 2163;
		FOONGUS_PURIFIED = 2164;
		AMOONGUSS_NORMAL = 2165;
		AMOONGUSS_SHADOW = 2166;
		AMOONGUSS_PURIFIED = 2167;
		FRILLISH_NORMAL = 2168;
		FRILLISH_SHADOW = 2169;
		FRILLISH_PURIFIED = 2170;
		JELLICENT_NORMAL = 2171;
		JELLICENT_SHADOW = 2172;
		JELLICENT_PURIFIED = 2173;
		ALOMOMOLA_NORMAL = 2174;
		ALOMOMOLA_SHADOW = 2175;
		ALOMOMOLA_PURIFIED = 2176;
		JOLTIK_NORMAL = 2177;
		JOLTIK_SHADOW = 2178;
		JOLTIK_PURIFIED = 2179;
		GALVANTULA_NORMAL = 2180;
		GALVANTULA_SHADOW = 2181;
		GALVANTULA_PURIFIED = 2182;
		FERROSEED_NORMAL = 2183;
		FERROSEED_SHADOW = 2184;
		FERROSEED_PURIFIED = 2185;
		FERROTHORN_NORMAL = 2186;
		FERROTHORN_SHADOW = 2187;
		FERROTHORN_PURIFIED = 2188;
		KLINK_NORMAL = 2189;
		KLINK_SHADOW = 2190;
		KLINK_PURIFIED = 2191;
		KLANG_NORMAL = 2192;
		KLANG_SHADOW = 2193;
		KLANG_PURIFIED = 2194;
		KLINKLANG_NORMAL = 2195;
		KLINKLANG_SHADOW = 2196;
		KLINKLANG_PURIFIED = 2197;
		TYNAMO_NORMAL = 2198;
		TYNAMO_SHADOW = 2199;
		TYNAMO_PURIFIED = 2200;
		EELEKTRIK_NORMAL = 2201;
		EELEKTRIK_SHADOW = 2202;
		EELEKTRIK_PURIFIED = 2203;
		EELEKTROSS_NORMAL = 2204;
		EELEKTROSS_SHADOW = 2205;
		EELEKTROSS_PURIFIED = 2206;
		ELGYEM_NORMAL = 2207;
		ELGYEM_SHADOW = 2208;
		ELGYEM_PURIFIED = 2209;
		BEHEEYEM_NORMAL = 2210;
		BEHEEYEM_SHADOW = 2211;
		BEHEEYEM_PURIFIED = 2212;
		LITWICK_NORMAL = 2213;
		LITWICK_SHADOW = 2214;
		LITWICK_PURIFIED = 2215;
		LAMPENT_NORMAL = 2216;
		LAMPENT_SHADOW = 2217;
		LAMPENT_PURIFIED = 2218;
		CHANDELURE_NORMAL = 2219;
		CHANDELURE_SHADOW = 2220;
		CHANDELURE_PURIFIED = 2221;
		AXEW_NORMAL = 2222;
		AXEW_SHADOW = 2223;
		AXEW_PURIFIED = 2224;
		FRAXURE_NORMAL = 2225;
		FRAXURE_SHADOW = 2226;
		FRAXURE_PURIFIED = 2227;
		HAXORUS_NORMAL = 2228;
		HAXORUS_SHADOW = 2229;
		HAXORUS_PURIFIED = 2230;
		CUBCHOO_NORMAL = 2231;
		CUBCHOO_SHADOW = 2232;
		CUBCHOO_PURIFIED = 2233;
		BEARTIC_NORMAL = 2234;
		BEARTIC_SHADOW = 2235;
		BEARTIC_PURIFIED = 2236;
		CRYOGONAL_NORMAL = 2237;
		CRYOGONAL_SHADOW = 2238;
		CRYOGONAL_PURIFIED = 2239;
		SHELMET_NORMAL = 2240;
		SHELMET_SHADOW = 2241;
		SHELMET_PURIFIED = 2242;
		ACCELGOR_NORMAL = 2243;
		ACCELGOR_SHADOW = 2244;
		ACCELGOR_PURIFIED = 2245;
		STUNFISK_NORMAL = 2246;
		STUNFISK_SHADOW = 2247;
		STUNFISK_PURIFIED = 2248;
		MIENFOO_NORMAL = 2249;
		MIENFOO_SHADOW = 2250;
		MIENFOO_PURIFIED = 2251;
		MIENSHAO_NORMAL = 2252;
		MIENSHAO_SHADOW = 2253;
		MIENSHAO_PURIFIED = 2254;
		DRUDDIGON_NORMAL = 2255;
		DRUDDIGON_SHADOW = 2256;
		DRUDDIGON_PURIFIED = 2257;
		GOLETT_NORMAL = 2258;
		GOLETT_SHADOW = 2259;
		GOLETT_PURIFIED = 2260;
		GOLURK_NORMAL = 2261;
		GOLURK_SHADOW = 2262;
		GOLURK_PURIFIED = 2263;
		PAWNIARD_NORMAL = 2264;
		PAWNIARD_SHADOW = 2265;
		PAWNIARD_PURIFIED = 2266;
		BISHARP_NORMAL = 2267;
		BISHARP_SHADOW = 2268;
		BISHARP_PURIFIED = 2269;
		BOUFFALANT_NORMAL = 2270;
		BOUFFALANT_SHADOW = 2271;
		BOUFFALANT_PURIFIED = 2272;
		RUFFLET_NORMAL = 2273;
		RUFFLET_SHADOW = 2274;
		RUFFLET_PURIFIED = 2275;
		BRAVIARY_NORMAL = 2276;
		BRAVIARY_SHADOW = 2277;
		BRAVIARY_PURIFIED = 2278;
		VULLABY_NORMAL = 2279;
		VULLABY_SHADOW = 2280;
		VULLABY_PURIFIED = 2281;
		MANDIBUZZ_NORMAL = 2282;
		MANDIBUZZ_SHADOW = 2283;
		MANDIBUZZ_PURIFIED = 2284;
		HEATMOR_NORMAL = 2285;
		HEATMOR_SHADOW = 2286;
		HEATMOR_PURIFIED = 2287;
		DURANT_NORMAL = 2288;
		DURANT_SHADOW = 2289;
		DURANT_PURIFIED = 2290;
		DEINO_NORMAL = 2291;
		DEINO_SHADOW = 2292;
		DEINO_PURIFIED = 2293;
		ZWEILOUS_NORMAL = 2294;
		ZWEILOUS_SHADOW = 2295;
		ZWEILOUS_PURIFIED = 2296;
		HYDREIGON_NORMAL = 2297;
		HYDREIGON_SHADOW = 2298;
		HYDREIGON_PURIFIED = 2299;
		LARVESTA_NORMAL = 2300;
		LARVESTA_SHADOW = 2301;
		LARVESTA_PURIFIED = 2302;
		VOLCARONA_NORMAL = 2303;
		VOLCARONA_SHADOW = 2304;
		VOLCARONA_PURIFIED = 2305;
		COBALION_NORMAL = 2306;
		COBALION_SHADOW = 2307;
		COBALION_PURIFIED = 2308;
		TERRAKION_NORMAL = 2309;
		TERRAKION_SHADOW = 2310;
		TERRAKION_PURIFIED = 2311;
		VIRIZION_NORMAL = 2312;
		VIRIZION_SHADOW = 2313;
		VIRIZION_PURIFIED = 2314;
		RESHIRAM_NORMAL = 2315;
		RESHIRAM_SHADOW = 2316;
		RESHIRAM_PURIFIED = 2317;
		ZEKROM_NORMAL = 2318;
		ZEKROM_SHADOW = 2319;
		ZEKROM_PURIFIED = 2320;
		MELTAN_NORMAL = 2321;
		MELTAN_SHADOW = 2322;
		MELTAN_PURIFIED = 2323;
		MELMETAL_NORMAL = 2324;
		MELMETAL_SHADOW = 2325;
		MELMETAL_PURIFIED = 2326;
		WURMPLE_SPRING_2020 = 2327;
		WOBBUFFET_SPRING_2020 = 2328;
		RATICATE_SPRING_2020 = 2329;
		FRILLISH_FEMALE = 2330;
		JELLICENT_FEMALE = 2331;
		PIKACHU_COSTUME_2020 = 2332;
		DRAGONITE_COSTUME_2020 = 2333;
		ONIX_COSTUME_2020 = 2334;
		MEOWTH_GALARIAN = 2335;
		PONYTA_GALARIAN = 2336;
		RAPIDASH_GALARIAN = 2337;
		FARFETCHD_GALARIAN = 2338;
		MR_MIME_GALARIAN = 2339;
		CORSOLA_GALARIAN = 2340;
		DARUMAKA_GALARIAN = 2341;
		DARMANITAN_GALARIAN_STANDARD = 2342;
		DARMANITAN_GALARIAN_ZEN = 2343;
		YAMASK_GALARIAN = 2344;
		STUNFISK_GALARIAN = 2345;
		TOXTRICITY_LOW_KEY = 2463;
		TOXTRICITY_AMPED = 2464;
		SINISTEA_PHONY = 2477;
		SINISTEA_ANTIQUE = 2478;
		POLTEAGEIST_PHONY = 2480;
		POLTEAGEIST_ANTIQUE = 2481;
		OBSTAGOON_NORMAL = 2501;
		OBSTAGOON_SHADOW = 2502;
		OBSTAGOON_PURIFIED = 2503;
		PERRSERKER_NORMAL = 2504;
		PERRSERKER_SHADOW = 2505;
		PERRSERKER_PURIFIED = 2506;
		CURSOLA_NORMAL = 2507;
		CURSOLA_SHADOW = 2508;
		CURSOLA_PURIFIED = 2509;
		SIRFETCHD_NORMAL = 2510;
		SIRFETCHD_SHADOW = 2511;
		SIRFETCHD_PURIFIED = 2512;
		MR_RIME_NORMAL = 2513;
		MR_RIME_SHADOW = 2514;
		MR_RIME_PURIFIED = 2515;
		RUNERIGUS_NORMAL = 2516;
		RUNERIGUS_SHADOW = 2517;
		RUNERIGUS_PURIFIED = 2518;
		EISCUE_ICE = 2540;
		EISCUE_NOICE = 2541;
		INDEEDEE_MALE = 2542;
		INDEEDEE_FEMALE = 2543;
		MORPEKO_FULL_BELLY = 2544;
		MORPEKO_HANGRY = 2545;
		ZACIAN_CROWNED_SWORD = 2576;
		ZACIAN_HERO = 2577;
		ZAMAZENTA_CROWNED_SHIELD = 2578;
		ZAMAZENTA_HERO = 2579;
		ETERNATUS_ETERNAMAX = 2580;
		ETERNATUS_NORMAL = 2581;
		SLOWPOKE_GALARIAN = 2582;
		SLOWBRO_GALARIAN = 2583;
		SLOWKING_GALARIAN = 2584;
		LAPRAS_COSTUME_2020 = 2585;
		GENGAR_COSTUME_2020 = 2586;
		PYROAR_NORMAL = 2587;
		PYROAR_FEMALE = 2588;
		MEOWSTIC_NORMAL = 2589;
		MEOWSTIC_FEMALE = 2590;
		ZYGARDE_TEN_PERCENT = 2591;
		ZYGARDE_FIFTY_PERCENT = 2592;
		ZYGARDE_COMPLETE = 2593;
		VIVILLON_ARCHIPELAGO = 2594;
		VIVILLON_CONTINENTAL = 2595;
		VIVILLON_ELEGANT = 2596;
		VIVILLON_FANCY = 2597;
		VIVILLON_GARDEN = 2598;
		VIVILLON_HIGH_PLAINS = 2599;
		VIVILLON_ICY_SNOW = 2600;
		VIVILLON_JUNGLE = 2601;
		VIVILLON_MARINE = 2602;
		VIVILLON_MEADOW = 2603;
		VIVILLON_MODERN = 2604;
		VIVILLON_MONSOON = 2605;
		VIVILLON_OCEAN = 2606;
		VIVILLON_POKEBALL = 2607;
		VIVILLON_POLAR = 2608;
		VIVILLON_RIVER = 2609;
		VIVILLON_SANDSTORM = 2610;
		VIVILLON_SAVANNA = 2611;
		VIVILLON_SUN = 2612;
		VIVILLON_TUNDRA = 2613;
		FLABEBE_RED = 2614;
		FLABEBE_YELLOW = 2615;
		FLABEBE_ORANGE = 2616;
		FLABEBE_BLUE = 2617;
		FLABEBE_WHITE = 2618;
		FLOETTE_RED = 2619;
		FLOETTE_YELLOW = 2620;
		FLOETTE_ORANGE = 2621;
		FLOETTE_BLUE = 2622;
		FLOETTE_WHITE = 2623;
		FLORGES_RED = 2624;
		FLORGES_YELLOW = 2625;
		FLORGES_ORANGE = 2626;
		FLORGES_BLUE = 2627;
		FLORGES_WHITE = 2628;
		FURFROU_NATURAL = 2629;
		FURFROU_HEART = 2630;
		FURFROU_STAR = 2631;
		FURFROU_DIAMOND = 2632;
		FURFROU_DEBUTANTE = 2633;
		FURFROU_MATRON = 2634;
		FURFROU_DANDY = 2635;
		FURFROU_LA_REINE = 2636;
		FURFROU_KABUKI = 2637;
		FURFROU_PHARAOH = 2638;
		AEGISLASH_SHIELD = 2639;
		AEGISLASH_BLADE = 2640;
		PUMPKABOO_SMALL = 2641;
		PUMPKABOO_AVERAGE = 2642;
		PUMPKABOO_LARGE = 2643;
		PUMPKABOO_SUPER = 2644;
		GOURGEIST_SMALL = 2645;
		GOURGEIST_AVERAGE = 2646;
		GOURGEIST_LARGE = 2647;
		GOURGEIST_SUPER = 2648;
		XERNEAS_NEUTRAL = 2649;
		XERNEAS_ACTIVE = 2650;
		HOOPA_CONFINED = 2651;
		HOOPA_UNBOUND = 2652;
		SABLEYE_COSTUME_2020_DEPRECATED = 2666;
		SABLEYE_COSTUME_2020 = 2668;
		PIKACHU_ADVENTURE_HAT_2020 = 2669;
		PIKACHU_WINTER_2020 = 2670;
		DELIBIRD_WINTER_2020 = 2671;
		CUBCHOO_WINTER_2020 = 2672;
		SLOWPOKE_2020 = 2673;
		SLOWBRO_2021 = 2674;
		PIKACHU_KARIYUSHI = 2675;
		PIKACHU_POP_STAR = 2676;
		PIKACHU_ROCK_STAR = 2677;
		PIKACHU_FLYING_5TH_ANNIV = 2678;
		ORICORIO_BAILE = 2679;
		ORICORIO_POMPOM = 2680;
		ORICORIO_PAU = 2681;
		ORICORIO_SENSU = 2683;
		LYCANROC_MIDDAY = 2684;
		LYCANROC_MIDNIGHT = 2685;
		LYCANROC_DUSK = 2686;
		WISHIWASHI_SOLO = 2687;
		WISHIWASHI_SCHOOL = 2688;
		SILVALLY_NORMAL = 2689;
		SILVALLY_BUG = 2690;
		SILVALLY_DARK = 2691;
		SILVALLY_DRAGON = 2692;
		SILVALLY_ELECTRIC = 2693;
		SILVALLY_FAIRY = 2694;
		SILVALLY_FIGHTING = 2695;
		SILVALLY_FIRE = 2696;
		SILVALLY_FLYING = 2697;
		SILVALLY_GHOST = 2698;
		SILVALLY_GRASS = 2699;
		SILVALLY_GROUND = 2700;
		SILVALLY_ICE = 2701;
		SILVALLY_POISON = 2702;
		SILVALLY_PSYCHIC = 2703;
		SILVALLY_ROCK = 2704;
		SILVALLY_STEEL = 2705;
		SILVALLY_WATER = 2706;
		MINIOR_METEOR_BLUE = 2707;
		MINIOR_BLUE = 2708;
		MINIOR_GREEN = 2709;
		MINIOR_INDIGO = 2710;
		MINIOR_ORANGE = 2711;
		MINIOR_RED = 2712;
		MINIOR_VIOLET = 2713;
		MINIOR_YELLOW = 2714;
		MIMIKYU_BUSTED = 2715;
		MIMIKYU_DISGUISED = 2716;
		NECROZMA_NORMAL = 2717;
		NECROZMA_DUSK_MANE = 2718;
		NECROZMA_DAWN_WINGS = 2719;
		NECROZMA_ULTRA = 2720;
		MAGEARNA_NORMAL = 2721;
		MAGEARNA_ORIGINAL_COLOR = 2722;
		URSHIFU_SINGLE_STRIKE = 2723;
		URSHIFU_RAPID_STRIKE = 2724;
		CALYREX_NORMAL = 2725;
		CALYREX_ICE_RIDER = 2726;
		CALYREX_SHADOW_RIDER = 2727;
		VOLTORB_HISUIAN = 2728;
		LUGIA_S = 2729;
		HO_OH_S = 2730;
		RAIKOU_S = 2731;
		ENTEI_S = 2732;
		SUICUNE_S = 2733;
		SLOWKING_2022 = 2734;
		ELECTRODE_HISUIAN = 2735;
		PIKACHU_FLYING_OKINAWA = 2736;
		ROCKRUFF_DUSK = 2737;
		MINIOR_METEOR_GREEN = 2739;
		MINIOR_METEOR_INDIGO = 2740;
		MINIOR_METEOR_ORANGE = 2741;
		MINIOR_METEOR_RED = 2742;
		MINIOR_METEOR_VIOLET = 2743;
		MINIOR_METEOR_YELLOW = 2744;
		SCATTERBUG_ARCHIPELAGO = 2745;
		SCATTERBUG_CONTINENTAL = 2746;
		SCATTERBUG_ELEGANT = 2747;
		SCATTERBUG_FANCY = 2748;
		SCATTERBUG_GARDEN = 2749;
		SCATTERBUG_HIGH_PLAINS = 2750;
		SCATTERBUG_ICY_SNOW = 2751;
		SCATTERBUG_JUNGLE = 2752;
		SCATTERBUG_MARINE = 2753;
		SCATTERBUG_MEADOW = 2754;
		SCATTERBUG_MODERN = 2755;
		SCATTERBUG_MONSOON = 2756;
		SCATTERBUG_OCEAN = 2757;
		SCATTERBUG_POKEBALL = 2758;
		SCATTERBUG_POLAR = 2759;
		SCATTERBUG_RIVER = 2760;
		SCATTERBUG_SANDSTORM = 2761;
		SCATTERBUG_SAVANNA = 2762;
		SCATTERBUG_SUN = 2763;
		SCATTERBUG_TUNDRA = 2764;
		SPEWPA_ARCHIPELAGO = 2765;
		SPEWPA_CONTINENTAL = 2766;
		SPEWPA_ELEGANT = 2767;
		SPEWPA_FANCY = 2768;
		SPEWPA_GARDEN = 2769;
		SPEWPA_HIGH_PLAINS = 2770;
		SPEWPA_ICY_SNOW = 2771;
		SPEWPA_JUNGLE = 2772;
		SPEWPA_MARINE = 2773;
		SPEWPA_MEADOW = 2774;
		SPEWPA_MODERN = 2775;
		SPEWPA_MONSOON = 2776;
		SPEWPA_OCEAN = 2777;
		SPEWPA_POKEBALL = 2778;
		SPEWPA_POLAR = 2779;
		SPEWPA_RIVER = 2780;
		SPEWPA_SANDSTORM = 2781;
		SPEWPA_SAVANNA = 2782;
		SPEWPA_SUN = 2783;
		SPEWPA_TUNDRA = 2784;
		DECIDUEYE_HISUIAN = 2785;
		TYPHLOSION_HISUIAN = 2786;
		SAMUROTT_HISUIAN = 2787;
		QWILFISH_HISUIAN = 2788;
		LILLIGANT_HISUIAN = 2789;
		SLIGGOO_HISUIAN = 2790;
		GOODRA_HISUIAN = 2791;
		GROWLITHE_HISUIAN = 2792;
		ARCANINE_HISUIAN = 2793;
		SNEASEL_HISUIAN = 2794;
		AVALUGG_HISUIAN = 2795;
		ZORUA_HISUIAN = 2796;
		ZOROARK_HISUIAN = 2797;
		BRAVIARY_HISUIAN = 2798;
		MOLTRES_GALARIAN = 2799;
		ZAPDOS_GALARIAN = 2800;
		ARTICUNO_GALARIAN = 2801;
		ENAMORUS_INCARNATE = 2802;
		ENAMORUS_THERIAN = 2803;
		BASCULIN_WHITE_STRIPED = 2804;
		PIKACHU_GOFEST_2022 = 2805;
		KLEAVOR_NORMAL = 2806;
		URSALUNA_NORMAL = 2807;
	}

	enum Gender {
		GENDER_UNSET = 0;
		MALE = 1;
		FEMALE = 2;
		GENDERLESS = 3;
	}

	optional Costume costume = 1;
	optional Gender gender = 2;
	optional bool shiny = 3;
	optional Form form = 4;
	optional GameplayWeatherProto.WeatherCondition weather_boosted_condition = 5;
	optional Alignment alignment = 6;
	optional PokemonBadge pokemon_badge = 7;
	optional HoloTemporaryEvolutionId current_temp_evolution = 8;
	optional int64 temporary_evolution_finish_ms = 9;
	optional bool temp_evolution_is_locked = 10;
	optional HoloTemporaryEvolutionId locked_temp_evolution = 11;
	optional Costume original_costume = 12;
	optional int64 display_id = 13;
	optional PokemonMegaEvolutionLevelProto mega_evolution_level = 14;
}

message PokemonEncounterAttributesProto {
	optional float base_capture_rate = 1;
	optional float base_flee_rate = 2;
	optional float collision_radius_m = 3;
	optional float collision_height_m = 4;
	optional float collision_head_radius_m = 5;
	optional HoloPokemonMovementType movement_type = 6;
	optional float movement_timer_s = 7;
	optional float jump_time_s = 8;
	optional float attack_timer_s = 9;
	optional int32 bonus_candy_capture_reward = 10;
	optional int32 bonus_stardust_capture_reward = 11;
	optional float attack_probability = 12;
	optional float dodge_probability = 13;
	optional float dodge_duration_s = 14;
	optional float dodge_distance = 15;
	optional float camera_distance = 16;
	optional float min_pokemon_action_frequency_s = 17;
	optional float max_pokemon_action_frequency_s = 18;
	optional int32 bonus_xl_candy_capture_reward = 19;
	optional float shadow_form_base_capture_rate = 20;
	optional float shadow_form_attack_probability = 21;
	optional float shadow_form_dodge_probability = 22;
}

message PokemonEncounterRewardProto {
	optional HoloPokemonId pokemon_id = 1;
	optional bool use_quest_pokemon_encounter_distribuition = 2;

	optional PokemonDisplayProto pokemon_display = 3;
	optional bool is_hidden_ditto = 4;
	optional PokemonDisplayProto ditto_display = 5;
	optional Item poke_ball_override = 6;
}

message PokemonEvolutionQuestProto {
	optional QuestProto quest_requirement = 1;
	optional EvolutionQuestInfoProto quest_info = 2;
	optional HoloPokemonId evolution = 3;
	optional PokemonDisplayProto.Form form = 4;
}

message PokemonFamilyProto {
	optional HoloPokemonFamilyId family_id = 1;
	optional int32 candy = 2;
	repeated TemporaryEvolutionResourceProto mega_evolution_resources = 3;
	optional int32 xl_candy = 4;
}

message PokemonFamilySettingsProto {
	optional HoloPokemonFamilyId family_id = 1;
	optional int32 candy_per_xl_candy = 2;
	optional HoloPokemonId mega_evolvable_pokemon_id = 3;
}

message PokemonFortProto {
	optional string fort_id = 1;
	optional int64 last_modified_ms = 2;
	optional double latitude = 3;
	optional double longitude = 4;
	optional Team team = 5;
	optional HoloPokemonId guard_pokemon_id = 6;
	optional int32 guard_pokemon_level = 7;
	optional bool enabled = 8;
	optional FortType fort_type = 9;
	optional int64 gym_points = 10;
	optional bool is_in_battle = 11;
	repeated Item active_fort_modifier = 12;
	optional MapPokemonProto active_pokemon = 13;
	optional int64 cooldown_complete_ms = 14;
	optional FortSponsor.Sponsor sponsor = 15;
	optional FortRenderingType.RenderingType rendering_type = 16;
	optional int64 deploy_lockout_end_ms = 17;
	optional PokemonDisplayProto guard_pokemon_display = 18;
	optional bool closed = 19;
	optional RaidInfoProto raid_info = 20;
	optional GymDisplayProto gym_display = 21;
	optional bool visited = 22;
	optional int64 same_team_deploy_lockout_end_ms = 23;
	optional bool allow_checkin = 24;
	optional string image_url = 25;
	optional bool in_event = 26;
	optional string banner_url = 27;
	optional string partner_id = 28;
	optional bool challenge_quest_completed = 30;
	optional bool is_ex_raid_eligible = 31;
	optional PokestopIncidentDisplayProto pokestop_display = 32;
	repeated PokestopIncidentDisplayProto pokestop_displays = 33;
	optional bool is_ar_scan_eligible = 34;
	optional string geostore_tombstone_message_key = 35;
	optional string geostore_suspension_message_key = 36;
	optional int32 power_up_progress_points = 37;
	optional int64 power_up_level_expiration_ms = 38;
	optional int64 next_fort_open_ms = 39;
	optional int64 next_fort_close_ms = 40;
	repeated FortPokemonProto active_fort_pokemon = 41;
	optional bool is_route_eligible = 42;
}

message PokemonGlobalSettingsProto {
	optional bool enable_camo_shader = 1;
	optional bool display_pokemon_badge_on_model = 2;
}

message PokemonGoPlusTelemetry {
	optional PokemonGoPlusIds pgp_event_ids = 1;
	optional int32 count = 2;
	optional int32 version = 3;
}

message PokemonHomeEnergyCostsProto {
	optional HoloPokemonClass pokemon_class = 1;
	optional int32 base = 2;
	optional int32 shiny = 3;
	optional int32 cp_0_to_1000 = 4;
	optional int32 cp_1001_to_2000 = 5;
	optional int32 cp_2001_to_inf = 6;
}

message PokemonHomeFormReversionProto {
	message FormMappingProto {
		optional PokemonDisplayProto.Form reverted_form = 1;
		repeated PokemonDisplayProto.Form unauthorized_forms = 2;
		optional string reverted_form_string = 3;
	}

	optional HoloPokemonId pokemon_id = 1;
	repeated FormMappingProto form_mapping = 2;
}

message PokemonHomeProto {
	optional int32 transporter_energy = 1;
	optional int64 transporter_fully_charged_ms = 2;
	optional int64 last_passive_transporter_energy_gain_hour = 3;
}

message PokemonHomeSettingsProto {
	optional int32 player_min_level = 1;
	optional int32 transporter_max_energy = 2;
	optional string energy_sku_id = 3;
	optional int32 transporter_energy_gain_per_hour = 4;
}

message PokemonHomeTelemetry {
	optional PokemonHomeTelemetryIds pokemon_home_click_ids = 1;
}

message PokemonInfo {
	optional PokemonProto pokemon = 1;
	optional int32 current_health = 2;
	optional int32 current_energy = 3;
}

message PokemonInventoryTelemetry {
	optional PokemonInventoryTelemetryIds pokemon_inventory_click_ids = 1;
	optional string sort_id = 2;
}

message PokemonLoadDelay {
	optional PokemonLoadTelemetry pokemon = 1;
	optional float load_delay = 2;
}

message PokemonLoadTelemetry {
	optional HoloPokemonId pokemon_id = 1;
	optional PokemonDisplayProto.Costume costume = 2;
	optional PokemonDisplayProto.Gender gender = 3;
	optional bool shiny = 4;
	optional PokemonDisplayProto.Form form = 5;
	optional PokemonDisplayProto.Alignment alignment = 6;
	optional HoloTemporaryEvolutionId temporary_evolution_id = 7;
}

message PokemonMegaEvolutionLevelProto {
	optional int64 points = 1;
	optional int32 level = 2;
	optional PokemonMegaEvolutionPointDailyCountersProto mega_point_daily_counters = 3;
}

message PokemonMegaEvolutionPointDailyCountersProto {
	optional DailyCounterProto mega_evo = 1;
}

message PokemonProto {
	optional fixed64 id = 1;
	optional HoloPokemonId pokemon_id = 2;
	optional int32 cp = 3;
	optional int32 stamina = 4;
	optional int32 max_stamina = 5;
	optional HoloPokemonMove move1 = 6;
	optional HoloPokemonMove move2 = 7;
	optional string deployed_fort_id = 8;
	optional string owner_name = 9;
	optional bool is_egg = 10;
	optional double egg_km_walked_target = 11;
	optional double egg_km_walked_start = 12;
	optional PokemonCreateContext origin = 14 [deprecated = true];
	optional float height_m = 15;
	optional float weight_kg = 16;
	optional int32 individual_attack = 17;
	optional int32 individual_defense = 18;
	optional int32 individual_stamina = 19;
	optional float cp_multiplier = 20;
	optional Item pokeball = 21;
	optional int64 captured_s2_cell_id = 22;
	optional int32 battles_attacked = 23;
	optional int32 battles_defended = 24;
	optional string egg_incubator_id = 25;
	optional int64 creation_time_ms = 26;
	optional int32 num_upgrades = 27;
	optional float additional_cp_multiplier = 28;
	optional bool favorite = 29;
	optional string nickname = 30;
	optional bool from_fort = 31;
	optional int32 buddy_candy_awarded = 32;
	optional float buddy_km_walked = 33;
	optional int32 display_pokemon_id = 34;
	optional int32 display_cp = 35;
	optional PokemonDisplayProto pokemon_display = 36;
	optional bool is_bad = 37;
	optional bool hatched_from_egg = 38;
	optional int32 coins_returned = 39;
	optional int64 deployed_duration_ms = 40;
	optional int64 deployed_returned_timestamp_ms = 41;
	optional float cp_multiplier_before_trading = 42;
	optional int32 trading_original_owner_hash = 43;
	optional string original_owner_nickname = 44;
	optional int64 traded_time_ms = 45;
	optional bool is_lucky = 46;
	optional HoloPokemonMove move3 = 47;
	optional PokemonCombatStatsProto pvp_combat_stats = 48;
	optional PokemonCombatStatsProto npc_combat_stats = 49;
	optional bool move2_is_purified_exclusive = 50;
	optional string limited_pokemon_identifier = 51;
	optional int32 pre_boosted_cp = 52;
	optional float pre_boosted_additional_cp_multiplier = 53;
	optional double deployed_gym_lat_degree = 55;
	optional double deployed_gym_lng_degree = 56;
	optional bool has_mega_evolved = 57 [deprecated = true];
	optional HoloPokemonEggType egg_type = 58;
	optional int32 temp_evo_cp = 59;
	optional float temp_evo_stamina_modifier = 60;
	optional float temp_evo_cp_multiplier = 61;
	repeated HoloTemporaryEvolutionId mega_evolved_forms = 63;
	repeated PokemonEvolutionQuestProto evolution_quest_info = 64;
	optional PokemonCreateDetail origin_detail = 66;
	repeated uint64 pokemon_tag_ids = 67;
	repeated string origin_events = 68;
	optional EggSlotType egg_slot_type = 69;
	optional EggTelemetryProto egg_telemetry = 70;
	optional EggDistributionProto egg_distribution = 71;
}

message PokemonScaleSettingProto {
	enum PokemonScaleMode {
		natural_scale = 0;
		gui_scale = 1;
		battle_pokemon_scale = 2;
		raid_boss_scale = 3;
		gym_topper_scale = 4;
		map_pokemon_scale = 5;
	}

	optional PokemonScaleMode pokemon_scale_mode = 1;
	optional float min_height = 2;
	optional float max_height = 3;
}

message PokemonSearchTelemetry {
	enum PokemonSearchSourceIds {
		UNDEFINED = 0;
		FROM_SEARCH_PILL_CLICK = 1;
		LATEST_SEARCH_ENTRY_CLICK = 2;
	}

	optional PokemonSearchSourceIds pokemon_search_source_id = 1;
	optional string prepended_search_string = 2;
	optional string search_term_string = 3;
	optional string appended_search_string = 4;
	repeated int32 experiment_id = 5;
}

message PokemonSettingsProto {
	enum BuddySize {
		BUDDY_MEDIUM = 0;
		BUDDY_SHOULDER = 1;
		BUDDY_BIG = 2;
		BUDDY_FLYING = 3;
		BUDDY_BABY = 4;
	}

	optional HoloPokemonId pokemon_id = 1;
	optional float model_scale = 3;
	optional HoloPokemonType type = 4;
	optional HoloPokemonType type_2 = 5;
	optional PokemonCameraAttributesProto camera = 6;
	optional PokemonEncounterAttributesProto encounter = 7;
	optional PokemonStatsAttributesProto stats = 8;
	repeated HoloPokemonMove quick_moves = 9;
	repeated HoloPokemonMove cinematic_moves = 10;
	repeated float animation_time = 11;
	repeated HoloPokemonId evolution_ids = 12;
	optional int32 evolution_pips = 13;
	optional HoloPokemonClass pokemon_class = 14;
	optional float pokedex_height_m = 15;
	optional float pokedex_weight_kg = 16;
	optional HoloPokemonId parent_pokemon_id = 17;
	optional float height_std_dev = 18;
	optional float weight_std_dev = 19;
	optional float km_distance_to_hatch = 20;
	optional HoloPokemonFamilyId family_id = 21;
	optional int32 candy_to_evolve = 22;
	optional float km_buddy_distance = 23;
	optional BuddySize buddy_size = 24;
	optional float model_height = 25;
	repeated EvolutionBranchProto evolution_branch = 26;
	optional float model_scale_v2 = 27;
	optional PokemonDisplayProto.Form form = 28;
	optional HoloPokemonMove event_quick_move = 29;
	optional HoloPokemonMove event_cinematic_move = 30;
	repeated float buddy_offset_male = 31;
	repeated float buddy_offset_female = 32;
	optional float buddy_scale = 33;
	repeated float buddy_portrait_offset = 34;
	optional PokemonDisplayProto.Form parent_form = 35;
	optional PokemonThirdMoveAttributesProto third_move = 36;
	optional bool is_transferable = 37;
	optional bool is_deployable = 38;
	repeated float combat_shoulder_camera_angle = 39;
	optional bool is_tradable = 40;
	repeated float combat_default_camera_angle = 41;
	repeated float combat_opponent_focus_camera_angle = 42;
	repeated float combat_player_focus_camera_angle = 43;
	repeated float combat_player_pokemon_position_offset = 44;
	repeated AnimationOverrideProto photobomb_animation_overrides = 45;
	optional ShadowAttributesProto shadow = 46;
	optional int32 buddy_group_number = 47;
	optional int32 additional_cp_boost_level = 48;
	repeated HoloPokemonMove elite_quick_move = 49;
	repeated HoloPokemonMove elite_cinematic_move = 50;
	repeated TempEvoOverrideProto temp_evo_overrides = 51;
	optional int32 buddy_walked_mega_energy_award = 52;
	optional bool disable_transfer_to_pokemon_home = 61;
	optional float raid_boss_distance_offset = 62;
	repeated FormChangeProto form_change = 63;
	repeated float buddy_encounter_cameo_local_position = 64;
	repeated float buddy_encounter_cameo_local_rotation = 65;
	optional ObPokemonSetting ob_pokemon_setting = 66;
	repeated PokemonDisplayProto.Costume costume_evolution = 67;
}

message PokemonStaminaUpdateProto {
	optional fixed64 pokemon_id = 1;
	optional int32 updated_stamina = 2;
}

message PokemonStatsAttributesProto {
	optional int32 base_stamina = 1;
	optional int32 base_attack = 2;
	optional int32 base_defense = 3;
	optional int32 dodge_energy_delta = 8;
}

message PokemonSummaryFortProto {
	optional string fort_summary_id = 1;
	optional int64 last_modified_ms = 2;
	optional double latitude = 3;
	optional double longitude = 4;
}

message PokemonSurvivalTimeInfo {
	optional int32 longest_battle_duration_pokemon_time_ms = 1;
	optional int64 active_pokemon_enter_battle_time_ms = 2;
	optional fixed64 longest_battle_duration_pokemon_id = 3;
}

message PokemonTagColorBinding {
	optional PokemonTagColor color = 1;
	optional string hex_code = 2;
}

message PokemonTagProto {
	optional uint64 id = 1;
	optional string name = 2;
	optional PokemonTagColor color = 3;
	optional int32 sort_index = 4;
}

message PokemonTagSettingsProto {
	optional int32 min_player_level_for_pokemon_tagging = 1;
	repeated PokemonTagColorBinding color_binding = 2;
	optional int32 max_num_tags_allowed = 3;
	optional int32 tag_name_character_limit = 4;
}

message PokemonTelemetry {
	optional HoloPokemonId pokemon_id = 1;
	optional int32 cp = 2;
	optional float weight_kg = 3;
	optional float height_m = 4;
	optional int32 pokemon_level = 5;
}

message PokemonThirdMoveAttributesProto {
	optional int32 stardust_to_unlock = 1;
	optional int32 candy_to_unlock = 2;
}

message PokemonUpgradeSettingsProto {
	optional int32 upgrades_per_level = 1;
	optional int32 allowed_levels_above_player = 2;
	repeated int32 candy_cost = 3;
	repeated int32 stardust_cost = 4;
	optional float shadow_stardust_multiplier = 5;
	optional float shadow_candy_multiplier = 6;
	optional float purified_stardust_multiplier = 7;
	optional float purified_candy_multiplier = 8;
	optional int32 max_normal_upgrade_level = 9;
	optional int32 default_cp_boost_additional_level = 10;
	optional int32 xl_candy_min_player_level = 11;
	repeated int32 xl_candy_cost = 12;
	optional int32 max_mega_level = 13;
}

message PokestopIncidentDisplayProto {
	optional CharacterDisplayProto character_display = 10;
	optional InvasionFinishedDisplayProto invasion_finished = 11;

	optional string incident_id = 1;
	optional int64 incident_start_ms = 2;
	optional int64 incident_expiration_ms = 3;
	optional bool hide_incident = 4;
	optional bool incident_completed = 5;
	optional IncidentDisplayType incident_display_type = 6;
	optional int32 incident_display_order_priority = 7;
	optional bool continue_displaying_incident = 8;
}

message PokestopReward {
	optional Item item_id = 1;
	optional int32 item_count = 2;
}

message Polyline {
	repeated uint32 coords = 1;
}

message PolylineList {
	repeated Polyline polylines = 1;
}

message PopupControlSettingsProto {
	optional bool enabled = 1;
}

message PostStaticNewsfeedRequest {
	optional string app_id = 1;
	optional NewsfeedPost newsfeed_post = 2;
	optional LiquidAttributes liquid_attributes = 3;
	optional string bucket_name = 4;
	optional int64 post_timestamp = 5;
	optional string private_key = 6;

	message LiquidAttributes {
		optional string key = 1;
		optional LiquidAttribute value = 2;
	}
}

message PostStaticNewsfeedResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		INVALID_POST_TIMESTAMP = 2;
		INVALID_APP_ID = 3;
		INVALID_NEWSFEED_TITLE = 4;
		INVALID_NEWSFEED_CONTENT = 5;
		SEND_FAILED = 6;
		LIQUID_LOGIC_ERROR = 7;
	}

	optional Result result = 1;
}

message PostcardBookTelemetry {
	enum Status {
		OPEN = 0;
	}

	optional Status status = 1;
}

message PostcardCollectionGlobalSettingsProto {
	optional bool ob_enable = 1;
	optional int32 ob_int32 = 2;
	optional bool ob_bool = 3;
}

message PostcardCollectionSettings {
	optional bool enabled = 1;
}

message PostcardDisplayProto {
	optional string postcard_id = 1;
	optional string fort_id = 2;
	optional double fort_lat = 3;
	optional double fort_lng = 4;
	optional int64 creation_timestamp_ms = 5;
	optional string image_url = 6;
	optional bool favorite = 7;
	optional string postcard_creator_id = 8;
	optional string postcard_creator_nickname = 9;
	repeated string sticker_id = 10;
	optional string note = 11;
	optional string fort_name = 12;
	optional PostcardSource postcard_source = 13;
	optional uint64 giftbox_id = 14;
	optional string postcard_creator_codename = 15;
	optional uint64 source_giftbox_id = 16;
	optional bool is_sponsored = 17;
}

message PotionAttributesProto {
	optional float sta_percent = 1;
	optional int32 sta_amount = 2;
}

message PowerUpPokestopSharedSettings {
	optional bool feature_enabled = 1;
	optional int32 min_player_level_for_scanning = 2;
	optional float points_multiplier = 3;
}

message ProbeProto {
	optional string id = 1;
	optional string payload = 2;
}

message ProbeSettingsProto {
	optional bool enable_sidechannel = 1;
	optional bool enable_adhoc = 2;
	optional int32 adhoc_frequency_sec = 3;
}

message ProcessRouteTappableOutProto {
	optional RoutePlayStatus.Status status = 1;
	optional LootProto reward = 2;
}

message ProcessRouteTappableProto {
	optional string route_id = 1;
	optional int32 waypoint_index = 2;
}

message ProcessRouteWaypointInteractionOutProto {
	optional PokemonTradeActivity pokemon_trade = 2;
	optional PokemonCompareActivity pokemon_compare = 3;
	optional GiftTradeActivity gift_trade = 4;

	message GiftTradeActivity {
	}

	message PokemonCompareActivity {
	}

	message PokemonTradeActivity {
	}

	optional RouteActivityType.ActivityType activity_type = 1;
	optional NpcDialogueProto dialog = 5;
	optional RouteStamp route_stamp = 6;
	optional RoutePlayStatus.Status status = 7;
}

message ProcessRouteWaypointInteractionProto {
	optional string route_id = 1;
	optional string waypoint_fort_id = 2;
	optional int32 waypoint_index = 3;
}

message ProfanityCheckOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Result result = 1;
	repeated int32 invalid_contents_indexes = 2;
}

message ProfanityCheckProto {
	repeated string contents = 1;
	optional bool accept_author_only = 2;
}

message ProfileDetailsProto {
	optional string profile_name_app_key = 1;
	optional string nickname = 2;
	optional string profile_name = 4;
}

message ProfilePageTelemetry {
	optional ProfilePageTelemetryIds profile_page_click_id = 1;
}

message ProgressQuestOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_QUEST_NOT_FOUND = 2;
		ERROR_EXCEEDED_GEOTARGETED_SUBMISSION_LIMIT = 3;
		ERROR_VALIDATION_FAILED = 4;
	}

	optional Status status = 1;
	optional ClientQuestProto quest = 2;
}

message ProgressQuestProto {
	optional GeotargetedQuestValidation geotargeted_quest_validation = 3;

	optional string quest_id = 1;
	optional int32 current_progress = 2;
}

message ProgressRouteOutProto {
	enum ProgressionState {
		UNSET = 0;
		IN_PROGRESS = 1;
		COMPLETE = 2;
	}

	optional ProgressionState progression_state = 1;
	optional RoutePlayStatus.Status status = 2;
	optional RoutePlayProto route_play = 3;
	optional RouteActivityResponseProto activity_output = 4;
	optional int64 cooldown_finish_ms = 5;
}

message ProgressRouteProto {
	optional int32 waypoint_index = 1;
	optional bool skip_activity = 2;
	optional RouteActivityType.ActivityType activity_type = 3;
	optional RouteActivityRequestProto activity_input = 4;
}

message ProgressTokenDataProto {
	enum EncounterStateFunction {
		NONE_ENCOUNTER_STATE = 0;
		SETUP_ENCOUNTER = 1;
		BEGIN_ENCOUNTER_APPROACH = 2;
		ENCOUNTER_STATE_COMPLETE = 3;
		EXIT_ENCOUNTER_STATE = 4;
	}

	enum RaidBattleStateFunction {
		NONE_RAID_BATTLE_STATE = 0;
		ENTER_RAID_BATTLE_STATE = 1;
		EXIT_RAID_BATTLE_STATE = 2;
		OBSERVE_BATTLE_FRAMES = 3;
		START_RAID_BATTLE = 4;
		START_RAID_BATTLE_WHEN_READY = 5;
		END_BATTLE_WHEN_READY = 6;
	}

	enum RaidStateFunction {
		NONE_RAID_STATE = 0;
		EXIT_GYM_RAID_STATE = 1;
	}

	enum MapExploreStateFunction {
		NONE_MAP_EXPLORE_STATE = 0;
		GYM_ROOT_COMPLETE = 1;
	}

	enum RaidLobbyStateFunction {
		NONE_RAID_LOBBY_STATE = 0;
		ENTER_RAID_LOBBY_STATE = 1;
		EXIT_RAID_LOBBY_STATE = 2;
		CREATE_LOBBY = 3;
		CREATE_LOBBY_FOR_REAL = 4;
		START_RAID_BATTLE_STATE = 5;
		CANCEL_RAID_BATTLE_TRANSITION = 6;
	}

	enum RaidResolveStateFunction {
		NONE_RAID_RESOLVE_STATE = 0;
		ENTER_RAID_RESOLVE_STATE = 1;
		EXIT_RAID_RESOLVE_STATE = 2;
		INIT_RAID_RESOLVE_STATE = 3;
	}

	enum RaidLobbyGuiControllerFunction {
		NONE_RAID_LOBBY_GUI_CONTROLLER = 0;
		INIT_RAID_LOBBY_GUI_CONTROLLER = 1;
		SET_DEPENDANT_VISUALS = 2;
		START_LOBBY_INTRO = 3;
		LOBBY_INTRO = 4;
		ON_LOBBY_INTRO_COMPLETE = 5;
		SHOW_BATTLE_PREP_GUI = 6;
		HANDLE_DISMISS_COMPLETE = 7;
		START_TIMEOUT_SCREEN = 8;
		REJOIN_BATTLE = 9;
		UPDATE_AVATARS = 10;
		START_POLLING_GET_RAID_DETAILS = 11;
		PLAY_BATTLE_INTRO = 12;
		LEAVE_LOBBY = 13;
		ON_POKEMON_INVENTORY_OPENED = 14;
		ON_CLICK_INVENTORY = 15;
		ON_TAP = 16;
		HANDLE_RAID_BATTLE_COMPLETE = 17;
	}

	enum GymRootControllerFunction {
		NONE_GYM_GYM_ROOT_CONTROLLER = 0;
		EXIT_GYM_GYM_ROOT_CONTROLLER = 1;
	}

	enum RaidResolveUicontrollerFunction {
		NONE_RAID_RESOLVE_UI_CONTROLLER = 0;
		INIT_RAID_RESOLVE_UI_CONTROLLER = 1;
		CLOSE_RAID_RESOLVE_UI_CONTROLLER = 2;
	}

	optional GymRootControllerFunction gym_root_controller_function = 2;
	optional RaidStateFunction raid_state_function = 3;
	optional RaidLobbyStateFunction raid_lobby_state_function = 4;
	optional RaidLobbyGuiControllerFunction raid_lobby_gui_controller_function = 5;
	optional RaidBattleStateFunction raid_battle_state_function = 6;
	optional RaidResolveStateFunction raid_resolve_state_function = 7;
	optional RaidResolveUicontrollerFunction raid_resolve_uicontroller_function = 8;
	optional EncounterStateFunction encounter_state_function = 9;
	optional MapExploreStateFunction map_explore_state_function = 10;

	optional int32 ob_progress_token_int32 = 1;
}

message ProgressTokenDataV2 {
	optional CombatActiveStateFunctionProto combat_active_state_function = 2;
	optional CombatEndStateFunctionProto combat_end_state_function = 3;
	optional CombatReadyStateFunctionProto combat_ready_state_function = 4;
	optional CombatSwapStateFunctionProto combat_swap_state_function = 5;
	optional CombatSpecialMoveStateFunctionProto combat_special_move_state_function = 6;
	optional CombatWaitForPlayerStateFunctionProto combat_wait_for_player_state_function = 7;
	optional CombatPresentationDirectorFunctionProto combat_presentation_director_function = 8;
	optional CombatDirectorV2FunctionProto combat_director_v2_function = 9;
	optional CombatStateV2FunctionProto combat_state_v2_function = 10;
	optional CombatPokemonFunctionProto combat_pokemon_function = 11;

	enum CombatPokemonFunctionProto {
		OBSERVE_ACTION = 0;
		EXECUTE_ACTION = 1;
		PAUSE_UPDATES = 2;
	}

	enum CombatSwapStateFunctionProto {
		NONE_COMBAT_SWAP_STATE = 0;
		ENTER_COMBAT_SWAP_STATE = 1;
		EXIT_COMBAT_SWAP_STATE = 2;
		DO_WORK_COMBAT_SWAP_STATE = 3;
	}

	enum CombatStateV2FunctionProto {
		NONE_COMBAT_STATE_V2 = 0;
		OBSERVE_COMBAT_STATE = 1;
		DELAY_SPECIAL_TRANSITION = 2;
	}

	enum CombatSpecialMoveStateFunctionProto {
		NONE_COMBAT_SPECIAL_MOVE_STATE = 0;
		ENTER_COMBAT_SPECIAL_MOVE_STATE = 1;
		EXIT_COMBAT_SPECIAL_MOVE_STATE = 2;
		DO_WORK_COMBAT_SPECIAL_MOVE_STATE = 3;
		PERFORM_FLY_IN = 4;
		PERFORM_FLY_OUT = 5;
	}

	enum CombatActiveStateFunctionProto {
		NONE_COMBAT_ACTIVE_STATE = 0;
		ENTER_COMBAT_ACTIVE_STATE = 1;
		EXIT_COMBAT_ACTIVE_STATE = 2;
		DO_WORK_COMBAT_ACTIVE_STATE = 3;
	}

	enum CombatReadyStateFunctionProto {
		NONE_COMBAT_READY_STATE = 0;
		ENTER_COMBAT_READY_STATE = 1;
		EXIT_COMBAT_READY_STATE = 2;
		DO_WORK_COMBAT_READY_STATE = 3;
	}

	enum CombatEndStateFunctionProto {
		NONE_COMBAT_END_STATE = 0;
		ENTER_COMBAT_END_STATE = 1;
		EXIT_COMBAT_END_STATE = 2;
		DO_WORK_COMBAT_END_STATE = 3;
	}

	enum CombatDirectorV2FunctionProto {
		NONE_COMBAT_DIRECTOR_V2 = 0;
		TRY_START_COMBAT = 1;
		START_COMBAT_ERROR = 2;
		RECEIVE_COMBAT_UPDATE = 3;
		TRY_FAST_ATTACK = 4;
		SWAP_POKEMON_TO = 5;
		QUEUE_SPECIAL_ATTACK = 6;
		TRY_SPECIAL_ATTACK = 7;
		TRY_EXECUTE_BUFFERED_ACTION = 8;
		CAN_ACT_ON_TURN = 9;
		CAN_PERFORM_ATTACK = 10;
		CHECK_OPPONENT_CHARGE_MOVE_CHANCE = 11;
	}

	enum CombatWaitForPlayerStateFunctionProto {
		NONE_COMBAT_WAIT_FOR_PLAYER_STATE = 0;
		ENTER_COMBAT_WAIT_FOR_PLAYER_STATE = 1;
		EXIT_COMBAT_WAIT_FOR_PLAYER_STATE = 2;
		DO_WORK_COMBAT_WAIT_FOR_PLAYER_STATE = 3;
	}

	enum CombatPresentationDirectorFunctionProto {
		NONE_COMBAT_PRESENTATION_DIRECTOR = 0;
		PLAY_MINI_GAME = 1;
	}

	optional int32 ob_int32 = 1;
}

message ProjectVacationProto {
	optional bool enable2020 = 1;
}

message ProxyRequestProto {
	optional uint32 action = 1;
	optional string host = 2;
	optional bytes payload = 3;
}

message ProxyResponseProto {
	enum Status {
		UNSET = 0;
		COMPLETED = 1;
		COMPLETED_AND_REASSIGNED = 2;
		ACTION_NOT_FOUND = 3;
		ASSIGNMENT_ERROR = 4;
		PROXY_UNAUTHORIZED_ERROR = 5;
		INTERNAL_ERROR = 6;
		BAD_REQUEST = 7;
		ACCESS_DENIED = 8;
		TIMEOUT_ERROR = 9;
		RATE_LIMITED = 10;
	}

	optional Status status = 1;
	optional string assigned_host = 2;
	optional bytes payload = 3;
}

message PtcToken {
	optional string token = 1;
	optional int32 expiration = 2;
}

message PurchaseSkuOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		BALANCE_TOO_LOW = 3;
		SKU_NOT_AVAILABLE = 4;
		OVER_INVENTORY_LIMIT = 5;
	}

	optional Status status = 1;
}

message PurchaseSkuProto {
	optional string sku_id = 1;
}

message PurifyPokemonLogEntry {
	optional HoloPokemonId pokemon_id = 1;
	optional PokemonDisplayProto pokemon_display = 2;
	optional fixed64 purified_pokemon_uuid = 3;
}

message PurifyPokemonOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INSUFFICIENT_FUNDS = 3;
		ERROR_POKEMON_DEPLOYED = 4;
		ERROR_POKEMON_NOT_FOUND = 5;
		ERROR_POKEMON_NOT_SHADOW = 6;
	}

	optional Status status = 1;
	optional PokemonProto purified_pokemon = 2;
}

message PurifyPokemonProto {
	optional fixed64 pokemon_id = 1;
}

message PushGatewaySettings {
	optional int32 ob_int32_1 = 1;
	optional int32 ob_int32_2 = 2;
}

message PushGatewayTelemetry {
	optional PushGatewayTelemetryIds push_gateway_telemetry_id = 1;
}

message PushGatewayUpstreamErrorTelemetry {
	optional int32 upstream_response_status = 1;
	optional int64 token_expire_timestamp = 2;
	optional int64 client_timestamp = 3;
	optional int64 server_timestamp = 4;
}

message PushNotificationRegistryOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_CHANGE = 2;
	}

	optional Result result = 1;
}

message PushNotificationRegistryProto {
	optional ApnToken apn_token = 1;
	optional GcmToken gcm_token = 2;
}

message PushNotificationTelemetry {
	optional PushNotificationTelemetryIds notification_id = 1;
	optional string category = 2;
}

message QuestBranchDisplayProto {
	optional string title_key = 1;
	optional string description_key = 2;
	optional string image_url = 3;
	optional string button_background_color = 4;
	optional string button_text_key = 5;
	optional string button_background_image_url = 6;
	optional string button_text_color = 7;
	optional float button_text_offset = 8;
}

message QuestBranchRewardProto {
	repeated QuestRewardProto rewards = 1;
}

message QuestConditionProto {
	optional WithPokemonTypeProto with_pokemon_type = 2;
	optional WithPokemonCategoryProto with_pokemon_category = 3;
	optional WithWeatherBoostProto with_weather_boost = 4;
	optional WithDailyCaptureBonusProto with_daily_capture_bonus = 5;
	optional WithDailySpinBonusProto with_daily_spin_bonus = 6;
	optional WithWinRaidStatusProto with_win_raid_status = 7;
	optional WithRaidLevelProto with_raid_level = 8;
	optional WithThrowTypeProto with_throw_type = 9;
	optional WithWinGymBattleStatusProto with_win_gym_battle_status = 10;
	optional WithSuperEffectiveChargeMoveProto with_super_effective_charge_move = 11;
	optional WithItemProto with_item = 12;
	optional WithUniquePokestopProto with_unique_pokestop = 13;
	optional WithQuestContextProto with_quest_context = 14;
	optional WithBadgeTypeProto with_badge_type = 15;
	optional WithPlayerLevelProto with_player_level = 16;
	optional WithWinBattleStatusProto with_win_battle_status = 17;
	optional WithUniquePokemonProto with_unique_pokemon = 18;
	optional WithNpcCombatProto with_npc_combat = 19;
	optional WithPvpCombatProto with_pvp_combat = 20;
	optional WithLocationProto with_location = 21;
	optional WithDistanceProto with_distance = 22;
	optional WithInvasionCharacterProto with_invasion_character = 23;
	optional WithPokemonAlignmentProto with_pokemon_alignment = 24;
	optional WithBuddyProto with_buddy = 25;
	optional WithDailyBuddyAffectionProto with_daily_buddy_affection = 26;
	optional WithPokemonLevelProto with_pokemon_level = 27;
	optional WithMaxCpProto with_max_cp = 28;
	optional WithTempEvoIdProto with_temp_evo_id = 29;
	optional WithGblRankProto with_gbl_rank = 30;
	optional WithEncounterTypeProto with_encounter_type = 31;
	optional WithCombatTypeProto with_combat_type = 32;
	optional WithItemTypeProto with_item_type = 33;
	optional WithElapsedTimeProto with_elapsed_time = 34;
	optional WithFriendLevelProto with_friend_level = 35;
	optional WithPokemonCpProto with_pokemon_cp = 36;
	optional WithRaidLocationProto with_raid_location = 37;
	optional WithFriendsRaidProto with_friends_raid = 38;
	optional WithPokemonCostumeProto with_pokemon_costume = 39;

	enum ConditionType {
		UNSET = 0;
		WITH_POKEMON_TYPE = 1;
		WITH_POKEMON_CATEGORY = 2;
		WITH_WEATHER_BOOST = 3;
		WITH_DAILY_CAPTURE_BONUS = 4;
		WITH_DAILY_SPIN_BONUS = 5;
		WITH_WIN_RAID_STATUS = 6;
		WITH_RAID_LEVEL = 7;
		WITH_THROW_TYPE = 8;
		WITH_WIN_GYM_BATTLE_STATUS = 9;
		WITH_SUPER_EFFECTIVE_CHARGE = 10;
		WITH_ITEM = 11;
		WITH_UNIQUE_POKESTOP = 12;
		WITH_QUEST_CONTEXT = 13;
		WITH_THROW_TYPE_IN_A_ROW = 14;
		WITH_CURVE_BALL = 15;
		WITH_BADGE_TYPE = 16;
		WITH_PLAYER_LEVEL = 17;
		WITH_WIN_BATTLE_STATUS = 18;
		WITH_NEW_FRIEND = 19;
		WITH_DAYS_IN_A_ROW = 20;
		WITH_UNIQUE_POKEMON = 21;
		WITH_NPC_COMBAT = 22;
		WITH_PVP_COMBAT = 23;
		WITH_LOCATION = 24;
		WITH_DISTANCE = 25;
		WITH_POKEMON_ALIGNMENT = 26;
		WITH_INVASION_CHARACTER = 27;
		WITH_BUDDY = 28;
		WITH_BUDDY_INTERESTING_POI = 29;
		WITH_DAILY_BUDDY_AFFECTION = 30;
		WITH_POKEMON_LEVEL = 31;
		WITH_SINGLE_DAY = 32;
		WITH_UNIQUE_POKEMON_TEAM = 33;
		WITH_MAX_CP = 34;
		WITH_LUCKY_POKEMON = 35;
		WITH_LEGENDARY_POKEMON = 36;
		WITH_TEMP_EVO_POKEMON = 37;
		WITH_GBL_RANK = 38;
		WITH_CATCHES_IN_A_ROW = 39;
		WITH_ENCOUNTER_TYPE = 40;
		WITH_COMBAT_TYPE = 41;
		WITH_GEOTARGETED_POI = 42;
		WITH_ITEM_TYPE = 43;
		WITH_RAID_ELAPSED_TIME = 44;
		WITH_FRIEND_LEVEL = 45;
		WITH_STICKER = 46;
		WITH_POKEMON_CP = 47;
		WITH_RAID_LOCATION = 48;
		WITH_FRIENDS_RAID = 49;
		WITH_POKEMON_COSTUME = 50;
		WITH_APPLIED_ITEM = 51;
	}

	optional ConditionType type = 1;
}

message QuestCreateDetail {
	optional EncounterType origin = 1;
}

message QuestDialogProto {
	enum Character {
		CHARACTER_UNSET = 0;
		PROFESSOR_WILLOW = 1;
		SPECIAL_GUEST_1 = 2;
		SPECIAL_GUEST_2 = 3;
		SPECIAL_GUEST_3 = 4;
		SPECIAL_GUEST_4 = 5;
		SPECIAL_GUEST_5 = 6;
		SPECIAL_GUEST_RHI = 7;
		SPECIAL_GUEST_RHI_2 = 8;
	}

	enum CharacterExpression {
		EXPRESSION_UNSET = 0;
		HAPPY = 1;
		SYMPATHETIC = 2;
		ENERGETIC = 3;
		PUSHY = 4;
		IMPATIENT = 5;
		ADMIRATION = 6;
		SAD = 7;
		IDLE = 8;
		IDLE_B = 9;
		GREETING = 10;
		GREETING_B = 11;
		REACT_ANGRY = 12;
		REACT_CELEBRATION = 13;
		REACT_HAPPY = 14;
		REACT_LAUGH = 15;
		REACT_SAD = 16;
		REACT_SCARED = 17;
		REACT_SURPRISED = 18;
	}

	optional string text = 1;
	optional CharacterExpression expression = 2;
	optional string image_uri = 3;
	optional Character character = 4;
	repeated float character_offset = 5;
	optional string text_background_color = 6;
	optional string character_tint = 7;
	optional string quest_music_override_key = 124;
}

message QuestDisplayProto {
	optional string quest_id = 1;
	repeated QuestDialogProto dialog = 2;
	optional string description = 3;
	optional string title = 4;
	optional int32 slot = 5;
	repeated QuestDisplayProto subquest_displays = 6;
	optional bool story_ending_quest = 7;
	optional string story_ending_description = 8;
	optional string tag_color = 9;
	optional string tag_string = 10;
	optional string sponsor_string = 11;
	optional string partner_id = 12;
	optional string icon_name = 13;
	optional string background_name = 14;
	optional string foreground_name = 15;
	optional int32 progress_interval = 16;
	repeated QuestBranchDisplayProto branches = 17;
	optional int64 force_reshow_branching_quest_dialog_cooldown_ms = 18;
	optional string branching_quest_story_view_button_key = 19;
	optional string branching_quest_story_view_image_url = 20;
	optional string quest_branch_choice_view_background_image_url = 21;
	optional string quest_branch_choice_view_background_color = 22;
	optional string prop_name = 23;
	optional string quest_branch_choice_view_header_background_color = 24;
	optional string quest_branch_choice_view_bottom_gradient_color = 25;
	optional int32 sort_order = 26;
}

message QuestEncounterOutProto {
	enum Result {
		QUEST_ENCOUNTER_UNKNOWN = 0;
		QUEST_ENCOUNTER_SUCCESS = 1;
		QUEST_ENCOUNTER_NOT_AVAILABLE = 2;
		QUEST_ENCOUNTER_ALREADY_FINISHED = 3;
		POKEMON_INVENTORY_FULL = 4;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
}

message QuestEncounterProto {
	optional fixed64 pokemon_id = 1;
	optional string quest_id = 2;
}

message QuestEvolutionGlobalSettingsProto {
	optional bool enable_quest_evolutions = 1;
}

message QuestEvolutionSettingsProto {
	optional bool enable_quest_evolutions = 1;
	optional bool enable_walking_quest_evolutions = 2;
}

message QuestGlobalSettingsProto {
	optional bool enable_quests = 1;
	optional int32 max_challenge_quests = 2;
	optional bool enable_show_sponsor_name = 3;
	optional int64 elapsed_time_ms = 4;
}

message QuestGoalProto {
	repeated QuestConditionProto condition = 1;
	optional int32 target = 2;
}

message QuestIncidentProto {
	enum Context {
		UNSET = 0;
		STORY_QUEST_BATTLE = 1;
		TIMED_QUEST_BATTLE = 2;
	}

	optional string quest_id = 1;
	optional Context context = 2;
	optional IncidentLookupProto incident_lookup = 3;
}

message QuestPokemonEncounterProto {
	optional string quest_id = 1;
	optional PokemonProto pokemon = 2;
	optional EncounterType encounter_type = 3;
	optional bool is_hidden_ditto = 4;
	optional PokemonProto ditto = 5;
	optional Item poke_ball_override = 6;
}

message QuestPreconditionProto {
	optional string quest_template_id = 2;
	optional Level level = 3;
	optional Medal medal = 4;
	optional Quests quests = 5;
	optional MonthYearBucket month_year_bucket = 6;
	optional Group group = 7;
	optional StorylineProgressConditionProto story_line = 8;
	optional TeamProto team = 9;

	message TeamProto {
		optional Operator operator = 1;
		optional Team team = 2;
	}

	enum Operator {
		UNSET = 0;
		EQUALS = 1;
		GREATER_THAN = 2;
		LESS_THAN = 3;
		NOT_EQUALS = 4;
	}

	enum QuestPreconditionType {
		QUEST_PRECONDITION_UNSET = 0;
		QUEST_PRECONDITION_QUEST = 1;
		QUEST_PRECONDITION_LEVEL = 2;
		QUEST_PRECONDITION_MEDAL = 3;
		QUEST_PRECONDITION_IS_MINOR = 4;
		QUEST_PRECONDITION_EXCLUSIVE_QUESTS = 5;
		QUEST_PRECONDITION_NEVER = 6;
		QUEST_PRECONDITION_RECEIVED_ANY_LISTED_QUEST = 7;
		QUEST_PRECONDITION_MONTH_YEAR_BUCKET = 8;
		QUEST_PRECONDITION_EXCLUSIVE_IN_PROGRESS_GROUP = 9;
		QUEST_PRECONDITION_STORYLINE_PROGRESS = 10;
		QUEST_PRECONDITION_TEAM = 11;
	}

	message Group {
		enum Name {
			UNSET_NAME = 0;
			GIOVANNI = 1;
		}

		optional Name name = 1;
	}

	message Level {
		optional Operator operator = 1;
		optional int32 level = 2;
	}

	message Medal {
		optional HoloBadgeType type = 1;
		optional Operator operator = 2;
		optional int32 badge_rank = 3;
	}

	message MonthYearBucket {
		optional int32 year = 1;
		optional int32 month = 2;
	}

	message Quests {
		repeated string quest_template_ids = 1;
	}

	message StorylineProgressConditionProto {
		repeated string mandatory_quest_template_id = 1;
		repeated string optional_quest_template_id = 2;
		optional int32 optional_quests_completed_min = 3;
		optional int32 optional_quests_completed_max = 4;
	}

	optional QuestPreconditionType type = 1;
}

message QuestProto {
	enum Context {
		UNSET = 0;
		STORY_QUEST = 1;
		CHALLENGE_QUEST = 2;
		DAILY_COIN_QUEST = 3;
		TIMED_STORY_QUEST = 4;
		NON_NARRATIVE_STORY_QUEST = 5;
		LEVEL_UP_QUEST = 6;
		TGC_TRACKING_QUEST = 7;
		EVOLUTION_QUEST = 8;
		TIMED_MINI_COLLECTION_QUEST = 9;
		REFERRAL_QUEST = 10;
		BRANCHING_QUEST = 11;
	}

	optional DailyQuestProto daily_quest = 2;
	optional MultiPartQuestProto multi_part = 3;
	optional CatchPokemonQuestProto catch_pokemon = 4;
	optional AddFriendQuestProto add_friend = 5;
	optional TradePokemonQuestProto trade_pokemon = 6;
	optional DailyBuddyAffectionQuestProto daily_buddy_affection = 7;
	optional QuestWalkProto quest_walk = 8;
	optional EvolveIntoPokemonQuestProto evolve_into_pokemon = 9;
	optional GetStardustQuestProto get_stardust = 10;
	optional MiniCollectionProto mini_collection = 11;
	optional GeotargetedQuestProto geotargeted_quest = 12;
	optional BuddyEvolutionWalkQuestProto buddy_evolution_walk = 13;
	optional BattleQuestProto battle = 14;
	optional TakeSnapshotQuestProto take_snapshot = 15;

	enum Status {
		STATUS_UNDEFINED = 0;
		STATUS_ACTIVE = 1;
		STATUS_COMPLETED = 2;
	}

	message ReferralInfoProto {
		optional string referrer_id = 1;
		optional bool completion_message_sent = 2;
	}

	optional QuestType quest_type = 1;
	optional WithSingleDayProto with_single_day = 98;
	optional DaysWithARowQuestProto days_in_a_row = 99;
	optional string quest_id = 100;
	optional int64 quest_seed = 101;
	optional Context quest_context = 102;
	optional string template_id = 103;
	optional int32 progress = 104;
	optional QuestGoalProto goal = 105;
	optional Status status = 106;
	repeated QuestRewardProto quest_rewards = 107;
	optional int64 creation_timestamp_ms = 108;
	optional int64 last_update_timestamp_ms = 109;
	optional int64 completion_timestamp_ms = 110;
	optional string fort_id = 111;
	optional bool admin_generated = 112;
	optional bool stamp_count_override_enabled = 113;
	optional int32 stamp_count_override = 114;
	optional int64 s2_cell_id = 115;
	optional int32 story_quest_template_version = 116;
	optional DailyCounterProto daily_counter = 117;
	optional string reward_pokemon_icon_url = 118;
	optional int64 end_timestamp_ms = 119;
	optional bool is_bonus_challenge = 120;
	optional ReferralInfoProto referral_info = 121;
	repeated QuestBranchRewardProto branch_rewards = 122;
	optional bool dialog_read = 123;
}

message QuestRewardProto {
	optional int32 exp = 2;
	optional ItemRewardProto item = 3;
	optional int32 stardust = 4;
	optional PokemonCandyRewardProto candy = 5;
	optional string avatar_template_id = 6;
	optional string quest_template_id = 7;
	optional PokemonEncounterRewardProto pokemon_encounter = 8;
	optional int32 pokecoin = 9;
	optional PokemonCandyRewardProto xl_candy = 10;
	optional int32 level_cap = 11;
	optional StickerRewardProto sticker = 12;
	optional PokemonCandyRewardProto mega_resource = 13;
	optional IncidentRewardProto incident = 14;
	optional PlayerAttributeRewardProto player_attribute = 15;

	enum Type {
		UNSET = 0;
		EXPERIENCE = 1;
		ITEM = 2;
		STARDUST = 3;
		CANDY = 4;
		AVATAR_CLOTHING = 5;
		QUEST = 6;
		POKEMON_ENCOUNTER = 7;
		POKECOIN = 8;
		XL_CANDY = 9;
		LEVEL_CAP = 10;
		STICKER = 11;
		MEGA_RESOURCE = 12;
		INCIDENT = 13;
		PLAYER_ATTRIBUTE = 14;
	}

	optional Type type = 1;
}

message QuestSettingsProto {
	optional QuestType quest_type = 1;
	optional DailyQuestSettings daily_quest = 2;
}

message QuestStampCardProto {
	repeated QuestStampProto stamp = 1;
	optional int32 target = 2;
	optional int32 remaining_daily_stamps = 3;
	optional string id = 4;
	optional string icon_url = 5;
}

message QuestStampProto {
	optional QuestProto.Context context = 1;
	optional uint64 timestamp_ms = 2;
}

message QuestWalkProto {
	optional float quest_start_km_walked = 1;
}

message QuestsProto {
	repeated QuestProto quest = 1;
	repeated string completed_story_quest = 2;
	repeated QuestPokemonEncounterProto quest_pokemon_encounter = 3;
	optional QuestStampCardProto stamp_card = 4;
	repeated QuestIncidentProto quest_incident = 5;
}

message QuitCombatDataProto {
	optional int32 ob_int32 = 1;
}

message QuitCombatOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_COMBAT_NOT_FOUND = 2;
		ERROR_INVALID_COMBAT_STATE = 3;
		ERROR_PLAYER_NOT_IN_COMBAT = 4;
	}

	optional Result result = 1;
	optional CombatProto combat = 2;
}

message QuitCombatProto {
	optional string combat_id = 1;
}

message QuitCombatResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional QuitCombatOutProto ob_quit_combat_response = 3;
}

message RaidClientLogInfoProto {
	optional string ob_raid_client_log_info_string_1 = 1;
	optional int64 ob_raid_client_log_info_int64_1 = 2;
	optional double ob_raid_client_log_info_double_1 = 3;
	optional double ob_raid_client_log_info_double_2 = 4;
	optional int64 ob_raid_client_log_info_int64_2 = 5;
	optional string ob_raid_client_log_info_string_2 = 6;
}

message RaidClientLogsProto {
	optional JoinLobbyDataProto join_lobby_data = 2;
	optional JoinLobbyResponseDataProto join_lobby_response_data = 3;
	optional LeaveLobbyDataProto leave_lobby_data = 4;
	optional LeaveLobbyResponseDataProto leave_lobby_response_data = 5;
	optional LobbyVisibilityDataProto lobby_visibility_data = 6;
	optional LobbyVisibilityResponseDataProto lobby_visibility_response_data = 7;
	optional GetRaidDetailsDataProto get_raid_details_data = 8;
	optional GetRaidDetailsResponseDataProto get_raid_details_response_data = 9;
	optional StartRaidBattleDataProto start_raid_battle_data = 10;
	optional StartRaidBattleResponseDataProto start_raid_battle_response_data = 11;
	optional AttackRaidDataProto attack_raid_data = 12;
	optional AttackRaidResponseDataProto attack_raid_response_data = 13;
	optional SendRaidInvitationDataProto send_raid_invitation_data = 14;
	optional SendRaidInvitationResponseDataProto send_raid_invitation_response_data = 15;
	optional OnApplicationFocusDataProto on_application_focus_data = 16;
	optional OnApplicationPauseDataProto on_application_pause_data = 17;
	optional OnApplicationQuitDataProto on_application_quit_data = 18;
	optional ExceptionCaugthDataProto exception_caught_data = 19;
	optional ProgressTokenDataProto progress_token_data = 20;
	optional RpcErrorDataProto rpc_error_data = 21;
	optional ClientPredictionInconsistencyDataProto client_prediction_inconsistency_data = 22;
	optional RaidEndDataProto raid_end_data = 23;

	message RaidClientLogInfo {
		enum LogType {
			NO_TYPE = 0;
			JOIN_LOBBY_REQUEST = 1;
			JOIN_LOBBY_RESPONSE = 2;
			LEAVE_LOBBY_REQUEST = 3;
			LEAVE_LOBBY_RESPONSE = 4;
			LOBBY_VISIBILITY_REQUEST = 5;
			LOBBY_VISIBILITY_RESPONSE = 6;
			GET_RAID_DETAILS_REQUEST = 7;
			GET_RAID_DETAILS_RESPONSE = 8;
			START_RAID_BATTLE_REQUEST = 9;
			START_RAID_BATTLE_RESPONSE = 10;
			ATTACK_RAID_REQUEST = 11;
			ATTACK_RAID_RESPONSE = 12;
			SEND_RAID_INVITATION_REQUEST = 13;
			SEND_RAID_INVITATION_RESPONSE = 14;
			ON_APPLICATION_FOCUS = 15;
			ON_APPLICATION_PAUSE = 16;
			ON_APPLICATION_QUIT = 17;
			EXCEPTION_CAUGHT = 18;
			PROGRESS_TOKEN = 19;
			RPC_ERROR = 20;
			CLIENT_PREDICTION_INCONSISTENCY = 21;
			PLAYER_END_RAID = 22;
		}

		optional LogType ob_log_type = 1;
		optional uint32 ob_raid_client_log_info_uint32_1 = 2;
		optional uint32 ob_raid_client_log_info_uint32_2 = 3;
		optional float ob_raid_client_log_info_float_1 = 4;
		optional float ob_raid_client_log_info_float_2 = 5;
	}

	optional RaidClientLogInfo ob_raid_log_client_info = 1;
}

message RaidClientSettingsProto {
	optional bool remote_raid_enabled = 1;
	optional int32 max_remote_raid_passes = 2;
	optional float remote_damage_modifier = 3;
	optional int32 remote_raids_min_player_level = 4;
	optional int32 max_num_friend_invites = 5;
	optional int32 friend_invite_cutoff_time_sec = 6;
	optional bool can_invite_friends_in_person = 7;
	optional bool can_invite_friends_remotely = 8;
	optional int32 max_players_per_lobby = 9;
	optional int32 max_remote_players_per_lobby = 10;
	optional int64 invite_cooldown_duration_millis = 11;
	optional int32 max_num_friend_invites_per_action = 12;
	repeated RaidLevel unsupported_raid_levels_for_friend_invites = 13;
	repeated RaidLevel unsupported_remote_raid_levels = 14;
	optional bool is_nearby_raid_notification_disabled = 15;
	repeated string ob_repeated_string = 16;
	repeated ObRaidClientSetting ob_raid_client_setting = 17;
	optional ObRaidClientSetting1 ob_raid_client_setting_1 = 18;
}

message RaidCreateDetail {
	optional bool is_exclusive = 1;
	optional bool is_mega = 2;
	optional int64 player_captured_s2_cell_id = 3;
}

message RaidEncounterProto {
	optional PokemonProto pokemon = 1;
	optional int64 encounter_id = 2;
	optional string spawnpoint_id = 3;
	optional CaptureProbabilityProto capture_probabilities = 4;
	optional int32 throws_remaining = 5;
	optional RaidLevel raid_level = 6;
	optional string fort_id = 7;
	optional bool is_exclusive = 8;
	optional bool is_event_legendary = 9;
	optional Item raid_ball = 10;
}

message RaidEndDataProto {
	enum RaidEndType {
		NO_END = 0;
		LEAVE_LOBBY = 1;
		TIME_OUT = 2;
		ENCOUNTER_POKEMON_NOT_CAUGHT = 3;
		ENCOUNTER_POKEMON_CAUGHT = 4;
		WITH_ERROR = 5;
	}

	optional RaidEndType ob_raid_end_type = 1;
}

message RaidInfoProto {
	optional int64 raid_seed = 1;
	optional int64 raid_spawn_ms = 2;
	optional int64 raid_battle_ms = 3;
	optional int64 raid_end_ms = 4;
	optional PokemonProto raid_pokemon = 5;
	optional RaidLevel raid_level = 6;
	optional bool complete = 7;
	optional bool is_exclusive = 8;
	optional bool is_raid_hidden = 9;
	optional bool is_scheduled_raid = 10;
	optional bool is_free = 11;
	optional string campaign_id = 12;
	optional Item raid_ball = 14;
}

message RaidInvitationDetails {
	optional string gym_id = 1;
	repeated int32 lobby_id = 2;
	optional int64 raid_seed = 3;
	optional int64 raid_invitation_expire_ms = 4;
	optional RaidLevel raid_level = 5;
	optional string gym_name = 6;
	optional string image_url = 7;
	optional double latitude = 8;
	optional double longitude = 9;
	optional HoloPokemonId raid_pokemon_id = 10;
	optional PokemonDisplayProto.Form raid_pokemon_form = 11;
	optional string inviter_id = 12;
	optional string inviter_nickname = 13;
	optional PlayerAvatarProto inviter_avatar = 14;
	optional Team inviter_team = 15;
	optional HoloTemporaryEvolutionId raid_pokemon_temp_evo_id = 16;
	optional PokemonDisplayProto.Costume raid_pokemon_costume = 17;
}

message RaidInviteFriendsSettingsProto {
	optional int32 raid_invite_min_level = 1;
}

message RaidLoggingSettingsProto {
	optional bool enabled = 1;
	optional bool enabled_pokemon = 2;
	optional bool ob_bool = 3;
}

message RaidPlayerStatProto {
	enum StatType {
		UNSET_RAID_STAT = 0;
		FINAL_STRIKE_PLAYER = 1;
		DAMAGE_DEALT_PLAYER = 2;
		REMOTE_DISTANCE_PLAYER = 4;
		USE_MEGA_EVO_PLAYER = 5;
		USE_BUDDY_PLAYER = 6;
		CUSTOMIZE_AVATAR_PLAYER = 7;
		NUM_FRIENDS_IN_RAID_PLAYER = 8;
		RECENT_WALKING_DISTANCE_PLAYER = 10;
		NUM_CHARGED_ATTACKS_PLAYER = 11;
		SURVIVAL_DURATION_POKEMON = 15;
		POKEMON_HEIGHT_POKEMON = 22;
	}

	optional StatType stat_id = 1;
	optional PlayerPublicProfileProto player_profile = 3;
	optional double stat_value = 4;
	optional RaidPlayerStatsPokemonProto pokemon = 5;
	optional bool featured = 6;
	optional int32 attacker_index = 7;
}

message RaidPlayerStatsPokemonProto {
	optional HoloPokemonId holo_pokemon_id = 1;
	optional PokemonDisplayProto pokemon_display = 2;
}

message RaidPlayerStatsProto {
	repeated RaidPlayerStatProto stats = 1;
}

message RaidProto {
	optional int64 raid_seed = 1;
	optional int64 started_ms = 2;
	optional int64 completed_ms = 3;
	optional HoloPokemonId encounter_pokemon_id = 4;
	optional bool completed_battle = 5;
	optional bool received_rewards = 6;
	optional bool finished_encounter = 7;
	optional bool received_default_rewards = 8;
	optional bool incremented_raid_friends = 9;
	optional int64 completed_battle_ms = 10;
	optional bool is_remote = 12;
	optional PokemonProto reward_pokemon = 14;
}

message RaidRewardsLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional bool is_exclusive = 2;
	repeated ItemProto items = 3;
	repeated ItemProto default_rewards = 4;
	optional int32 stardust = 5;
	repeated LootItemProto stickers = 6;
	optional bool is_mega = 7;
	optional PokemonCandyRewardProto mega_resource = 8;
}

message RaidTelemetry {
	optional RaidTelemetryIds raid_telemetry_id = 1;
	optional string bundle_version = 2;
	optional float time_since_enter_raid = 3;
	optional float time_since_last_raid_telemetry = 4;
	optional int32 raid_level = 5;
	optional bool private_lobby = 6;
	optional string ticket_item = 7;
	optional int32 num_players_in_lobby = 8;
	optional int32 battle_party_number = 9;
}

message RaidTicketProto {
	optional string ticket_id = 1;
	optional Item item = 2;
	optional ExclusiveTicketInfoProto exclusive_info = 4;
}

message RaidTicketSettingsProto {
	optional bool consume_raid_ticket_upon_battle_start = 1;
}

message RaidTicketsProto {
	repeated RaidTicketProto raid_ticket = 1;
}

message RangeProto {
	optional int32 min = 1;
	optional int32 max = 2;
}

message ReadPointOfInterestDescriptionTelemetry {
	optional string result = 1;
	optional string fort_id = 2;
	optional int32 fort_type = 3;
	optional string partner_id = 4;
	optional string campaign_id = 5;
}

message ReassignPlayerOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional int32 reassigned_instance = 2;
}

message ReassignPlayerProto {
	optional int32 current_instance = 1;
}

message RecommendedSearchProto {
	optional string search_label = 1;
	optional string prepended_search_string = 2;
	optional string search_key = 3;
	optional string appended_search_string = 4;
}

message RecycleItemOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_ENOUGH_COPIES = 2;
		ERROR_CANNOT_RECYCLE_INCUBATORS = 3;
	}

	optional Result result = 1;
	optional int32 new_count = 2;
}

message RecycleItemProto {
	optional Item item = 1;
	optional int32 count = 2;
}

message RedeemAppleReceiptOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	repeated string provisioned_transaction_tokens = 2;
}

message RedeemAppleReceiptProto {
	optional string receipt = 1;
	optional string purchase_currency = 2;
	optional int32 price_paid_e6 = 3;
	optional int64 price_paid_e6_long = 4;
}

message RedeemGoogleReceiptOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	optional string transaction_token = 2;
}

message RedeemGoogleReceiptProto {
	optional string receipt = 1;
	optional string receipt_signature = 2;
	optional string purchase_currency = 3;
	optional int32 price_paid_e6 = 4;
	optional int64 price_paid_e6_long = 5;
	optional string country_code = 6;
}

message RedeemPasscodeRequestProto {
	optional string passcode = 1;
}

message RedeemPasscodeResponseProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NOT_AVAILABLE = 2;
		OVER_INVENTORY_LIMIT = 3;
		ALREADY_REDEEMED = 4;
		OVER_PLAYER_REDEMPTION_LIMIT = 5;
	}

	message AcquiredItem {
		optional string item = 1;
		optional int64 count = 2;
	}

	optional Result result = 1;
	optional bytes acquired_items_proto = 2;
	optional string passcode = 3;
}

message RedeemPasscodeRewardProto {
	repeated RedeemedItemProto items = 1;
	repeated RedeemedAvatarItemProto avatar_items = 2;
	repeated PokemonProto egg_pokemon = 3;
	repeated PokemonProto pokemon = 4;
	repeated PokeCandyProto poke_candy = 5;
	optional int32 stardust = 6;
	optional int32 pokecoins = 7;
	repeated HoloBadgeType badges = 8;
	repeated RedeemedStickerProto redeemed_stickers = 9;
	repeated string quest_ids = 10;
}

message RedeemSamsungReceiptOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	optional string purchase_id = 2;
}

message RedeemSamsungReceiptProto {
	optional string purchase_data = 1;
	optional string purchase_id = 2;
	optional string purchase_currency = 3;
	optional int64 price_paid_e6_long = 4;
}

message RedeemTicketGiftForFriendOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		FAILURE_ELIGIBILITY = 3;
		FAILURE_GIFT_NOT_FOUND = 4;
	}

	optional Status status = 1;
	optional GiftingEligibilityStatusProto gifting_eligibility = 2;
}

message RedeemTicketGiftForFriendProto {
	optional GiftingIapItemProto gifting_iap_item = 1;
	optional string recipient_friend_id = 2;
}

message RedeemedAvatarItemProto {
	optional string avatar_template_id = 1;
	optional int32 item_count = 2;
}

message RedeemedItemProto {
	optional Item item = 1;
	optional int32 item_count = 2;
}

message RedeemedStickerProto {
	optional string sticker_id = 1;
	optional int32 count = 2;
}

message ReferContactListFriendRequest {
	message ReferralProto {
		optional string referral_code = 1;
		optional string referral_link = 2;
	}

	optional SocialV2Enum.ContactMethod contact_method = 1;
	optional string contact_info = 2;
	optional string contact_id = 3;
	optional string receiver_name = 4;
	optional string app_store_link = 5;
	optional ReferralProto referral = 6;
	optional string country_code = 7;
}

message ReferContactListFriendResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_CONTACT_NOT_FOUND = 3;
		ERROR_FAILED_TO_SEND_EMAIL = 4;
		ERROR_EXCEED_LIMIT = 5;
		ERROR_NO_SENDER_NAME = 6;
		ERROR_INAPPROPRIATE_RECEIVER_NAME = 7;
		ERROR_ALREADY_SIGNED_UP = 8;
	}

	optional Result result = 1;
}

message ReferralMilestonesProto {
	optional string referrer_player_id = 3;
	optional string referee_player_id = 4;

	message MilestoneProto {
		enum Status {
			UNSET = 0;
			ACTIVE = 1;
			ACHIEVED = 2;
			ACTIVE_HIDDEN = 3;
			ACHIEVED_HIDDEN = 4;
			REWARDS_CLAIMED = 5;
		}

		message TemplateVariableProto {
			optional string name = 1;
			optional string literal = 2;
		}

		optional string name_key = 1;
		optional Status status = 2;
		repeated bytes reward = 3;
		optional string milestone_template_id = 4;
		optional int32 version = 5;
		repeated TemplateVariableProto name_template_variable = 6;
		optional bool viewed_by_client = 7;
		optional int64 created_timestamp_ms = 8;
	}

	optional string milestones_template_id = 1;
	optional int32 version = 2;
	optional MILESTONE milestone = 5;

	message MILESTONE {
		optional string key = 1;
		optional MilestoneProto value = 2;
	}
}

message ReferralSettingsProto {
	message RecentFeatureProto {
		optional EventSectionProto.BonusBoxProto.IconType icon_type = 1;
		optional string feature_name = 2;
		optional string description = 3;
	}

	optional bool feature_enabled = 1;
	repeated RecentFeatureProto recent_features = 2;
	optional int64 add_referrer_grace_period_ms = 3;
	optional int64 client_get_milestone_interval_ms = 4;
	optional int32 min_num_days_without_session_for_lapsed_player = 5;
	optional string referral_link_url = 6;
}

message ReferralTelemetry {
	optional ReferralTelemetryIds referral_telemetry_id = 1;
	optional ReferralRole referral_role = 2;
	optional string milestone_description_string_key = 3;
	optional ReferralTelemetrySource referral_telemetry_source = 4;
}

message RegisterBackgroundDeviceActionProto {
	optional string device_type = 1;
	optional string device_id = 2;
}

message RegisterBackgroundDeviceResponseProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
	optional BackgroundToken token = 2;
}

message RegisterSfidaRequest {
	enum DeviceType {
		SFIDA = 0;
		PALMA = 1;
		WAINA = 2;
		UNSET = -1;
	}

	optional string sfida_id = 1;
	optional DeviceType device_type = 2;
}

message RegisterSfidaResponse {
	optional bytes access_token = 1;
}

message ReleasePokemonOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		POKEMON_DEPLOYED = 2;
		FAILED = 3;
		ERROR_POKEMON_IS_EGG = 4;
		ERROR_POKEMON_IS_BUDDY = 5;
	}

	optional Status status = 1;
	optional int32 candy_awarded = 2;
	optional int32 xl_candy_awarded = 3 [deprecated = true];
	optional XlCandyAwArdedPerId xl_candy_awarded_per_id = 4;

	message XlCandyAwArdedPerId {
		optional int32 key = 1;
		optional int32 value = 2;
	}
}

message ReleasePokemonProto {
	optional fixed64 pokemon_id = 1;
	repeated fixed64 pokemon_ids = 2;
}

message ReleasePokemonTelemetry {
	optional PokemonTelemetry pokemon = 1;
}

message RemoteGiftPingRequestProto {
}

message RemoteGiftPingResponseProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		STILL_IN_COOL_DOWN = 2;
		BUDDY_NOT_SET = 3;
		ERROR_INVENTORY_FULL = 4;
		ERROR_NO_REMOTE_GIFTS = 5;
	}

	optional Result result = 1;
}

message RemoteRaidTelemetry {
	optional RemoteRaidTelemetryIds remote_raid_telemetry_id = 1;
	optional RemoteRaidJoinSource remote_raid_join_source = 2;
	optional RemoteRaidInviteAcceptSource remote_raid_invite_accept_source = 3;
}

message RemoveFriendOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_DOES_NOT_EXIST_DELETED = 2;
		ERROR_PLAYER_NOT_A_FRIEND = 3;
	}

	optional Result result = 1;
}

message RemoveFriendProto {
	optional string player_id = 1;
	optional string nia_account_id = 2;
}

message RemoveLoginActionOutProto {
	enum Status {
		UNSET = 0;
		LOGIN_NOT_REMOVABLE = 1;
		ERROR_UNKNOWN = 2;
	}

	optional bool success = 1;
	repeated LoginDetail login_detail = 2;
	optional Status status = 3;
}

message RemoveLoginActionProto {
	optional IdentityProvider identity_provider = 1;
	optional string auth_provider_id = 2;
}

message RemoveQuestOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_QUEST_NOT_FOUND = 2;
		ERROR_STORY_QUEST_NOT_REMOVABLE = 3;
	}

	optional Status status = 1;
}

message RemoveQuestProto {
	optional string quest_id = 1;
}

message ReportAdFeedbackRequest {
	optional AdFeedbackComplaintReason complaint_reason = 5;
	optional AdFeedbackNotInterestedReason not_interested_reason = 6;
	optional AdFeedbackLikeReason like_reason = 7;

	optional string game_id = 1;
	optional string user_id = 2;
	optional string guid = 3;
	optional bytes encrypted_ad_token = 4;
	optional string free_text_response = 8;
}

message ReportAdFeedbackResponse {
	enum Status {
		SUCCESS = 0;
		ERROR = 1;
	}

	optional Status status = 1;
}

message ReportAdInteractionProto {
	optional ViewImpressionInteraction view_impression = 5;
	optional ViewFullscreenInteraction view_fullscreen = 6;
	optional FullScreenInteraction fullscreen_interaction = 7;
	optional CTAClickInteraction cta_clicked = 8;
	optional AdSpawnInteraction ad_spawned = 9;
	optional AdDismissalInteraction ad_dismissed = 10;
	optional ViewWebArInteraction view_web_ar = 11;

	enum AdType {
		AD_TYPE_UNKNOWN = 0;
		AD_TYPE_SPONSORED_GIFT = 1;
		AD_TYPE_SPONSORED_BALLOON = 2;
		AD_TYPE_SPONSORED_BALLOON_WASABI = 3;
		AD_TYPE_SPONSORED_BALLOON_GOOGLE_MANAGED_AD = 4;
		AD_TYPE_SPONSORED_BALLOON_AR_AD = 5;
	}

	message ViewImpressionInteraction {
		optional string preview_image_url = 1;
		optional bool is_persisted_gift = 2;
	}

	message ViewWebArInteraction {
		optional string web_ar_url = 1;
	}

	message AdDismissalInteraction {
		enum AdDismissalType {
			AD_DISMISSAL_UNKNOWN = 0;
			AD_DISMISSAL_TR_DISPLACES_AD_BALLOON = 1;
			AD_DISMISSAL_NEW_AD_BALLOON_DISPLACES_OLD = 2;
			AD_DISMISSAL_AD_BALLOON_AUTO_DISMISS = 3;
			AD_DISMISSAL_PLAYER_OPTED_OUT_OF_ADS = 4;
		}

		optional AdDismissalType ad_dismissal_type = 1;
	}

	message AdSpawnInteraction {
		enum AdInhibitionType {
			AD_INHIBITION_UNKNOWN = 0;
			AD_INHIBITION_TR_PREVENTS_BALLOON_SPAWN = 1;
			AD_INHIBITION_CLIENT_ERROR = 2;
			AD_INHIBITION_DISABLED_IN_GMT = 3;
			AD_INHIBITION_PLAYER_OPTED_OUT_OF_ADS = 4;
		}

		optional bool spawn_success = 1;
		optional AdInhibitionType ad_inhibition_type = 2;
	}

	message FullScreenInteraction {
		optional string fullscreen_image_url = 1;
		optional int64 total_residence_time_ms = 2;
		optional int64 time_away_ms = 3;
		optional bool took_screenshot = 4;
	}

	message CTAClickInteraction {
		optional string cta_url = 6;
	}

	message ViewFullscreenInteraction {
		optional string fullscreen_image_url = 1;
	}

	message GoogleManagedAdDetails {
		optional string gam_order_id = 1;
		optional string gam_line_item_id = 2;
		optional string gam_creative_id = 3;
	}

	optional string game_id = 1;
	optional string user_id = 2;
	optional string guid = 3;
	optional bytes encrypted_ad_token = 4;
	optional AdType ad_type = 100;
	optional GoogleManagedAdDetails google_managed_ad = 200;
}

message ReportAdInteractionResponse {
	enum Status {
		SUCCESS = 0;
		MALFORMED = 1;
		EXPIRED = 2;
	}

	optional Status status = 1;
}

message ReviveAttributesProto {
	optional float sta_percent = 1;
}

message RoadMetadata {
	optional bool is_tunnel = 1;
	optional bool railway_is_siding = 2;
	optional string network = 3;
	optional string shield_text = 4;
	optional string route = 5;
}

message RocketBalloonDisplayProto {
	enum BalloonType {
		ROCKET = 0;
		ROCKET_B = 1;
	}

	optional BalloonType type = 1;
	optional RocketBalloonIncidentDisplayProto incident_display = 2;
}

message RocketBalloonGlobalSettingsProto {
	optional int32 min_player_level = 1;
}

message RocketBalloonIncidentDisplayProto {
	optional string incident_id = 1;
	optional IncidentDisplayType incident_display_type = 2;
}

message RouteActivityRequestProto {
	optional PokemonTradeRequest pokemon_trade_request = 1;
	optional PokemonCompareRequest pokemon_compare_request = 2;
	optional GiftTradeRequest gift_trade_request = 3;

	message GiftTradeRequest {
	}

	message PokemonCompareRequest {
	}

	message PokemonTradeRequest {
		optional fixed64 pokemon_id = 1;
	}
}

message RouteActivityResponseProto {
	optional PokemonTradeResponse pokemon_trade_response = 1;
	optional PokemonCompareResponse pokemon_compare_response = 2;
	optional GiftTradeResponse gift_trade_response = 3;

	message GiftTradeResponse {
	}

	message PokemonCompareResponse {
	}

	message PokemonTradeResponse {
		enum Result {
			UNSET = 0;
			SUCCESS = 1;
			ERROR_INVALID_POKEMON = 2;
		}

		optional Result result = 1;
		optional PokemonProto pokemon = 2;
	}

	optional LootProto activity_reward = 4;
	optional ActivityPostcardData postcard_data = 5;
}

message RouteActivityType {
	enum ActivityType {
		UNSET = 0;
		NO_ACTIVITY = 1;
		ACTIVITY_POKEMON_TRADE = 2;
		ACTIVITY_POKEMON_COMPARE = 3;
		ACTIVITY_GIFT_TRADE = 4;
	}
}

message RouteBadgeListEntry {
	optional string route_id = 1;
	optional RouteType route_type = 2;
	optional double start_lat = 3;
	optional double start_lng = 4;
	optional string route_name = 5;
	optional string route_image_url = 6;
	optional int64 last_play_end_time = 7;
	optional int32 num_completions = 8;
	optional int64 route_duration_seconds = 9;
	optional int32 num_unique_stamps_collected = 10;
}

message RouteCreationProto {
	enum Status {
		UNSET = 0;
		IN_PROGRESS = 1;
		SUBMITTED = 2;
		REJECTED = 3;
	}

	message RejectionReason {
		optional string reason_code = 1;
	}

	optional int64 id = 1;
	optional int64 version = 2;
	optional int64 created_time = 3;
	optional int64 last_update_time = 4;
	optional RouteDraftProto route = 5;
	optional Status status = 6;
	repeated RejectionReason rejection_reason = 7;
	repeated int64 rejected_hash = 8;
}

message RouteDiscoverySettingsProto {
	optional float nearby_visible_radius_meters = 1;
	optional int32 min_player_level = 2;
}

message RouteDraftProto {
	optional string name = 1;
	optional string description = 2;
	repeated WaypointDraftProto waypoint = 3;
	optional bool reversible = 4;
	optional bool show_creator_name = 5;
	optional RouteImageProto main_image = 6;
	optional int32 badge_variant = 7;
}

message RouteGlobalSettingsProto {
	optional bool enable_routes = 1;
	optional bool enable_poi_detail_caching = 2;
	optional bool enable_route_play = 3;
	optional bool enable_route_tappables = 4;
	optional float ob_float = 5;
}

message RouteImageProto {
	optional string image_id = 1;
	optional string image_context = 2;
}

message RouteMakerProto {
	repeated RouteCreationProto route = 1;
}

message RoutePlayProto {
	message RoutePlayWaypointProto {
		optional string fort_id = 1;
		optional string fort_name = 2;
		optional string image_url = 3;
		optional double lat = 4;
		optional double lng = 5;
		optional bool is_progressed = 6;
		optional int32 num_tappables = 7;
		optional int32 num_collected_tappables = 8;
		optional RouteStamp route_stamp = 9;
		optional string fort_description = 10;
	}

	optional string route_id = 1;
	repeated RoutePlayWaypointProto waypoints = 2;
	optional int32 route_version = 3;
	optional string route_name = 4;
	optional string route_description = 5;
	optional string route_creator_codename = 6;
	optional string route_image_url = 7;
	optional bool is_reversed = 8;
	optional bool has_received_completion_rewards = 9;
	optional int32 play_version = 10;
	optional int64 expiration_time_ms = 11;
	optional int64 start_time_ms = 12;
}

message RoutePlaySettingsProto {
	optional int32 min_player_level = 1;
	optional int32 route_cooldown_minutes = 2;
	optional int32 route_expiration_minutes = 3;
	optional int32 route_puase_distance_m = 4;
}

message RoutePlayStatus {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_ROUTE_NOT_FOUND = 3;
		ERROR_FORT_NOT_FOUND = 4;
		ERROR_INVALID_START_FORT = 5;
		ERROR_WRONG_WAYPOINT = 6;
		ERROR_ROUTE_PLAY_EXPIRED = 7;
		ERROR_ROUTE_IN_COOLDOWN = 8;
		ERROR_ROUTE_PLAY_NOT_FOUND = 9;
		ERROR_PLAYER_LEVEL_TOO_LOW = 10;
		ERROR_U13_NO_PERMISSION = 11;
	}
}

message RouteStamp {
	enum Color {
		COLOR_UNSET = 0;
		COLOR_179D62 = 1;
		COLOR_E10012 = 2;
		COLOR_1365AE = 3;
		COLOR_E89A05 = 4;
	}

	enum Type {
		TYPE_UNSET = 0;
	}

	optional Type type = 1 [deprecated = true];
	optional Color color = 2 [deprecated = true];
	optional string stamp_id = 3;
	optional string asset_id = 4;
	optional string category = 5;
	optional int32 stamp_index = 6;
}

message RouteValidation {
	enum Error {
		UNSET = 0;
		INVALID_NUM_FORTS = 1;
		INVALID_NUM_CHECKPOINTS = 2;
		INVALID_TOTAL_DISTANCE = 3;
		INVALID_DISTANCE_BETWEEN_FORTS = 4;
		INVALID_DISTANCE_BETWEEN_CHECKPOINTS = 5;
		INVALID_FORT = 6;
		DUPLICATE_FORTS = 7;
		INVALID_START_OR_END = 8;
		INVALID_NAME_LENGTH = 9;
		INVALID_DESCRIPTION_LENGTH = 10;
		TOO_MANY_CHECKPOINTS_BETWEEN_FORTS = 11;
		INVALID_MAIN_IMAGE = 12;
		BAD_NAME = 13;
		BAD_DESCRIPTION = 14;
	}

	repeated Error error = 1;
}

message RoutesCreationSettingsProto {
	optional int32 max_open_routes = 1;
	optional int32 min_stops_amount = 2;
	optional int32 max_stops_amount = 3;
	optional float min_total_distance_m = 4;
	optional float max_total_distance_m = 5;
	optional float min_distance_between_stops_m = 6;
	optional float max_distance_between_stops_m = 7;
	optional int32 max_total_checkpoint_amount = 8;
	optional int32 max_checkpoint_amount_between_two_poi = 9;
	optional float min_distance_between_checkpoints_m = 10;
	optional float max_distance_between_checkpoints_m = 11;
	optional float allow_checkpoint_per_route_distance = 12;
	optional float checkpoint_recommendation_distance_between_pois = 13;
	optional int32 max_name_length = 14;
	optional int32 max_description_length = 15;
	optional uint32 min_player_level = 16;
	optional bool enabled = 17;
}

message RpcErrorDataProto {
	enum Status {
		UNDEFINED = 0;
		SUCCESS = 1;
		BAD_RESPONSE = 3;
		ACTION_ERROR = 4;
		DISPATCH_ERROR = 5;
		SERVER_ERROR = 6;
		ASSIGNMENT_ERROR = 7;
		PROTOCOL_ERROR = 8;
		AUTHENTICATION_ERROR = 9;
		CANCELLED_REQUEST = 10;
		UNKNOWN_ERROR = 11;
		NORETRIES_ERROR = 12;
		UNAUTHORIZED_ERROR = 13;
		PARSING_ERROR = 14;
		ACCESS_DENIED = 15;
		ACCESS_SUSPENDED = 16;
	}

	optional Method ob_method = 1;
	optional Status status = 2;
}

message RpcResponseTelemetry {
	enum ConnectionType {
		UNKNOWN = 0;
		WIFI = 1;
		CELL_DEFAULT = 2;
		CELL_1G = 3;
		CELL_2G = 4;
		CELL_3G = 5;
		CELL_4G = 6;
		CELL_5G = 7;
		CELL_6G = 8;
		CELL_7G = 9;
	}

	optional float window_duration = 1;
	repeated RpcResponseTime response_timings = 2;
	optional ConnectionType connection_type = 3;
}

message RpcResponseTime {
	optional Method rpc_id = 1;
	optional int32 count_call = 2;
	optional float average_response_time = 3;
	optional int32 timeout_count = 4;
}

message RpcSocketResponseTelemetry {
	optional float window_duration = 1;
	repeated RpcSocketResponseTime response_timings = 2;
}

message RpcSocketResponseTime {
	optional uint64 request_id = 1;
	optional string probe_id = 2;
	optional float response_time = 3;
	optional bool side_channel = 4;
	optional bool ad_hoc = 5;
	optional float ad_hoc_delay = 6;
}

message SaveCombatPlayerPreferencesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message SaveCombatPlayerPreferencesProto {
	optional CombatPlayerPreferencesProto preferences = 1;
}

message SavePlayerPreferencesOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Result result = 1;
}

message SavePlayerPreferencesProto {
	optional PlayerPreferencesProto player_preferences_proto = 1;
}

message SavePlayerSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message SavePlayerSettingsProto {
	optional PlayerSettingsProto settings = 1;
}

message SavePlayerSnapshotOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		TOO_SOON_TO_UPDATE = 2;
		ERROR_FAILED_TO_UPDATE = 3;
		ERROR_REQUEST_TIMED_OUT = 4;
	}

	optional Result result = 1;
}

message SavePlayerSnapshotProto {
}

message SaveSocialPlayerSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Result result = 1;
}

message SaveSocialPlayerSettingsProto {
	optional SocialPlayerSettingsProto settings = 1;
}

message ScreenResolutionTelemetry {
	optional int32 device_width = 1;
	optional int32 device_height = 2;
}

message SearchFilterPreferenceProto {
	message SearchFilterQueryProto {
		optional string title = 1;
		optional string query = 2;
	}

	repeated SearchFilterQueryProto recent_searches = 1;
	repeated SearchFilterQueryProto favorite_searches = 2;
}

message SearchPlayerOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
	}

	optional Result result = 1;
	optional PlayerSummaryProto player = 2;
}

message SearchPlayerProto {
	optional string friend_code = 1;
}

message SendContactListFriendInviteRequest {
	repeated string emails = 1;
	repeated string phone_numbers = 2;
	optional string country_code = 3;
}

message SendContactListFriendInviteResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_OUTBOX_FULL = 3;
		ERROR_PLAYER_INBOX_FULL = 4;
		ERROR_SENDER_HAS_MAX_FRIENDS = 5;
		ERROR_RECEIVER_HAS_MAX_FRIENDS = 6;
		ERROR_ALREADY_A_FRIEND = 7;
		ERROR_INVITE_ALREADY_SENT = 8;
		ERROR_INVITE_ALREADY_RECEIVED = 9;
		ERROR_CANNOT_SEND_INVITES_TO_YOURSELF = 10;
		ERROR_CONTACT_NOT_FOUND = 11;
		ERROR_RECEIVER_NOT_FOUND = 12;
		ERROR_NO_SENDER_NAME = 13;
	}

	optional Result result = 1;
}

message SendFriendInviteOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_ALREADY_A_FRIEND = 3;
		ERROR_PLAYER_DOES_NOT_EXIST_DELETED = 4;
		ERROR_PLAYER_INBOX_FULL = 5;
		ERROR_PLAYER_OUTBOX_FULL = 6;
		ERROR_SENDER_HAS_MAX_FRIENDS = 7;
		ERROR_INVITE_ALREADY_SENT = 8;
		ERROR_CANNOT_SEND_INVITES_TO_YOURSELF = 9;
		ERROR_INVITE_ALREADY_RECEIVED = 10;
		ERROR_RECEIVER_HAS_MAX_FRIENDS = 11;
	}

	optional Result result = 1;
}

message SendFriendInviteProto {
	optional string player_id = 1;
	optional string friend_code = 2;
	optional bool read_only = 3;
	optional string nia_account_id = 4;
}

message SendFriendInviteViaReferralCodeOutProto {
	enum Status {
		UNSET = 0;
		SENT = 1;
		ERROR_UNKNOWN = 2;
		ERROR_DISABLED = 3;
		ERROR_INVALID_REFERRAL_CODE = 4;
	}

	optional Status status = 1;
	optional string message = 2;
}

message SendFriendInviteViaReferralCodeProto {
	optional string referral_code = 1;
	optional bool read_only = 2;
}

message SendGiftLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string friend_codename = 2;
}

message SendGiftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_DOES_NOT_EXIST = 3;
		ERROR_GIFT_DOES_NOT_EXIST = 4;
		ERROR_GIFT_ALREADY_SENT_TODAY = 5;
		ERROR_PLAYER_HAS_UNOPENED_GIFT = 6;
		ERROR_FRIEND_UPDATE = 7;
		ERROR_PLAYER_HAS_NO_STICKERS = 8;
	}

	optional Result result = 1;
	optional int32 awarded_xp = 2;
}

message SendGiftProto {
	optional uint64 giftbox_id = 1;
	optional string player_id = 2;
	repeated StickerSentProto stickers_sent = 3;
}

message SendProbeOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string id = 2;
	optional int64 server_timestamp_ms = 3;
}

message SendProbeProto {
}

message SendRaidInvitationDataProto {
	optional int32 ob_int32 = 1;
}

message SendRaidInvitationOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NO_PERMISSION = 2;
		ERROR_GYM_NOT_FOUND = 3;
		ERROR_LOBBY_NOT_FOUND = 4;
		ERROR_PAST_CUT_OFF_TIME = 5;
		ERROR_NO_INVITES_REMAINING = 6;
		ERROR_LOBBY_FULL = 7;
		ERROR_INVITER_NOT_FOUND = 8;
		ERROR_NO_REMOTE_SLOTS_REMAINING = 9;
	}

	optional Result result = 1;
	optional int32 num_friend_invites_remaining = 2;
}

message SendRaidInvitationProto {
	repeated string invitee_ids = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
	optional double gym_lat_degrees = 4;
	optional double gym_lng_degrees = 5;
}

message SendRaidInvitationResponseDataProto {
	optional SendRaidInvitationOutProto.Result result = 1;
	optional int32 ob_send_raid_invitation_data_int32 = 2;
	optional int32 ob_send_raid_invitation_data_int32_2 = 3;
	optional uint32 ob_send_raid_invitation_data_uint32 = 4;
}

message SendSmsVerificationCodeRequest {
	optional string phone_number = 1;
	optional string country_code = 2;
}

message SendSmsVerificationCodeResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_RATE_LIMITED = 3;
	}

	optional Status status = 1;
	optional string error_message = 2;
}

message ServerData {
	optional string user_id = 1;
	optional string telemetry_id = 2;
	optional string session_id = 3;
	optional string event_request_id = 4;
	optional int64 server_timestamp_ms = 5;
}

message ServerRecordMetadata {
	optional string user_id = 1;
	optional string telemetry_name = 2;
	optional string session_id = 3;
	optional string request_id = 4;
	optional int64 server_timestamp_ms = 5;
	optional string client_request_id = 6;
}

message SetAccountSettingsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INAPPROPRIATE_NAME = 3;
	}

	optional Result result = 1;
}

message SetAccountSettingsProto {
	optional AccountSettingsProto settings = 1;
}

message SetAvatarItemAsViewedOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Result result = 1;
}

message SetAvatarItemAsViewedProto {
	repeated string avatar_template_id = 1;
}

message SetAvatarOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		AVATAR_ALREADY_SET = 2;
		FAILURE = 3;
		SLOT_NOT_ALLOWED = 4;
		ITEM_NOT_OWNED = 5;
		INVALID_AVATAR_TYPE = 6;
		AVATAR_RESET = 7;
	}

	optional Status status = 1;
	optional ClientPlayerProto player = 2;
}

message SetAvatarProto {
	optional PlayerAvatarProto player_avatar_proto = 2;
}

message SetBuddyPokemonOutProto {
	enum Result {
		UNEST = 0;
		SUCCESS = 1;
		ERROR_POKEMON_DEPLOYED = 2;
		ERROR_POKEMON_NOT_OWNED = 3;
		ERROR_POKEMON_IS_EGG = 4;
		ERROR_INVALID_POKEMON = 5;
		ERROR_BUDDY_SWAP_LIMIT_EXCEEDED = 6;
	}

	optional Result result = 1;
	optional BuddyPokemonProto updated_buddy = 2;
	optional BuddyObservedData observed_data = 3;
	optional double km_remaining = 4;
}

message SetBuddyPokemonProto {
	optional fixed64 pokemon_id = 1;
}

message SetContactSettingsOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	optional ClientPlayerProto player = 2;
}

message SetContactSettingsProto {
	optional ContactSettingsProto contact_settings_proto = 1;
}

message SetFavoritePokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POKEMON_NOT_FOUND = 2;
		ERROR_POKEMON_IS_EGG = 3;
	}

	optional Result result = 1;
}

message SetFavoritePokemonProto {
	optional int64 pokemon_id = 1;
	optional bool is_favorite = 2;
}

message SetFriendNicknameOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_NOT_FRIENDS = 3;
		ERROR_EXCEEDED_NICKNAME_LENGTH = 4;
		ERROR_SOCIAL_UPDATE = 5;
		ERROR_FILTERED_NICKNAME = 6;
		ERROR_EXCEEDED_CHANGE_LIMIT = 7;
	}

	optional Result result = 1;
}

message SetFriendNicknameProto {
	optional string friend_id = 1;
	optional string friend_nickname = 2;
}

message SetInGameCurrencyExchangeRateOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
}

message SetInGameCurrencyExchangeRateProto {
	optional string in_game_currency = 1;
	optional string fiat_currency = 2;
	optional int64 fiat_currency_cost_e6_per_in_game_unit = 3;
}

message SetInGameCurrencyExchangeRateTrackingProto {
	optional string in_game_currency = 1;
	optional string fiat_currency = 2;
	optional int64 fiat_currency_cost_e6_per_in_game_unit = 3;
	optional string status = 4;
}

message SetLobbyPokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_LOBBY_NOT_FOUND = 2;
		ERROR_RAID_UNAVAILABLE = 3;
		ERROR_INVALID_POKEMON = 4;
	}

	optional Result result = 1;
	optional LobbyProto lobby = 2;
}

message SetLobbyPokemonProto {
	optional int64 raid_seed = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
	repeated fixed64 pokemon_id = 4;
}

message SetLobbyVisibilityOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_LOBBY_CREATOR = 2;
		ERROR_LOBBY_NOT_FOUND = 3;
		ERROR_RAID_UNAVAILABLE = 4;
	}

	optional Result result = 1;
	optional LobbyProto lobby = 2;
}

message SetLobbyVisibilityProto {
	optional int64 raid_seed = 1;
	optional string gym_id = 2;
	repeated int32 lobby_id = 3;
}

message SetPlayerTeamOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		TEAM_ALREADY_SET = 2;
		FAILURE = 3;
	}

	optional Status status = 1;
	optional ClientPlayerProto player = 2;
}

message SetPlayerTeamProto {
	optional Team team = 1;
}

message SetPokemonTagsForPokemonOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		ERROR_POKEMON_NOT_FOUND = 3;
		ERROR_TAG_INVALID = 4;
	}

	optional Status status = 2;
}

message SetPokemonTagsForPokemonProto {
	message PokemonTagChangeProto {
		optional int64 pokemon_id = 1;
		repeated uint64 tags_to_add = 2;
		repeated uint64 tags_to_remove = 3;
	}

	repeated PokemonTagChangeProto tag_changes = 1;
}

message SfidaAssociateRequest {
	optional bytes bt_address = 1;
	optional uint32 pairing_code = 2;
	optional bytes bt_signature = 3;
}

message SfidaAssociateResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
}

message SfidaAuthToken {
	optional bytes response_token = 1;
	optional string sfida_id = 2;
}

message SfidaCaptureRequest {
	optional string spawnpoint_id = 1;
	optional int64 encounter_id = 2;
	optional double player_lat = 3;
	optional double player_lng = 4;
	optional EncounterType encounter_type = 5;
	optional double gym_lat = 6;
	optional double gym_lng = 7;
}

message SfidaCaptureResponse {
	enum Result {
		UNSET = 0;
		POKEMON_CAPTURED = 1;
		POKEMON_FLED = 2;
		NOT_FOUND = 3;
		NO_MORE_POKEBALLS = 4;
		POKEMON_INVENTORY_FULL = 5;
		NOT_IN_RANGE = 6;
		ENCOUNTER_ALREADY_FINISHED = 7;
	}

	optional Result result = 1;
	optional int32 xp_gain = 2;
}

message SfidaCertificationRequest {
	enum SfidaCertificationStage {
		UNSET = 0;
		STAGE1 = 1;
		STAGE2 = 2;
		STAGE3 = 3;
	}

	optional SfidaCertificationStage stage = 1;
	optional bytes payload = 2;
}

message SfidaCertificationResponse {
	optional bytes payload = 1;
}

message SfidaCheckPairingRequest {
	optional bytes bt_address = 1;
	optional uint32 pairing_code = 2;
	optional bytes bt_signature = 3;
}

message SfidaCheckPairingResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PAIRING = 2;
		ERROR_UNKNOWN = 3;
	}

	optional Status status = 1;
}

message SfidaDisassociateRequest {
	optional string bt_address = 1;
}

message SfidaDisassociateResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
}

message SfidaDowserRequest {
	optional int64 encounter_id = 1;
}

message SfidaDowserResponse {
	enum Result {
		UNSET = 0;
		FOUND = 1;
		NEARBY = 2;
		OUT_OF_RANGE = 3;
		ALREADY_CAUGHT = 4;
		NOT_AVAILABLE = 5;
	}

	optional Result result = 1;
	optional int32 proximity = 2;
	optional string spawnpoint_id = 3;
}

message SfidaGlobalSettingsProto {
	optional float low_battery_threshold = 1;
	optional bool ob_bool = 2;
	optional int32 ob_int32 = 3;
}

message SfidaMetrics {
	option deprecated = true;
	optional double distance_walked_km = 1 [deprecated = true];
	optional int32 step_count = 2 [deprecated = true];
	optional double calories_burned = 3 [deprecated = true];
	optional int64 exercise_time_ms = 4 [deprecated = true];
}

message SfidaMetricsUpdate {
	option deprecated = true;
	enum UpdateType {
		UNSET = 0;
		INITIALIZATION = 1;
		ACCUMULATION = 2;
	}

	optional UpdateType update_type = 1 [deprecated = true];
	optional int64 timestamp_ms = 2 [deprecated = true];
	optional SfidaMetrics metrics = 3 [deprecated = true];
}

message SfidaUpdateRequest {
	optional double player_lat = 1;
	optional double player_lng = 2;
}

message SfidaUpdateResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Status status = 1;
	optional bool nearby_pokemon = 2;
	optional bool uncaught_pokemon = 3;
	optional bool legendary_pokemon = 4;
	optional string spawnpoint_id = 5;
	optional int64 encounter_id = 6;
	optional bool nearby_pokestop = 7;
	optional string pokestop_id = 8;
	optional EncounterType encounter_type = 9;
	optional int32 pokedex_number = 10;
	optional bool autospin = 12;
	optional bool autocatch = 13;
}

message ShadowAttributesProto {
	optional uint32 purification_stardust_needed = 1;
	optional uint32 purification_candy_needed = 2;
	optional HoloPokemonMove purified_charge_move = 3;
	optional HoloPokemonMove shadow_charge_move = 4;
}

message ShareExRaidPassLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string friend_codename = 2;
}

message ShareExRaidPassOutProto {
	optional ShareExRaidPassResult result = 1;
	optional FriendshipLevelDataProto updated_friendship_data = 2;
	optional PlayerPublicProfileProto friend_profile = 3;
}

message ShareExRaidPassProto {
	optional string friend_id = 1;
	optional string fort_id = 2;
	optional int64 raid_seed = 3;
}

message SharedExclusiveTicketTrainerInfo {
	optional string codename = 1;
	optional string player_id = 2;
}

message SharedMoveSettings {
	optional float sta_percent = 1;
	optional float atk_percent = 2;
	optional float def_percent = 3;
	optional float duration_s = 4;
}

message ShoppingPageClickTelemetry {
	optional ShoppingPageTelemetryIds shopping_page_click_id = 1;
	optional ShoppingPageTelemetrySource shopping_page_click_source = 2;
	optional string item_sku = 3;
	optional bool has_item = 4;
	optional string ml_bundle_tracking_id = 5;
}

message ShoppingPageScrollTelemetry {
	optional ShoppingPageScrollIds scroll_type = 1;
	optional int32 scroll_row = 2;
	optional int32 total_rows = 3;
}

message ShoppingPageTelemetry {
	optional ShoppingPageTelemetryIds shopping_page_click_id = 1;
}

message SkuPresentationProto {
	optional string key = 1;
	optional string value = 2;
}

message SkuStorePrice {
	optional string currency_code = 1;
	optional int64 price_paid_e6 = 2;
}

message SmeargleMovesSettingsProto {
	repeated HoloPokemonMove quick_moves = 1;
	repeated HoloPokemonMove cinematic_moves = 2;
}

message SocialClientFeatures {
	message CrossGameSocialClientSettingsProto {
		enum AppLinkType {
			NO_LINK = 0;
			WEB_LINK = 1;
			APP_STORE_LINK = 2;
		}

		enum FeatureType {
			UNSET = 0;
			NIANTIC_PROFILE = 1;
			ONLINE_STATUS = 2;
			CROSS_GAME_FRIEND_LIST = 3;
			GAME_INVITE_SENDER = 4;
			SHARED_FRIEND_GRAPH = 5;
			NICKNAME = 6;
			CROSS_GAME_ONLINE_STATUS = 7;
			GAME_INVITE_RECEIVER = 8;
			ADDRESS_BOOK_IMPORT = 9;
		}

		repeated FeatureType disabled_features = 1;
		optional AppLinkType app_link = 2;
	}

	optional CrossGameSocialClientSettingsProto cross_game_social_settings = 1;
}

message SocialClientGlobalSettings {
	message CrossGameSocialSettingsProto {
		optional bool niantic_profile_codename_opt_out_enabled = 1;
		repeated string disabled_outgoing_game_invite_app_key = 2;
		repeated string unreleased_app_key = 3;
		optional int32 contact_list_sync_page_size = 4;
		optional int64 contact_list_sync_interval_ms = 5;
		optional int32 max_friends = 6;
		optional int32 contact_list_concurrent_rpc_size = 7;
	}

	optional CrossGameSocialSettingsProto cross_game_social_settings = 1;
}

message SocialClientSettingsProto {
	optional bool enable_social = 1;
	optional int32 max_friend_details = 2;
	optional int32 player_level_gate = 3;
	optional int32 max_friend_nickname_length = 4;
	optional bool enable_add_friend_via_qr_code = 5;
	optional bool enable_share_ex_pass = 6;
	optional bool enable_facebook_friends = 7;
	optional int32 facebook_friend_limit_per_request = 8;
	optional bool disable_facebook_friends_opening_prompt = 9;
	optional bool enable_giftability_v2 = 11;
	optional bool enable_remote_gifting = 12;
	optional bool enable_sticker = 13;
	optional CrossGameSocialGlobalSettingsProto cross_game_social_settings = 14;
	optional bool ob_bool = 15;
}

message SocialGiftCountTelemetry {
	optional int32 unopened_gift_count = 1;
	optional int32 unsent_gift_count = 2;
}

message SocialInboxLatencyTelemetry {
	optional int32 latency_ms = 1;
	optional string category = 2;
}

message SocialPlayerSettingsProto {
	optional bool disable_last_pokemon_caught = 1;
}

message SocialProto {
	enum AppKey {
		INVALID = 0;
		INGRESS_DELETED = 1;
		HOLOHOLO_DELETED = 2;
		LEXICON_DELETED = 3;
	}

	optional AppKey app_key = 1;
}

message SocialSettings {
	enum ConsentStatus {
		UNKNOWN = 0;
		OPT_IN = 1;
		OPT_OUT = 2;
	}

	enum TutorialType {
		UNSET = 0;
		PROFILE = 1;
		CROSS_GAME_FRIEND_LIST = 2;
		ONLINE_STATUS_OVERVIEW = 3;
		ONLINE_STATUS_TOGGLE = 4;
		ADDRESS_BOOK_IMPORT = 5;
		ADDRESS_BOOK_DISCOVERABILITY = 6;
		ADDRESS_BOOK_PHONE_NUMBER_REGISTRATION = 7;
	}
}

message SocialTelemetry {
	optional SocialTelemetryIds social_click_id = 1;
	optional int32 pages_scrolled_in_friends_list = 2;
}

message SocialV2Enum {
	enum ContactMethod {
		CONTACT_METHOD_UNSET = 0;
		EMAIL = 1;
		SMS = 2;
	}

	enum InvitationStatus {
		INVITATION_STATUS_UNSET = 0;
		INVITED = 1;
	}

	enum OnlineStatus {
		STATUS_UNSET = 0;
		STATUS_UNKNOWN = 1;
		STATUS_ONLINE = 2;
		STATUS_OFFLINE = 3;
	}
}

message SouvenirProto {
	message SouvenirDetails {
		optional int64 time_picked_up = 1;
		optional double latitude = 3;
		optional double longitude = 4;
	}

	optional SouvenirTypeId souvenir_type_id = 1;
	repeated SouvenirDetails souvenirs_details = 2;
}

message SpawnTablePokemonProto {
	optional HoloPokemonId pokemon_id = 1;
	optional float weight = 2;
	optional PokemonDisplayProto.Form form = 3;
}

message SpinPokestopTelemetry {
	optional string result = 1;
	optional string fort_id = 2;
	optional int32 fort_type = 3;
	repeated PokestopReward pokestop_rewards = 4;
	optional int32 total_rewards = 5;
}

message SponsoredDetailsProto {
	enum PromoButtonMessageType {
		UNSET = 0;
		LEARN_MORE = 1;
		OFFER = 2;
	}

	repeated string promo_image_url = 1;
	repeated string promo_description = 2;
	optional string call_to_action_link = 3;
	optional PromoButtonMessageType promo_button_message_type = 4;
	optional string campaign_id = 5;
	optional ImageTextCreativeProto promo_image_creative = 6;
	repeated ImpressionTrackingTag impression_tracking_tag = 7;
}

message SponsoredGeofenceGiftSettingsProto {
	message SponsoredBalloonGiftSettingsProto {
		message SponsoredBalloonMovementSettingsProto {
			optional float wander_min_distance = 1;
			optional float wander_max_distance = 2;
			optional float wander_interval_min = 3;
			optional float wander_interval_max = 4;
			optional float max_speed = 5;
			optional float target_camera_distance = 6;
		}

		optional bool enable_balloon_gift = 1;
		optional int32 balloon_auto_dismiss_time_ms = 2;
		optional bool incident_balloon_prevents_sponsored_balloon = 3;
		optional bool incident_balloon_dismisses_sponsored_balloon = 4;
		optional int32 get_wasabi_ad_rpc_interval_ms = 5;
		optional SponsoredBalloonMovementSettingsProto balloon_movement_settings = 6;
		optional bool ob_bool = 7;
	}

	message SponsoredGeofenceGiftDetailsProto {
		optional string ads_logo = 1;
		optional string partner_name = 2;
		optional string full_screen_static_image = 3;
		optional string title = 4;
		optional string description = 5;
		optional string cta_url = 6;
		optional string campaign_identifier = 7;
	}

	optional bool gift_persistence_enabled = 1;
	optional int32 gift_persistence_time_ms = 2;
	optional int32 map_presentation_time_ms = 3;
	optional bool enable_sponsored_geofence_gift = 4;
	optional bool enable_dark_launch = 5;
	optional bool enable_poi_gift = 6;
	optional bool enable_raid_gift = 7;
	optional bool enable_incident_gift = 8;
	optional int32 fullscreen_disable_exit_button_time_ms = 9;
	optional SponsoredBalloonGiftSettingsProto balloon_gift_settings = 10;
	optional bool ob_bool = 11;
	optional ObSponsoredBalloon ob_sponsored_balloon = 12;
	optional SponsoredGeofenceGiftDetailsProto sponsored_geofence_gift_details = 13;
	optional int32 ob_int32_1 = 14;
	optional int32 ob_int32_2 = 15;
}

message SponsoredPoiFeedbackSettingsProto {
	optional bool enabled = 1;
	optional bool enable_report_ad = 2;
	optional bool enable_not_interested = 3;
	optional bool enable_see_more = 4;
}

message StardustBoostAttributesProto {
	optional float stardust_multiplier = 1;
	optional int32 boost_duration_ms = 2;
}

message StartGymBattleOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_GYM_NOT_FOUND = 2;
		ERROR_GYM_NEUTRAL = 3;
		ERROR_GYM_WRONG_TEAM = 4;
		ERROR_GYM_EMPTY = 5;
		ERROR_INVALID_DEFENDER = 6;
		ERROR_TRAINING_INVALID_ATTACKER_COUNT = 7;
		ERROR_ALL_POKEMON_FAINTED = 8;
		ERROR_TOO_MANY_BATTLES = 9;
		ERROR_TOO_MANY_PLAYERS = 10;
		ERROR_GYM_BATTLE_LOCKOUT = 11;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 12;
		ERROR_NOT_IN_RANGE = 13;
		ERROR_POI_INACCESSIBLE = 14;
	}

	optional Result result = 1;
	optional int64 battle_start_ms = 2;
	optional int64 battle_end_ms = 3;
	optional string battle_id = 4;
	optional BattleParticipantProto defender = 5;
	optional BattleLogProto battle_log = 6;
	optional BattleParticipantProto attacker = 7;
	optional BattleProto battle = 8;
}

message StartGymBattleProto {
	optional string gym_id = 1;
	repeated fixed64 attacking_pokemon_id = 2;
	optional fixed64 defending_pokemon_id = 3;
	optional double player_lat_degrees = 4;
	optional double player_lng_degrees = 5;
}

message StartIncidentOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NOT_IN_RANGE = 2;
		ERROR_INCIDENT_COMPLETED = 3;
		ERROR_INCIDENT_NOT_FOUND = 4;
		ERROR_PLAYER_BELOW_MIN_LEVEL = 5;
		ERROR = 6;
	}

	optional Status status = 1;
	optional ClientIncidentProto incident = 2;
}

message StartIncidentProto {
	optional IncidentLookupProto incident_lookup = 1;
}

message StartRaidBattleDataProto {
	repeated uint64 ob_start_raid_battle_data_uint64 = 1;
	optional int32 ob_start_raid_battle_data_int32 = 2;
}

message StartRaidBattleOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_GYM_NOT_FOUND = 2;
		ERROR_RAID_UNAVAILABLE = 3;
		ERROR_RAID_COMPLETED = 4;
		ERROR_INVALID_ATTACKERS = 5;
		ERROR_PLAYER_BELOW_MINIMUM_LEVEL = 6;
		ERROR_NOT_IN_RANGE = 7;
		ERROR_POI_INACCESSIBLE = 8;
		ERROR_LOBBY_NOT_FOUND = 9;
		ERROR_NO_TICKET = 10;
		ERROR_INVALID_SERVER = 11;
		ERROR_NEVER_JOINED_BATTLE = 12;
	}

	optional Result result = 1;
	optional BattleProto battle = 2;
}

message StartRaidBattleProto {
	optional string gym_id = 1;
	optional int64 raid_seed = 2;
	repeated int32 lobby_id = 4;
	repeated fixed64 attacking_pokemon_id = 5;
	optional double player_lat_degrees = 6;
	optional double player_lng_degrees = 7;
	optional double gym_lat_degrees = 8;
	optional double gym_lng_degrees = 9;
}

message StartRaidBattleResponseDataProto {
	optional StartRaidBattleOutProto.Result result = 1;
	optional int32 ob_int32 = 2;
	optional uint32 ob_uint32 = 3;
	optional FriendshipLevelMilestone friendship_level_milestone = 8;
}

message StartRocketBalloonIncidentProto {
	optional IncidentLookupProto incident_lookup = 1;
}

message StartRouteOutProto {
	optional RoutePlayStatus.Status status = 1;
	optional RoutePlayProto route_play = 2;
}

message StartRouteProto {
	optional string route_id = 1;
	optional string entry_fort_id = 2;
}

message StartTutorialOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_ALREADY_STARTED_TUTORIAL = 2;
		ERROR_FAILED_TO_START = 3;
	}

	optional Result result = 1;
}

message StartTutorialProto {
	optional bool onboarding_v2_enabled = 1;
}

message StickerMetadataProto {
	optional string sticker_id = 1;
	optional string sticker_url = 2;
	optional int32 max_count = 3;
	optional HoloPokemonId pokemon_id = 4;
}

message StickerProto {
	optional string sticker_id = 1;
	optional int32 count = 2;
	optional int32 used = 3;
}

message StickerRewardProto {
	optional string sticker_id = 1;
	optional int32 amount = 2;
}

message StickerSentProto {
	optional string sticker_id = 1;
}

message StoreIapSettingsProto {
	optional Store for_store = 1;
	optional IapLibraryVersion library_version = 2;
}

message SubmitCombatActionProto {
	optional ObCommunCombatDataProto ob_commun_combat_data = 1;
}

message SubmitCombatChallengePokemonsDataProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_list_int32 = 2;
	optional uint32 ob_uint32 = 3;
}

message SubmitCombatChallengePokemonsOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_CHALLENGE_STATE = 2;
		ERROR_CHALLENGE_NOT_FOUND = 3;
		ERROR_POKEMON_NOT_IN_INVENTORY = 4;
		ERROR_NOT_ELIGIBLE_LEAGUE = 5;
		ERROR_ALREADY_TIMEDOUT = 6;
		ERROR_ALREADY_CANCELLED = 7;
		ERROR_ACCESS_DENIED = 8;
		ERROR_ALREADY_DECLINED = 9;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
}

message SubmitCombatChallengePokemonsProto {
	optional string challenge_id = 1;
	repeated fixed64 attacking_pokemon_id = 2;
	optional int64 lobby_join_time_ms = 3;
}

message SubmitCombatChallengePokemonsResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional SubmitCombatChallengePokemonsOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message SubmitNewPoiOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		FAILURE = 2;
		INTERNAL_ERROR = 3;
		TOO_MANY_RECENT_SUBMISSIONS = 4;
		INVALID_INPUT = 5;
		MINOR = 6;
		NOT_AVAILABLE = 7;
	}

	optional Status status = 1;
	optional string submission_id = 2;
	repeated string messages = 3;
}

message SubmitNewPoiProto {
	optional string title = 1;
	optional string long_description = 2;
	optional int32 lat_e6 = 3;
	optional int32 lng_e6 = 4;
	optional string supporting_statement = 5;
	optional bool async_file_upload = 6;
	repeated string player_submitted_category_ids = 7;
	optional string category_suggestion = 8;
}

message SubmitPlayerImageVoteForPoiOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		POI_NOT_FOUND = 2;
		POI_IMAGE_NOT_FOUND = 3;
		INVALID_REQUEST = 6;
	}

	optional Status status = 1;
}

message SubmitPlayerImageVoteForPoiProto {
	repeated string image_ids_to_vote_for = 1;
	repeated string image_ids_to_unvote = 2;
	optional string poi_id = 3;
}

message SubmitPoiCategoryVoteRecordProto {
	optional string poi_id = 1;
	repeated string player_submitted_category_ids = 2;
	optional string category_suggestion = 3;
}

message SubmitPoiImageProto {
	optional string poi_id = 1;
	optional bool async_file_upload = 2;
}

message SubmitPoiLocationUpdateProto {
	optional string poi_id = 1;
	optional LocationE6Proto location = 2;
}

message SubmitPoiTakedownRequestProto {
	optional string poi_id = 1;
	optional PoiInvalidReason invalid_reason = 2;
}

message SubmitPoiTextMetadataUpdateProto {
	optional string poi_id = 1;
	optional string title = 2;
	optional string description = 3;
}

message SubmitRouteDraftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVALID_ROUTE = 3;
		ERROR_OLD_VERSION = 4;
		ERROR_ROUTE_STATE_NOT_IN_PROGRESS = 5;
		ERROR_TOO_MANY_RECENT_SUBMISSIONS = 6;
		ERROR_ROUTE_SUBMISSION_UNAVAILABLE = 7;
		ERROR_UNVISITED_FORT = 8;
		ERROR_MATCHES_REJECTION = 9;
	}

	optional Result result = 1;
	optional RouteCreationProto submitted_route = 2;
	optional RouteValidation validation_result = 3;
}

message SubmitRouteDraftProto {
	enum ApprovalOverride {
		UNSET = 0;
		APPROVE = 1;
		REJECT = 2;
	}

	optional int64 route_id = 1;
	optional int64 route_version = 2;
	optional ApprovalOverride approval_override = 3;
}

message SubmitSponsorPoiLocationUpdateProto {
	optional string poi_id = 1;
	optional LocationE6Proto location = 2;
}

message SubmitSponsorPoiReportProto {
	optional string poi_id = 1;
	optional SponsorPoiInvalidReason invalid_reason = 2;
	optional string additional_details = 3;
}

message SuperAwesomeTokenProto {
	optional string token = 1;
}

message SurveySettings {
	optional bool ob_survey_settings_bool = 1;
	optional int32 ob_survey_settings_int32 = 2;
}

message SyncContactListRequest {
	message ContactProto {
		optional string contact_id = 1;
		repeated string email = 2;
		repeated string phone_number = 3;
	}

	repeated ContactProto contact = 1;
	optional string country_code = 2;
}

message SyncContactListResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
		ERROR_EXCEEDS_MAX_CONTACTS_PER_QUERY = 4;
	}

	message ContactPlayerProto {
		enum ContactStatus {
			UNSET = 0;
			INVITED = 1;
			REMOVED = 2;
		}

		message PlayerProto {
			optional bool is_calling_game_player = 1;
			optional bool is_newly_signed_up_player = 2;
			optional bool is_self = 3;
			optional bool is_friend = 4;
		}

		optional string contact_id = 1;
		repeated PlayerProto player = 2;
		optional ContactStatus status = 3;
	}

	optional Result result = 1;
	repeated ContactPlayerProto contact_player = 2;
}

message TakeSnapshotQuestProto {
	repeated HoloPokemonId unique_pokemon_id = 1;
}

message TappableSettingsProto {
	optional float visible_radius_meters = 1;
	optional float spawn_angle_degrees = 2;
	optional float movement_respawn_threshold_meters = 3;
	optional float buddy_fov_degrees = 4;
	optional float buddy_collect_probability = 5;
	optional bool disable_player_collection = 6;
	optional float avg_tappables_in_view = 7;
}

message TeamChangeInfoProto {
	optional int64 last_acquired_time = 1;
	optional int32 num_items_acquired = 2;
}

message TelemetryCommon {
	optional int64 timestamp = 1;
	optional string correlation_vector = 2;
	optional string event_id = 3;
	optional int64 client_timestamp_ms = 4;
}

message TelemetryGlobalSettingsProto {
	optional bool enabled = 1;
	optional double session_sampling_fraction = 2;
	optional int32 max_buffer_size_kb = 3;
	optional int32 batch_size = 4;
	optional int64 update_interval_ms = 5;
	optional int64 frame_rate_sample_interval_ms = 6;
	optional int64 frame_rate_sample_period_ms = 7;
	optional bool enable_omni_wrapper_sending = 8;
	optional float ob_float = 9;
	optional bool ob_bool = 10;
	repeated string ob_list_string = 11;
}

message TempEvoOverrideProto {
	optional HoloTemporaryEvolutionId temp_evo_id = 1;
	optional PokemonStatsAttributesProto stats = 2;
	optional float average_height_m = 3;
	optional float average_weight_kg = 4;
	optional HoloPokemonType type_override = 5;
	optional HoloPokemonType type_override_2 = 6;
	optional float cp_multiplier_override = 7;
	optional PokemonCameraAttributesProto camera = 8;
	optional PokemonEncounterAttributesProto encounter = 9;
	optional float model_scale_v2 = 10;
	optional float model_height = 11;
	repeated float buddy_offset_male = 12;
	repeated float buddy_offset_female = 13;
	repeated float buddy_portrait_offset = 14;
	optional float raid_boss_distance_offset = 15;
	optional ObPokemonSetting ob_pokemon_setting = 16;
}

message TemplateVariable {
	optional string name = 1;
	optional string literal = 2;
	optional string key = 3;
	optional string lookup_table = 4;
	optional bytes byte_value = 5;
}

message TemporaryEvolutionProto {
	optional HoloTemporaryEvolutionId temporary_evolution_id = 1;
	optional int32 asset_bundle_value = 2;
	optional string asset_bundle_suffix = 3;
}

message TemporaryEvolutionResourceProto {
	optional HoloTemporaryEvolutionId temporary_evolution_id = 1;
	optional int32 energy_count = 2;
	optional int32 max_energy_count = 3;
}

message TemporaryEvolutionSettingsProto {
	optional HoloPokemonId pokemon_id = 1;
	repeated TemporaryEvolutionProto temporary_evolutions = 2;
}

message ThirdMoveGlobalSettingsProto {
	optional bool unlock_enabled = 1;
}

message TicketGiftingSettingsProto {
	optional int32 min_player_level = 1;
	optional int32 max_number_of_gifts_per_day = 2;
	optional string friend_ship_level = 3;
}

message TiledBlob {
	optional int32 format_version = 1;
	optional int32 zoom = 2;
	optional int32 x = 3;
	optional int32 y = 4;
	optional int32 epoch = 5;
	optional bytes encoded_data = 6;
}

message TimedGroupChallengeDefinitionProto {
	optional string challenge_id = 1;
	optional GroupChallengeDisplayProto display = 2;
	optional int64 start_time_ms_inclusive = 3;
	optional int64 end_time_ms_exclusive = 4;
	optional GroupChallengeCriteriaProto challenge_criteria = 5;
}

message TimedGroupChallengePlayerStatsProto {
	message IndividualChallengeStats {
		optional string challenge_id = 1;
		optional int32 player_score = 2;
	}

	repeated IndividualChallengeStats challenges = 1;
}

message TimedGroupChallengeSectionProto {
	optional string challenge_id = 1;
	optional string header_image_url = 2;
}

message TimedGroupChallengeSettingsProto {
	optional int32 widget_auto_update_period_ms = 1;
	optional int64 friend_leaderboard_background_update_period_ms = 2;
	optional int32 friend_leaderboard_friends_per_rpc = 3;
	optional int32 refresh_offline_friends_modulus = 4;
	optional int32 refresh_non_event_friends_modulus = 5;
}

message TimedQuestSectionProto {
	optional string quest_id = 1;
}

message TodayViewProto {
	repeated TodayViewSectionProto sections = 1;
}

message TodayViewSectionProto {
	optional PokecoinSectionProto pokecoin = 1;
	optional GymPokemonSectionProto gym_pokemon = 2;
	optional DailyStreaksProto streaks = 3;
	optional EventSectionProto event = 4;
	optional UpNextSectionProto up_next = 5;
	optional TimedQuestSectionProto timed_quest = 6;
	optional EventBannerSectionProto event_banner = 7;
	optional TimedGroupChallengeSectionProto timed_group_challenge = 8;
	optional MiniCollectionSectionProto mini_collection = 9;
}

message TopicProto {
	optional string topic_id = 1;
	optional string namespace = 2;
}

message TradePokemonQuestProto {
	repeated string friend_id = 1;
}

message TradingGlobalSettingsProto {
	optional bool enable_trading = 1;
	optional uint32 min_player_level = 2;
}

message TradingLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional string friend_codename = 2;
	optional PokemonProto trade_out_pokemon = 3;
	optional PokemonProto trade_in_pokemon = 4;
	optional LootProto rewards = 5;
	optional LootProto price = 6;
}

message TradingProto {
	enum TradingState {
		UNSET_TRADINGSTATE = 0;
		PRIMORDIAL = 1;
		WAIT = 2;
		ACTIVE = 3;
		CONFIRMED = 4;
		FINISHED = 5;
	}

	message TradingPlayerProto {
		message ExcludedPokemon {
			enum ExclusionReason {
				UNSET_EXCLUSIONREASON = 0;
				MYTHICAL_POKEMON = 1;
				SLASHED = 2;
				GYM_DEPLOYED = 3;
				BUDDY = 4;
				STAMINA_NOT_FULL = 5;
				EGG_NOT_HATCHED = 6;
				FRIENDSHIP_LEVEL_LOW = 7;
				FRIEND_CANNOT_AFFORD = 8;
				FRIEND_REACHED_DAILY_LIMIT = 9;
				ALREADY_TRADED = 10;
				PLAYER_CANNOT_AFFORD = 11;
				PLAYER_REACHED_DAILY_LIMIT = 12;
				FAVORITE = 13;
				TEMP_EVOLVED = 14;
			}

			optional fixed64 pokemon_id = 1;
			optional ExclusionReason exclusion_reason = 2;
		}

		optional string player_id = 1;
		optional PlayerPublicProfileProto public_profile = 2;
		repeated ExcludedPokemon excluded_pokemon = 3;
		optional TradingPokemonProto trading_pokemon = 4;
		optional LootProto bonus = 5;
		optional LootProto price = 6;
		optional bool can_afford_trading = 7;
		optional bool has_confirmed = 8;
	}

	message TradingPokemonProto {
		optional fixed64 pokemon_id = 1;
		optional int32 pokedex_entry_number = 2;
		optional int32 original_cp = 3;
		optional int32 adjusted_cp_min = 4;
		optional int32 adjusted_cp_max = 5;
		optional int32 original_stamina = 6;
		optional int32 adjusted_stamina_min = 7;
		optional int32 adjusted_stamina_max = 8;
		optional bool friend_level_cap = 9;
		optional HoloPokemonMove move1 = 10;
		optional HoloPokemonMove move2 = 11;
		optional PokemonDisplayProto pokemon_display = 12;
		optional int64 captured_s2_cell_id = 13;
		optional PokemonProto traded_pokemon = 14;
		optional Item pokeball = 15;
		optional int32 individual_attack = 16;
		optional int32 individual_defense = 17;
		optional int32 individual_stamina = 18;
		optional string nickname = 19;
		optional bool favorite = 20;
		optional HoloPokemonMove move3 = 21;
		optional int64 creation_time_ms = 22;
	}

	optional TradingState state = 1;
	optional uint64 expiration_ms = 2;
	optional TradingPlayerProto player = 3;
	optional TradingPlayerProto friend = 4;
	optional int64 trading_s2_cell_id = 5;
	optional string transaction_log = 6;
	optional FriendshipLevelDataProto friendship_level_data = 7;
	optional bool is_special_trading = 8;
	optional FriendshipLevelDataProto pre_trading_friendship_level = 9;
}

message TransferPokemonToPokemonHomeOutProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		ERROR_NO_NAID_LINKED = 3;
		ERROR_TOO_MANY_POKEMON = 4;
		ERROR_SERVER_CLIENT_ENERGY_COST_MISMATCH = 5;
		ERROR_INSUFFICIENT_ENERGY = 6;
		ERROR_TRANSFER_IN_PROGRESS = 7;
		ERROR_POKEMON_DEPLOYED = 10;
		ERROR_POKEMON_IS_EGG = 11;
		ERROR_POKEMON_IS_BUDDY = 12;
		ERROR_POKEMON_BAD = 13;
		ERROR_POKEMON_IS_MEGA = 14;
		ERROR_POKEMON_FAVORITED = 15;
		ERROR_POKEMON_NOT_FOUND = 16;
		ERROR_VALIDATION_UNKNOWN = 17;
		ERROR_POKEMON_HAS_COSTUME = 21;
		ERROR_POKEMON_IS_SHADOW = 22;
		ERROR_POKEMON_DISALLOWED = 23;
		ERROR_PHAPI_REQUEST_BODY_FALSE = 30;
		ERROR_PHAPI_REQUEST_PARAMETERS_DNE = 31;
		ERROR_PHAPI_REQUEST_PARAMETERS_FALSE = 32;
		ERROR_PHAPI_MAINTENANCE = 33;
		ERROR_PHAPI_SERVICE_ENDED = 34;
		ERROR_PHAPI_UNKNOWN = 35;
		ERROR_PHAPI_NAID_DOES_NOT_EXIST = 36;
		ERROR_PHAPI_NO_SPACE_IN_BOX = 37;
		ERROR_PHAPI_DATA_CONVERSION_FAILURE = 38;
		ERROR_PHAPI_WAITING_FOR_RECEIPT = 39;
		ERROR_PHAPI_PLAYER_NOT_USING_PH_APP = 40;
	}

	optional Status status = 1;
	optional int32 candy_awarded = 2;
	optional int32 xl_candy_awarded = 3;
	optional XlCandyAwArdedPerId xl_candy_awarded_per_id = 4;

	message XlCandyAwArdedPerId {
		optional int32 key = 1;
		optional int32 value = 2;
	}
}

message TransferPokemonToPokemonHomeProto {
	optional int32 total_energy_cost = 1;
	repeated uint64 pokemon_uuid = 2;
}

message TransitMetadata {
	optional string route = 1;
	optional string agency = 2;
	optional string color_name = 3;
}

message TranslationSettingsProto {
	repeated string translation_bundle_ids = 1;
}

message TriangleList {
	repeated uint32 coords = 1;
	optional bytes exterior_edges = 2;
}

message TutorialCompletRewards {
	optional TutorialCompletion tutorial_completation = 1;
	repeated ItemProto item_reward = 2;
}

message TutorialCreateDetail {
	optional bool caught_in_wild = 1;
}

message TutorialTelemetry {
	enum TutorialTelemetryId {
		UNDEFINED = 0;
		TAG_LEARN_MORE_BUTTON_CLICKED = 1;
		TAG_POPUP_TUTORIAL_SHOWN = 2;
		FRIEND_LIST_LEARN_MORE_BUTTON_CLICKED = 3;
		FRIEND_DETAIL_HELP_BUTTON_CLICKED = 4;
		TASK_TUTORIAL_CURVE_BALL_VIEWED = 5;
		TASK_TUTORIAL_THROW_TYPE_VIEWED = 6;
		TASK_TUTORIAL_GIFT_VIEWED = 7;
		TASK_TUTORIAL_TRADING_VIEWED = 8;
		TASK_TUTORIAL_SNAPSHOT_WILD_VIEWED = 9;
		TASK_TUTORIAL_SNAPSHOT_INVENTORY_VIEWED = 10;
		TASK_TUTORIAL_SNAPSHOT_BUDDY_VIEWED = 11;
		GIFT_TUTORIAL_INTRODUCTION_SHOWN = 12;
		PLAYER_VIEWED_GIFT_TUTORIAL = 13;
		PLAYER_SKIPPED_GIFT_TUTORIAL = 14;
		PLAYER_COMPLETED_GIFT_TUTORIAL = 15;
		LURE_TUTORIAL_INTRODUCTION_SHOWN = 16;
		PLAYER_VIEWED_LURE_TUTORIAL = 17;
		PLAYER_SKIPPED_LURE_TUTORIAL = 18;
		PLAYER_COMPLETED_LURE_TUTORIAL = 19;
		GYM_TUTORIAL_BUTTON_CLICKED = 20;
		RAID_TUTORIAL_BUTTON_CLICKED = 21;
		POTION_AND_REVIVE_TUTORIAL_INTRODUCTION_SHOWN = 22;
		PLAYER_COMPLETED_REVIVE_TUTORIAL = 23;
		PLAYER_COMPLETED_POTION_TUTORIAL = 24;
		BERRY_CATCH_TUTORIAL_SHOWN = 25;
		TRADE_TUTORIAL_INTRODUCTION_SHOWN = 26;
		PLAYER_VIEWED_TRADING_TUTORIAL = 27;
		PLAYER_SKIPPED_TRADING_TUTORIAL = 28;
		PLAYER_COMPLETED_TRADING_TUTORIAL = 29;
		LUCKY_TRADE_TUTORIAL_SHOWN = 30;
		LUCKY_FRIENDS_UNLOCKED_TUTORIAL_SHOWN = 31;
		LUCKY_FRIENDS_TUTORIAL_BUTTON_CLICKED = 32;
	}

	optional TutorialTelemetryId telemetry_id = 1;
}

message TutorialsSettings {
	optional bool tutorial_settings_bool_1 = 1;
	optional bool tutorial_settings_bool_2 = 2;
	optional bool tutorial_settings_bool_3 = 3;
	optional bool tutorial_settings_bool_4 = 4;
	optional bool tutorial_settings_bool_5 = 5;
	optional bool tutorial_settings_bool_6 = 6;
	optional bool tutorial_settings_bool_7 = 7;
	optional bool tutorial_settings_bool_8 = 8;
	optional bool tutorial_settings_bool_9 = 9;
	optional bool tutorial_settings_bool_10 = 10;
	optional bool tutorial_settings_bool_11 = 11;
	repeated TutorialCompletRewards tutorial_complete_reward = 12;
}

message TwoWaySharedFriendshipDataProto {
	message SharedMigrations {
		optional bool is_gifting_migrated = 1;
		optional bool is_lucky_data_migrated = 2;
	}

	optional bool is_lucky = 1;
	optional int32 lucky_count = 2;
	optional SharedMigrations shared_migrations = 3;
}

message TypeEffectiveSettingsProto {
	repeated float attack_scalar = 1;
	optional HoloPokemonType attack_type = 2;
}

message UncommentAnnotationTestProto {
	optional string string_property = 1;
	optional int64 long_property = 2;
}

message UnlinkNintendoAccountOutProto {
	enum Status {
		UNKNOWN = 0;
		SUCCESS = 1;
		ERROR_PLAYER_LEVEL_TOO_LOW = 2;
		ERROR_NO_LINKED_NAID = 3;
		ERROR_TRANSFER_IN_PROGRESS = 4;
	}

	optional Status status = 1;
}

message UnlinkNintendoAccountProto {
}

message UnlockPokemonMoveOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POKEMON_NOT_FOUND = 2;
		ERROR_UNLOCK_NOT_AVAILABLE = 3;
		ERROR_ALREADY_UNLOCKED = 4;
		ERROR_INSUFFICIENT_RESOURCES = 5;
		ERROR_DISABLED = 6;
	}

	optional Result result = 1;
	optional PokemonProto unlocked_pokemon = 2;
}

message UnlockPokemonMoveProto {
	optional fixed64 pokemon_id = 1;
}

message UpNextSectionProto {
	repeated string event_id = 1;
}

message UpdateAdventureSyncFitnessRequestProto {
	option deprecated = true;
	repeated FitnessSample fitness_samples = 1;
}

message UpdateAdventureSyncFitnessResponseProto {
	option deprecated = true;
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
	}

	optional Status status = 1;
}

message UpdateAdventureSyncSettingsRequestProto {
	optional AdventureSyncSettingsProto adventure_sync_settings = 1;
}

message UpdateAdventureSyncSettingsResponseProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
	}

	optional Status status = 1;
}

message UpdateBreadcrumbHistoryRequestProto {
	optional string session_context = 1;
	repeated BreadcrumbRecordProto breadcrumb_history = 2;
	optional bool initial_update = 3;
}

message UpdateBreadcrumbHistoryResponseProto {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
	}

	optional Status status = 1;
}

message UpdateCombatDataProto {
	optional int32 ob_int32 = 1;
	optional ObCommunCombatDataProto ob_commun_combat_data = 2;
	optional int32 ob_int32_2 = 3;
}

message UpdateCombatOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_COMBAT_STATE = 2;
		ERROR_COMBAT_NOT_FOUND = 3;
		ERROR_PLAYER_NOT_IN_COMBAT = 4;
		ERROR_ILLEGAL_ACTION = 5;
		ERROR_INVALID_SUBMIT_TIME = 6;
		ERROR_PLAYER_IN_MINIGAME = 7;
		ERROR_EXISTING_QUEUED_ATTACK = 8;
		ERROR_INVALID_CHANGE_POKEMON = 9;
		ERROR_INSUFFICIENT_ENERGY = 10;
		ERROR_INVALID_MOVE = 11;
		ERROR_INVALID_DURATION_TURNS = 12;
		ERROR_INVALID_MINIGAME_STATE = 13;
		ERROR_INVALID_QUICK_SWAP_POKEMON = 14;
		ERROR_QUICK_SWAP_NOT_AVAILABLE = 15;
		ERROR_INVALID_SUBMIT_TIME_BEFORE_LAST_UPDATED_TURN = 16;
		ERROR_INVALID_SUBMIT_TIME_DURING_STATE_CHANGE = 17;
		ERROR_INVALID_SUBMIT_TIME_OPPONENT_CHARGE_MOVE = 18;
		ERROR_INVALID_SUBMIT_TIME_CMP_TIE_SWAP = 19;
		ERROR_INVALID_MINIGAME_STATE_OFFENSIVE_FINISH = 20;
		ERROR_INVALID_MINIGAME_STATE_DEFENSIVE_START = 21;
		ERROR_INVALID_MINIGAME_STATE_DEFENSIVE_FINISH = 22;
	}

	optional Result result = 1;
	optional CombatProto combat = 2;
}

message UpdateCombatProto {
	optional string combat_id = 1;
	optional CombatActionProto action = 2;
	optional string debug_log = 3;
}

message UpdateCombatResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional UpdateCombatOutProto.Result result = 3;
	optional ObCommunWebCombatStateProto ob_commun_web_combat_state = 4;
}

message UpdateCombatResponseTimeTelemetry {
	optional float window_duration = 1;
	optional int32 count_call = 2;
	optional float average_response_time = 3;
	optional int32 timeout_count = 4;
	optional CombatType combat_type = 5;
	optional string realm = 6;
}

message UpdateFacebookStatusOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_PLAYER_NOT_FOUND = 3;
		ERROR_FACEBOOK_API = 4;
		ERROR_ALREADY_EXISTS = 5;
	}

	optional Result result = 1;
}

message UpdateFacebookStatusProto {
	optional string fb_access_token = 1;
	optional bool force_update = 2;
}

message UpdateFriendshipRequest {
	message FriendProfileProto {
		optional string nickname = 1;
	}

	optional string friend_id = 1;
	optional string friend_nia_account_id = 2;
	optional FriendProfileProto friend_profile = 3;
}

message UpdateFriendshipResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_NOT_FRIEND = 3;
		ERROR_NICKNAME_WRONG_FORMAT = 4;
		ERROR_FILTERED_NICKNAME = 5;
		ERROR_EXCEEDED_CHANGE_LIMIT = 6;
	}

	optional Result result = 1;
}

message UpdateIncomingGameInviteRequest {
	enum NewStatus {
		UNSET = 0;
		SEEN = 1;
		READ = 2;
	}

	optional string app_key = 1;
	optional NewStatus new_status = 2;
}

message UpdateIncomingGameInviteResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
}

message UpdateInvasionBattleOutProto {
	optional InvasionStatus.Status status = 1;
	optional LootProto rewards = 2;
	optional bool map_fragment_upgraded = 3;
}

message UpdateInvasionBattleProto {
	enum UpdateType {
		POKEMON_HEALTH = 0;
		WIN_BATTLE = 1;
		LOSE_BATTLE = 2;
	}

	optional IncidentLookupProto incident_lookup = 1;
	optional int32 step = 2;
	repeated PokemonStaminaUpdateProto health_update = 3;
	optional bool complete_battle = 4;
	optional UpdateType update_type = 5;
	optional int64 lobby_join_time_ms = 6;
	optional CombatQuestUpdateProto combat_quest_update = 7;
}

message UpdateNotificationOutProto {
}

message UpdateNotificationProto {
}

message UpdatePhoneNumberRequest {
	optional string phone_number = 1;
	optional string verification_code = 2;
	optional string country_code = 3;
	optional string contact_id = 4;
}

message UpdatePhoneNumberResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_WRONG_VERIFICATION_CODE = 2;
		ERROR_UNKNOWN = 3;
		ERROR_CONTACT_NOT_FOUND = 4;
		ERROR_RATE_LIMITED = 5;
	}

	optional Status status = 1;
	optional string error_message = 2;
}

message UpdatePostcardOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POSTCARD_DOES_NOT_EXIST = 2;
		ERROR_NOT_ENABLED = 4;
		ERROR_RATE_LIMITED = 5;
	}

	optional Result result = 1;
	optional PostcardDisplayProto postcard = 2;
}

message UpdatePostcardProto {
	optional string postcard_id = 1;
	optional bool favorite = 2;
}

message UpdateProfileRequest {
	message ProfileProto {
		optional string profile_name_app_key = 1;
	}

	optional ProfileProto profile = 1;
}

message UpdateProfileResponse {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_EMPTY_PROFILE_NAME = 3;
	}

	optional Result result = 1;
}

message UpdateRouteDraftOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_INVALID_ROUTE = 3;
		ERROR_OLD_VERSION = 4;
		ERROR_ROUTE_NOT_EDITABLE = 5;
	}

	optional Result result = 1;
	optional RouteCreationProto updated_route = 2;
	optional RouteValidation validation_result = 3;
}

message UpdateRouteDraftProto {
	optional int64 route_id = 1;
	optional int64 route_version = 2;
	optional RouteDraftProto proposed_route_draft = 3;
}

message UpdateTradingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_UNKNOWN = 2;
		ERROR_FRIEND_NOT_FOUND = 3;
		ERROR_INVALID_PLAYER_ID = 4;
		ERROR_INVALID_STATE = 5;
		ERROR_STATE_HANDLER = 6;
		ERROR_INVALID_POKEMON = 7;
		ERROR_INSUFFICIENT_PAYMENT = 8;
		ERROR_TRADING_EXPIRED = 9;
		ERROR_TRADING_FINISHED = 10;
	}

	optional Result result = 1;
	optional TradingProto trading = 2;
}

message UpdateTradingProto {
	optional string player_id = 1;
	optional fixed64 pokemon_id = 2;
}

message UpgradePokemonOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_POKEMON_NOT_FOUND = 2;
		ERROR_INSUFFICIENT_RESOURCES = 3;
		ERROR_UPGRADE_NOT_AVAILABLE = 4;
		ERROR_POKEMON_IS_DEPLOYED = 5;
		ERROR_DUPLICATE_REQUEST = 6;
	}

	message BulkUpgradesCost {
		optional int32 number_of_upgrades = 1;
		optional int32 pokemon_level = 2;
		optional int32 pokemon_cp = 3;
		optional int32 total_stardust_cost = 4;
		optional int32 total_candy_cost = 5;
		optional float total_cp_multiplier = 6;
		optional int32 total_xl_candy_cost = 7;
	}

	optional Result result = 1;
	optional PokemonProto upgraded_pokemon = 2;
	optional PokemonProto next_upgraded_pokemon = 3;
	repeated BulkUpgradesCost bulk_upgrades_cost_table = 4;
}

message UpgradePokemonProto {
	optional fixed64 pokemon_id = 1;
	optional bool preview = 2;
	optional uint32 number_of_upgrades = 3;
	optional int32 pokemon_current_cp = 4;
}

message UploadManagementSettings {
	optional bool upload_management_enabled = 1;
	optional int32 upload_management_texture_size = 2;
	optional bool ob_bool = 3;
}

message UploadManagementTelemetry {
	enum UploadManagementEventId {
		UNKNOWN = 0;
		UPLOAD_ALL_FROM_ENTRY_POINT = 1;
		UPLOAD_ALL_FROM_UPLOAD_MGMT_MENU = 2;
		CANCEL_ALL_FROM_ENTRY_POINT = 3;
		CANCEL_ALL_FROM_UPLOAD_MGMT_MENU = 4;
		CANCEL_INDIVIDUAL_UPLOAD = 5;
		DELETE_INDIVIDUAL_UPLOAD = 6;
		UPLOAD_ALL_SUCCESS = 7;
		UPLOAD_ALL_FAILURE = 8;
	}

	optional UploadManagementEventId upload_management_telemetry_id = 1;
}

message UploadRaidClientLogOutProto {
}

message UploadRaidClientLogProto {
	optional RaidClientLogInfoProto ob_raid_client_info = 1;
	repeated RaidClientLogsProto ob_raid_client_logs = 2;
}

message UpsightLoggingSettingsProto {
	optional bool use_verbose_logging = 1;
	optional int32 logging_percentage = 2;
	optional bool disable_logging = 3;
}

message Upstream {
	optional SubscriptionRequest subscribe = 3;
	optional ProbeResponse probe = 4;

	message ProbeResponse {
		enum NetworkType {
			UNSET = 0;
			DATA = 1;
			WIFI = 2;
		}

		optional int64 probe_start_ms = 1;
		optional string game_context = 2;
		optional NetworkType network_type = 3;
	}

	message SubscriptionRequest {
		repeated TopicProto topics = 1;
	}

	optional int64 request_id = 1;
	optional bytes token = 2;
}

message UseIncenseActionOutProto {
	enum Result {
		UNKNOWN = 0;
		SUCCESS = 1;
		INCENSE_ALREADY_ACTIVE = 2;
		NONE_IN_INVENTORY = 3;
		LOCATION_UNSET = 4;
		INCENSE_DISABLED = 5;
	}

	optional Result result = 1;
	optional AppliedItemProto applied_incense = 2;
	optional LootProto ob_loot = 3;
}

message UseIncenseActionProto {
	optional Item incense_type = 1;
}

message UseItemCaptureOutProto {
	optional bool success = 1;
	optional double item_capture_mult = 2;
	optional double item_flee_mult = 3;
	optional bool stop_movement = 4;
	optional bool stop_attack = 5;
	optional bool target_max = 6;
	optional bool target_slow = 7;
}

message UseItemCaptureProto {
	optional Item item = 1;
	optional fixed64 encounter_id = 2;
	optional string spawn_point_guid = 3;
}

message UseItemEggIncubatorOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INCUBATOR_NOT_FOUND = 2;
		ERROR_POKEMON_EGG_NOT_FOUND = 3;
		ERROR_POKEMON_ID_NOT_EGG = 4;
		ERROR_INCUBATOR_ALREADY_IN_USE = 5;
		ERROR_POKEMON_ALREADY_INCUBATING = 6;
		ERROR_INCUBATOR_NO_USES_REMAINING = 7;
	}

	optional Result result = 1;
	optional EggIncubatorProto egg_incubator = 2;
}

message UseItemEggIncubatorProto {
	optional string item_id = 1;
	optional int64 pokemond_id = 2;
}

message UseItemEncounterOutProto {
	enum Status {
		SUCCESS = 0;
		ALREADY_COMPLETED = 1;
		ACTIVE_ITEM_EXISTS = 2;
		NO_ITEM_IN_INVENTORY = 3;
		INVALID_ITEM_CATEGORY = 4;
	}

	optional Status status = 1;
	optional CaptureProbabilityProto capture_probability = 2;
	optional Item active_item = 3;
}

message UseItemEncounterProto {
	optional Item item = 1;
	optional fixed64 encounter_id = 2;
	optional string spawn_point_guid = 3;
}

message UseItemMoveRerollOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		NO_POKEMON = 2;
		NO_OTHER_MOVES = 3;
		NO_PLAYER = 4;
		WRONG_ITEM_TYPE = 5;
		ITEM_NOT_IN_INVENTORY = 6;
		INVALID_POKEMON = 7;
		MOVE_LOCKED = 8;
		MOVE_CANNOT_BE_REROLLED = 9;
		INVALID_ELITE_MOVE = 10;
	}

	optional Result result = 1;
	optional PokemonProto updated_pokemon = 2;
}

message UseItemMoveRerollProto {
	optional Item item = 1;
	optional fixed64 pokemon_id = 2;
	optional bool reroll_unlocked_move = 3;
	optional HoloPokemonMove target_elite_move = 4;
}

message UseItemPotionOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NO_POKEMON = 2;
		ERROR_CANNOT_USE = 3;
		ERROR_DEPLOYED_TO_FORT = 4;
	}

	optional Result result = 1;
	optional int32 stamina = 2;
}

message UseItemPotionProto {
	optional Item item = 1;
	optional fixed64 pokemon_id = 2;
}

message UseItemRareCandyOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		INVALID_POKEMON_ID = 2;
		NO_PLAYER = 3;
		WRONG_ITEM_TYPE = 4;
		ITEM_NOT_IN_INVENTORY = 5;
		NOT_ENOUGH_ITEMS = 6;
	}

	optional Result result = 1;
	optional HoloPokemonId pokemon_id = 2;
}

message UseItemRareCandyProto {
	optional Item item = 1;
	optional HoloPokemonId pokemon_id = 2;
	optional int32 candy_count = 3;
}

message UseItemReviveOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_NO_POKEMON = 2;
		ERROR_CANNOT_USE = 3;
		ERROR_DEPLOYED_TO_FORT = 4;
	}

	optional Result result = 1;
	optional int32 stamina = 2;
}

message UseItemReviveProto {
	optional Item item = 1;
	optional fixed64 pokemon_id = 2;
}

message UseItemStardustBoostOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_ITEM_TYPE = 2;
		ERROR_STARDUST_BOOST_ALREADY_ACTIVE = 3;
		ERROR_NO_ITEMS_REMAINING = 4;
		ERROR_LOCATION_UNSET = 5;
	}

	optional Result result = 1;
	optional AppliedItemsProto applied_items = 2;
}

message UseItemStardustBoostProto {
	optional Item item = 1;
}

message UseItemXpBoostOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
		ERROR_INVALID_ITEM_TYPE = 2;
		ERROR_XP_BOOST_ALREADY_ACTIVE = 3;
		ERROR_NO_ITEMS_REMAINING = 4;
		ERROR_LOCATION_UNSET = 5;
	}

	optional Result result = 1;
	optional AppliedItemsProto applied_items = 2;
}

message UseItemXpBoostProto {
	optional Item item = 1;
}

message UserAttributesProto {
	optional int32 level = 1;
	optional int64 xp_percentage = 2;
	optional int64 pokecoin_count = 3;
	optional Team team = 4;
	optional int32 catch_streak = 5;
	optional int32 spin_streak = 6;
	optional string buddy_name = 7;
	optional bool is_egg_incubating = 8;
	optional bool has_eggs = 9;
	optional int32 star_piece_count = 10;
	optional int32 lucky_egg_count = 11;
	optional int32 incense_ordinary_count = 12;
	optional int32 incense_spicy_count = 13;
	optional int32 incense_cool_count = 14;
	optional int32 incense_floral_count = 15;
	optional int32 lure_ordinary_count = 16;
	optional int32 lure_mossy_count = 17;
	optional int32 lure_glacial_count = 18;
	optional int32 lure_magnetic_count = 19;
	optional bool using_star_piece = 20;
	optional bool using_lucky_egg = 21;
	optional bool using_incense_ordinary = 22;
	optional bool using_incense_spicy = 23;
	optional bool using_incense_cool = 24;
	optional bool using_incense_floral = 25;
	optional bool using_lure_ordinary = 26;
	optional bool using_lure_mossy = 27;
	optional bool using_lure_glacial = 28;
	optional bool using_lure_magnetic = 29;
	optional bool adventure_sync_opt_in = 30;
	optional bool geo_fence_opt_in = 31;
	optional int32 kanto_dex_count = 32;
	optional int32 johto_dex_count = 33;
	optional int32 hoenn_dex_count = 34;
	optional int32 sinnoh_dex_count = 35;
	optional int32 friend_count = 36;
	optional int32 field_research_stamp_progress = 37;
	optional int32 level_up = 38;
	optional bool sent_friend_request = 39;
	optional string is_egg_incubating_v2 = 40;
	optional string has_eggs_v2 = 41;
	optional string using_star_piece_v2 = 42;
	optional string using_lucky_egg_v2 = 43;
	optional string using_incense_ordinary_v2 = 44;
	optional string using_incense_spicy_v2 = 45;
	optional string using_incense_cool_v2 = 46;
	optional string using_incense_floral_v2 = 47;
	optional string using_lure_ordinary_v2 = 48;
	optional string using_lure_mossy_v2 = 49;
	optional string using_lure_glacial_v2 = 50;
	optional string using_lure_magnetic_v2 = 51;
	optional string adventure_sync_opt_in_v2 = 52;
	optional string geo_fence_opt_in_v2 = 53;
	optional int32 unova_dex_count = 54;
	optional int32 balloon_battles_completed = 55;
	optional int32 balloon_battles_won = 56;
	optional int32 kalos_dex_count = 57;
	optional int32 alola_dex_count = 58;
	optional int32 galar_dex_count = 59;
}

message UserIssueWeatherReport {
	optional string gameplayer_weather = 1;
	optional bool alert_active = 2;
	optional WeatherAlertProto.Severity severity = 3;
	optional int32 user_report = 4;
}

message UsernameSuggestionSettings {
	optional bool ob_enabled = 1;
	optional int32 ob_username_suggestion_int32_1 = 2;
	optional int32 ob_username_suggestion_int32_2 = 3;
}

message UsernameSuggestionTelemetry {
	optional SuggestionsEvents ob_suggest_1 = 1;
	optional ObSuggestionsEntry ob_suggest_2 = 2;
}

message VasaClientAction {
	enum ActionEnum {
		INVALID_VASA_CLIENT_ACTION = 0;
		COLLECT_ADID = 8000;
	}

	optional ActionEnum action = 1;
}

message VerboseLogCombatSettingsProto {
	optional bool ob_bool_1 = 1;
	optional bool ob_bool_2 = 2;
	optional bool ob_bool_3 = 3;
	optional bool ob_bool_4 = 4;
	optional bool ob_bool_5 = 5;
	optional bool ob_bool_6 = 6;
	optional bool ob_bool_7 = 7;
	optional bool ob_bool_8 = 8;
	optional bool ob_bool_9 = 9;
	optional int32 ob_int32_1 = 10;
	optional bool ob_bool_10 = 11;
	optional int32 ob_int32_2 = 12;
}

message VerboseLogRaidSettings {
	optional bool verbose_raid_bool_1 = 1;
	optional bool verbose_raid_bool_2 = 2;
	optional bool verbose_raid_bool_3 = 3;
	optional bool verbose_raid_bool_4 = 4;
	optional bool verbose_raid_bool_5 = 5;
	optional bool verbose_raid_bool_6 = 6;
	optional bool verbose_raid_bool_7 = 7;
	optional bool verbose_raid_bool_8 = 8;
	optional bool verbose_raid_bool_9 = 9;
	optional bool verbose_raid_bool_10 = 10;
	optional bool verbose_raid_bool_11 = 11;
	optional bool verbose_raid_bool_12 = 12;
	optional bool verbose_raid_bool_13 = 13;
	optional bool verbose_raid_bool_14 = 14;
	optional bool verbose_raid_bool_15 = 15;
	optional int32 verbose_raid_int32 = 16;
}

message VerifyChallengeOutProto {
	optional bool success = 1;
}

message VerifyChallengeProto {
	optional string token = 1;
}

message ViewPointOfInterestImageTelemetry {
	optional string result = 1;
	optional string fort_id = 2;
	optional int32 fort_type = 3;
	optional bool in_range = 4;
	optional bool was_gym_interior = 5;
	optional string partner_id = 6;
	optional string campaign_id = 7;
}

message VsSeekerAttributesProto {
	enum VsSeekerStatus {
		UNSET = 0;
		STARTED_CHARGING = 1;
		FULLY_CHARGED = 2;
		ACTIVATED = 3;
	}

	optional VsSeekerStatus vs_seeker_status = 1;
	optional double start_km_walked = 2;
	optional double target_km_walked = 3;
	optional int32 battle_granted_remaining = 4;
	optional int32 max_battles_in_set = 6;
	optional VsSeekerRewardTrack reward_track = 7;
	optional string battle_now_sku_id = 8;
	optional bool additional_battles_granted = 9;
}

message VsSeekerBattleResult {
	optional CombatPlayerFinishState battle_result = 1;
	optional bool rewards_claimed = 2;
	optional bool is_pending_pokemon_reward = 3;
}

message VsSeekerClientSettingsProto {
	optional string upgrade_iap_sku_id = 1;
	repeated string allowed_vs_seeker_league_template_id = 2;
}

message VsSeekerCompleteSeasonLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
	optional int32 rank = 3;
	optional float rating = 4;
}

message VsSeekerCreateDetail {
	optional int32 season = 1;
	optional string league = 2;
}

message VsSeekerLootProto {
	message RewardProto {
		optional LootItemProto item = 1;
		optional bool pokemon_reward = 2;
		optional bool item_loot_table = 3;
		optional int32 item_loot_table_count = 4;
		optional int32 item_ranking_loot_table_count = 5;
	}

	optional int32 rank_level = 1;
	repeated RewardProto reward = 2;
	optional VsSeekerRewardTrack reward_track = 3;
}

message VsSeekerPokemonRewardsProto {
	message OverrideIvRangeProto {
		optional RangeProto range = 1;
		optional bool zero = 2;
	}

	message PokemonUnlockProto {
		optional PokemonEncounterRewardProto pokemon = 1;
		optional LimitedEditionPokemonEncounterRewardProto limited_pokemon_reward = 2;
		optional LimitedEditionPokemonEncounterRewardProto guaranteed_limited_pokemon_reward = 3;

		optional int32 unlocked_at_rank = 4;
		optional float weight = 5;
		optional OverrideIvRangeProto attack_iv_override = 6;
		optional OverrideIvRangeProto defense_iv_override = 7;
		optional OverrideIvRangeProto stamina_iv_override = 8;
	}

	repeated PokemonUnlockProto available_pokemon = 1;
	optional VsSeekerRewardTrack reward_track = 2;
}

message VsSeekerRewardEncounterOutProto {
	enum Result {
		VS_SEEKER_ENCOUNTER_UNKNOWN = 0;
		VS_SEEKER_ENCOUNTER_SUCCESS = 1;
		VS_SEEKER_ENCOUNTER_ALREADY_FINISHED = 2;
		ERROR_PLAYER_NOT_ENOUGH_VICTORIES = 3;
		ERROR_POKEMON_INVENTORY_FULL = 4;
		ERROR_REDEEM_ITEM = 5;
	}

	optional Result result = 1;
	optional PokemonProto pokemon = 2;
	optional CaptureProbabilityProto capture_probability = 3;
	optional Item active_item = 4;
	optional fixed64 encounter_id = 5;
}

message VsSeekerRewardEncounterProto {
	optional int32 win_index = 1;
}

message VsSeekerSetLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
	optional int32 new_rank = 3;
	optional float new_rating = 4;
	optional int32 previous_rank = 5;
	optional float previous_rating = 6;
	optional int32 number_of_wins = 7;
	optional int32 number_of_battles = 8;
}

message VsSeekerStartMatchmakingDataProto {
	optional int32 ob_int32 = 1;
	repeated int32 ob_list_int32 = 2;
}

message VsSeekerStartMatchmakingOutProto {
	enum Result {
		UNSET = 0;
		SUCCESS_OPPONENT_FOUND = 1;
		SUCCESS_QUEUED = 2;
		ERROR_NO_BATTLE_PASSES_LEFT = 3;
		ERROR_ALREADY_IN_QUEUE = 4;
		ERROR_VS_SEEKER_PLAYER_IN_WRONG_SEASON = 5;
		ERROR_PLAYER_HAS_NO_VS_SEEKER = 6;
		ERROR_ACCESS_DENIED = 7;
		ERROR_POKEMON_LINEUP_INELIGIBLE_FOR_LEAGUE = 8;
		ERROR_VS_SEEKER_NOT_ACTIVATED = 9;
		ERROR_TEMPORARILY_UNAVAILABLE = 10;
		ERROR_EXCEEDED_LIMIT = 11;
		ERROR_QUEUE_TOO_FULL = 12;
	}

	optional Result result = 1;
	optional CombatChallengeProto challenge = 2;
	optional string queue_id = 3;
}

message VsSeekerStartMatchmakingProto {
	optional string combat_league_template_id = 1;
	repeated fixed64 attacking_pokemon_id = 2;
}

message VsSeekerStartMatchmakingResponseDataProto {
	optional int32 ob_int32 = 1;
	optional uint32 ob_uint32 = 2;
	optional VsSeekerStartMatchmakingOutProto.Result result = 3;
	optional ObCommunCombatChallengeDataProto challenge = 4;
}

message VsSeekerWinRewardsLogEntry {
	enum Result {
		UNSET = 0;
		SUCCESS = 1;
	}

	optional Result result = 1;
	optional LootProto rewards = 2;
	optional int32 rank = 3;
	optional int32 win_number = 4;
}

message WainaGetRewardsRequest {
	optional uint32 sleep_day = 1;
}

message WainaSubmitSleepDataRequest {
	repeated ClientSleepRecord sleep_record = 1;
}

message WainaSubmitSleepDataResponse {
	enum Status {
		UNSET = 0;
		SUCCESS = 1;
		ERROR = 2;
	}

	optional Status status = 1;
}

message WallabySettingsProto {
	optional bool enable = 1;
	optional float activity_length_s = 2;
	optional uint32 test_mask = 3;
}

message WayfarerOnboardingFlowTelemetry {
	enum EventType {
		UNSET = 0;
		ENTER_WAYFARER_WEBSITE = 1;
		DEFER_WAYFARER_ONBOARDING = 2;
		SIMPLIFIED_ONBOARDING_OK = 3;
	}

	optional EventType event_type = 1;
}

message WaypointDraftProto {
	optional double latitude = 1;
	optional double longitude = 2;
	optional string fort_id = 3;
	optional bool visited = 4;
}

message WayspotEditTelemetry {
	enum WayspotEditEventId {
		UNKNOWN = 0;
		EDIT_IMAGE_UPLOAD_NOW = 1;
		EDIT_IMAGE_UPLOAD_LATER = 2;
	}

	optional WayspotEditEventId wayspot_edit_telemetry_id = 1;
}

message WeatherAffinityProto {
	optional GameplayWeatherProto.WeatherCondition weather_condition = 1;
	repeated HoloPokemonType pokemon_type = 2;
	repeated HoloPokemonType weakness_pokemon_type = 3;
}

message WeatherAlertProto {
	enum Severity {
		NONE = 0;
		MODERATE = 1;
		EXTREME = 2;
	}

	optional Severity severity = 1;
	optional bool warn_weather = 2;
}

message WeatherBonusProto {
	optional int32 cp_base_level_bonus = 1;
	optional int32 guaranteed_individual_values = 2;
	optional double stardust_bonus_multiplier = 3;
	optional double attack_bonus_multiplier = 4;
	optional int32 raid_encounter_cp_base_level_bonus = 5;
	optional int32 raid_encounter_guaranteed_individual_values = 6;
	optional int32 buddy_emotion_favorite_weather_increment = 7;
	optional int32 buddy_emotion_dislike_weather_decrement = 8;
}

message WeatherDetailClickTelemetry {
	optional string gameplay_weather_type = 1;
	optional bool alert_active = 2;
	optional WeatherAlertProto.Severity severity = 3;
}

message WebSocketResponseDataProto {
	optional ObCommunWebCombatStateProto ob_commun_web_combat_state = 1;
}

message WebTelemetry {
	optional WebTelemetryIds web_click_ids = 1;
	optional string url = 2;
	optional string fort_id = 3;
	optional string partner_id = 4;
	optional string campaign_id = 5;
}

message WidgetsProto {
	enum WidgetType {
		UNSET = 0;
		EGG_INCUBATORS = 1;
		BUDDY_STATS = 2;
		ACTIVITY_SUMMARY = 3;
	}

	repeated WidgetType widgets = 2;
}

message WildCreateDetail {
	optional bool caught_in_wild = 1;
}

message WildPokemonProto {
	optional fixed64 encounter_id = 1;
	optional int64 last_modified_ms = 2;
	optional double latitude = 3;
	optional double longitude = 4;
	optional string spawn_point_id = 5;
	optional PokemonProto pokemon = 7;
	optional int32 time_till_hidden_ms = 11;
}

message WithBadgeTypeProto {
	repeated HoloBadgeType badge_type = 1;
	optional int32 badge_rank = 2;
	optional int32 amount = 3;
	repeated HoloBadgeType badge_types_to_exclude = 4;
}

message WithBuddyProto {
	optional BuddyLevel min_buddy_level = 1;
	optional bool must_be_on_map = 2;
}

message WithCombatTypeProto {
	repeated CombatType combat_type = 1;
}

message WithCurveBallProto {
}

message WithDailyBuddyAffectionProto {
	optional int32 min_buddy_affection_earned_today = 1;
}

message WithDailyCaptureBonusProto {
}

message WithDailySpinBonusProto {
}

message WithDistanceProto {
	optional double distance_km = 1;
}

message WithElapsedTimeProto {
	optional int64 elapsed_time_ms = 1;
}

message WithEncounterTypeProto {
	repeated EncounterType encounter_type = 1;
}

message WithFriendLevelProto {
	repeated FriendshipLevelMilestone friendship_level_milestone = 1;
}

message WithFriendsRaidProto {
	optional RaidLocationRequirement friend_location = 1;
	optional int32 min_friends_in_raid = 2;
}

message WithGblRankProto {
	optional int32 rank = 1;
}

message WithInvasionCharacterProto {
	repeated EnumWrapper.CharacterCategory category = 1;
	repeated EnumWrapper.InvasionCharacter invasion_character = 2;
}

message WithItemProto {
	optional Item item = 1;
}

message WithItemTypeProto {
	repeated HoloItemType item_type = 1;
}

message WithLocationProto {
	repeated int64 s2_cell_id = 1;
}

message WithMaxCpProto {
	optional int32 max_cp = 1;
}

message WithNpcCombatProto {
	optional bool requires_win = 1;
	repeated string combat_npc_trainer_id = 2;
}

message WithPlayerLevelProto {
	optional int32 level = 1;
}

message WithPokemonAlignmentProto {
	repeated PokemonDisplayProto.Alignment alignment = 1;
}

message WithPokemonCategoryProto {
	optional string category_name = 1;
	repeated HoloPokemonId pokemon_ids = 2;
}

message WithPokemonCostumeProto {
	optional bool require_no_costume = 1;
}

message WithPokemonCpLimitProto {
	optional int32 min_cp = 1;
	optional int32 max_cp = 2;
}

message WithPokemonCpProto {
	optional int32 max_cp = 1;
	optional int32 min_cp = 2;
}

message WithPokemonLevelProto {
	optional bool max_level = 1;
}

message WithPokemonTypeProto {
	repeated HoloPokemonType pokemon_type = 1;
}

message WithPvpCombatProto {
	optional bool requires_win = 1;
	repeated string combat_league_template_id = 2;
	optional HoloBadgeType combat_league_badge = 3;
}

message WithQuestContextProto {
	optional QuestProto.Context context = 1;
}

message WithRaidLevelProto {
	repeated RaidLevel raid_level = 1;
}

message WithRaidLocationProto {
	optional RaidLocationRequirement location = 1;
}

message WithSingleDayProto {
	optional int64 last_window = 1;
}

message WithSuperEffectiveChargeMoveProto {
}

message WithTempEvoIdProto {
	repeated HoloTemporaryEvolutionId mega_form = 1;
}

message WithThrowTypeProto {
	optional HoloActivityType throw_type = 1;
	optional bool hit = 2;
}

message WithUniquePokemonProto {
}

message WithUniquePokestopProto {
}

message WithWeatherBoostProto {
}

message WithWinBattleStatusProto {
}

message WithWinGymBattleStatusProto {
}

message WithWinRaidStatusProto {
}