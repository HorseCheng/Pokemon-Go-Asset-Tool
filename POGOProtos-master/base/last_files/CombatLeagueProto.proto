/*
* Copyright 2016-2022 --=FurtiF=--.
*
* Licensed under the
*	Educational Community License, Version 2.0 (the "License"); you may
*	not use this file except in compliance with the License. You may
*	obtain a copy of the License at
*
*	http://www.osedu.org/licenses/ECL-2.0
*
*	Unless required by applicable law or agreed to in writing,
*	software distributed under the License is distributed on an "AS IS"
*	BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
*	or implied. See the License for the specific language governing
*	permissions and limitations under the License.
*
* Note: For references only.
*
*/

syntax = "proto3";
package POGOProtos.Rpc;

import "WithPokemonCpLimitProto.proto";
import "WithPokemonTypeProto.proto";
import "WithPokemonCategoryProto.proto";
import "HoloPokemonId.proto";
import "WithPlayerLevelProto.proto";
import "HoloBadgeType.proto";
import "FastMoveLeakBaselineProto.proto";

message CombatLeagueProto {
	enum ConditionType {
		UNSET = 0;
		WITH_POKEMON_CP_LIMIT = 1;
		WITH_PLAYER_LEVEL = 2;
		WITH_POKEMON_TYPE = 3;
		WITH_POKEMON_CATEGORY = 4;
		WITH_UNIQUE_POKEMON = 5;
		POKEMON_WHITELIST = 6;
		POKEMON_BANLIST = 7;
		POKEMON_CAUGHT_TIMESTAMP = 8;
		POKEMON_LEVEL_RANGE = 9;
	}

	enum LeagueType {
		NONE = 0;
		STANDARD = 1;
		PREMIER = 2;
	}

	message PokemonBanlist {
		string name = 1;
		repeated PokemonWithForm pokemon = 2;
	}

	message PokemonCaughtTimestamp {
		int64 after_timestamp = 1;
		int64 before_timestamp = 2;
	}

	message PokemonConditionProto {
		oneof Condition {
			WithPokemonCpLimitProto with_pokemon_cp_limit = 2;
			WithPokemonTypeProto with_pokemon_type = 3;
			WithPokemonCategoryProto with_pokemon_category = 4;
			PokemonWhitelist pokemon_white_list = 5;
			PokemonBanlist pokemon_ban_list = 6;
			PokemonCaughtTimestamp pokemon_caught_timestamp = 7;
			PokemonLevelRange pokemon_level_range = 8;
		}

		ConditionType type = 1;
	}

	message PokemonLevelRange {
		int32 min_level = 1;
		int32 max_level = 2;
	}

	message PokemonWhitelist {
		string name = 1;
		repeated PokemonWithForm pokemon = 2;
	}

	message PokemonWithForm {
		HoloPokemonId id = 1;
		PokemonDisplayProto.Form form = 2;
		repeated PokemonDisplayProto.Form forms = 3;
	}

	message UnlockConditionProto {
		oneof Condition {
			WithPlayerLevelProto with_player_level = 3;
			WithPokemonCpLimitProto with_pokemon_cp_limit = 4;
			WithPokemonTypeProto with_pokemon_type = 5;
			WithPokemonCategoryProto with_pokemon_category = 6;
			PokemonWhitelist pokemon_white_list = 7;
			PokemonBanlist pokemon_ban_list = 8;
			PokemonCaughtTimestamp pokemon_caught_timestamp = 9;
			PokemonLevelRange pokemon_level_range = 10;
		}

		ConditionType type = 1;
		int32 min_pokemon_count = 2;
	}

	string title = 1;
	bool enabled = 2;
	repeated UnlockConditionProto unlock_condition = 3;
	repeated PokemonConditionProto pokemon_condition = 4;
	string icon_url = 5;
	int32 pokemon_count = 6;
	repeated HoloPokemonId banned_pokemon = 7;
	HoloBadgeType badge_type = 8;
	int32 minigame_defense_chance_limit = 9;
	string battle_party_combat_league_template_id = 10;
	LeagueType league_type = 11;
	string border_color_hex = 12;
	bool allow_temp_evos = 13;
	repeated FastMoveLeakBaselineProto fast_move_leak_baseline = 14;
}
